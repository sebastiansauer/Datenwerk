from skllm import ZeroShotGPTClassifier
from skllm.config import SKLLMConfig  # Anmeldung
import pandas as pd
import time
import os
csv_file_path_train = 'https://github.com/sebastiansauer/pradadata/raw/master/data-raw/germeval_train.csv'
germeval_train = pd.read_csv(csv_file_path_train)
csv_file_path_test = 'https://github.com/sebastiansauer/pradadata/raw/master/data-raw/germeval_test.csv'
germeval_test = pd.read_csv(csv_file_path_test)
n_tweets = 4
X_train = germeval_train["text"].head(n_tweets).tolist()
X_train
y_train = germeval_train["c1"].head(n_tweets).tolist()
y_train
X_test = germeval_test["text"].head(n_tweets).tolist()
OPENAI_SECRET_KEY = os.environ.get("OPENAI_API_KEY")
OPENAI_ORG_ID = os.environ.get("OPENAI_ORG_ID")
SKLLMConfig.set_openai_key(OPENAI_SECRET_KEY)
SKLLMConfig.set_openai_org(OPENAI_ORG_ID)
clf = ZeroShotGPTClassifier(openai_model="gpt-3.5-turbo")
clf.fit(X = X_train, y = y_train)
y_pred = clf.predict(X = X_test)
for tweet, sentiment in zip(X_test, y_test):
print(f"Review: {tweet}\nPredicted Sentiment: {sentiment}\n\n")
y_pred = clf.predict(X = X_test)
from skllm import ZeroShotGPTClassifier
from skllm.config import SKLLMConfig  # Anmeldung
import pandas as pd
import time
import os
csv_file_path_train = 'https://github.com/sebastiansauer/pradadata/raw/master/data-raw/germeval_train.csv'
germeval_train = pd.read_csv(csv_file_path_train)
csv_file_path_test = 'https://github.com/sebastiansauer/pradadata/raw/master/data-raw/germeval_test.csv'
germeval_test = pd.read_csv(csv_file_path_test)
n_tweets = 7
X_train = germeval_train["text"].head(n_tweets).tolist()
X_train
y_train = germeval_train["c1"].head(n_tweets).tolist()
y_train
X_test = germeval_test["text"].head(n_tweets).tolist()
OPENAI_SECRET_KEY = os.environ.get("OPENAI_API_KEY")
OPENAI_ORG_ID = os.environ.get("OPENAI_ORG_ID")
SKLLMConfig.set_openai_key(OPENAI_SECRET_KEY)
SKLLMConfig.set_openai_org(OPENAI_ORG_ID)
clf = ZeroShotGPTClassifier(openai_model="gpt-3.5-turbo")
clf.fit(X = X_train, y = y_train)
y_pred = clf.predict(X = X_test)
for tweet, sentiment in zip(X_test, y_test):
print(f"Review: {tweet}\nPredicted Sentiment: {sentiment}\n\n")
for tweet, sentiment in zip(X_test, y_pred):
print(f"Review: {tweet}\nPredicted Sentiment: {sentiment}\n\n")
from openai import OpenAI
import openai
client = OpenAI()
import openai
import pandas as pd
pd.__version__
opneai.__version
openai.__version
import openai
openai.__version
time.__version
pd.__version__
openai
openai.version
!pip list
!pip list | grep openai
import openai
from openai import OpenAI
reticulate::repl_python()
reticulate::py_config()
reticulate::py_install("openai")
library(reticulate)
virtualenv_remove(envname = "r-tensorflow", package = "scikit-llm")
Y
reticulate::virtualenv_create("scikit-llm")
reticulate::repl_python()
library(reticulate)
#virtualenv_create("chatgpt")
use_virtualenv("chatgpt")
library(reticulate)
#virtualenv_create("chatgpt")
use_virtualenv("chatgpt")
reticulate::py_config()
reticulate::py_install("time")
reticulate::repl_python()
reticulate::py_install("openai")
reticulate::py_install("pandas")
reticulate::repl_python()
library(reticulate)
#virtualenv_create("chatgpt")
use_virtualenv("chatgpt")
reticulate::repl_python()
py_install("tiktoken")
reticulate::repl_python()
knitr::opts_chunk$set(fig.pos = 'H',
fig.asp = 0.618,
fig.width = 4,
fig.cap = "",
fig.path = "",
echo = TRUE,
message = FALSE,
fig.show = "hold")
library(reticulate)
#virtualenv_create("chatgpt")
use_virtualenv("chatgpt")
reticulate::py_config()
#reticulate::py_install("pandas")
reticulate::repl_python()
knitr::opts_chunk$set(fig.pos = 'H',
fig.asp = 0.618,
fig.width = 4,
fig.cap = "",
fig.path = "",
echo = TRUE,
message = FALSE,
fig.show = "hold")
library(reticulate)
#virtualenv_create("chatgpt")
use_virtualenv("chatgpt")
reticulate::py_config()
#reticulate::py_install("pandas")
reticulate::repl_python()
tweets.columns
reticulate::repl_python()
germeval_test.head
germeval_test.head()
germeval_test.head
germeval_test.head()
print(germeval_test.head())
reticulate::repl_python()
#reticulate::py_install("pandas")
#py_install("tiktoken")
py_install("datar")
reticulate::repl_python()
x = germeval_test
reticulate::repl_python()
y. df["c1"].values.tolist()
y = df["c1"].values.tolist()
df["c1"].values.tolist()
reticulate::repl_python()
pd.write.csv(results, "germeval-test-0to99-chatgpt-preds.csv")
pd.write_csv(results, "germeval-test-0to99-chatgpt-preds.csv")
reticulate::repl_python()
preds_r <- py$preds
library(reticulate)
preds_r <- py$preds
preds_r |>
count(pred)
library(tidyverse)
preds_r |>
count(pred)
View(preds_r)
preds_r |>
count(pred)
preds_r |>
count(pred) |>
filter(-row_number(1:2))
preds_r |>
count(pred) |>
slice(3:5)
reticulate::repl_python()
library(tidymodels)
reticulate::repl_python()
py$y
accuracy_vec(truth = py$y,
estimate = preds_r$pred)
accuracy_vec(truth = as.factor(py$y),
estimate = as.factor(preds_r$pred))
accuracy_vec(truth = as.factor(py$y),
estimate = as.factor(py$preds_rescored))
reticulate::repl_python()
preds_r <- py$preds
preds_r |>
count(pred) |>
slice(3:5)  # zwei komische, kaputte Zeilen, weg damit
reticulate::repl_python()
y_pred = preds["pred"].values.tolist()
y_pred = preds["pred"].tolist()
reticulate::repl_python()
accuracy_vec(truth = as.factor(py$y),
estimate = as.factor(py$preds_list))
y_truth = as.facotr(py$y)
y_truth = as.factor(py$y)
y_pred = as.facotr(py$preds_list)
y_pred = as.factor(py$preds_list)
y_pred = py$preds_list
y_pred = as.factor(y_pred)
y_pred = py$preds_list |> simplify()
y_pred = as.factor(y_pred)
y_pred = as.character(y_pred)
accuracy_vec(truth = y_truth,
estimate = y_pred)
y_pred = as.character(y_pred) |> as.factor()
accuracy_vec(truth = y_truth,
estimate = y_pred)
y_pred[y_pred == "NaN"] <- NA
y_pred <- as.factor(y_pred)
accuracy_vec(truth = y_truth,
estimate = y_pred)
table(y_pred)
y_pred[!y_pred %in% c("negativ", "OTHER")] <- NA
table(y_pred)
# Create a vector with NaN
vector = c(1, NaN, 3, 4, 5)
# Replace NaN with NA
new_vector = vector[!is.na(vector)]
print(new_vector)
# Create a vector with NaN values
my_vector <- c(1, 2, NaN, 4, NaN, 6)
# Replace NaN with NA
my_vector[is.nan(my_vector)] <- NA
# Print the result
print(my_vector)
y_pred[is.nan(y_pred)] <- NA
table(y_pred)
y_pred[is.nan(y_pred)] <- NA
y_pred <- as.factor(y_pred)
table(y_pred)
y_pred = as.character(y_pred)
y_pred[is.nan(y_pred)] <- NA
y_pred <- as.factor(y_pred)
table(y_pred)
accuracy_vec(truth = y_truth,
estimate = y_pred)
py_install("sklearn")
reticulate::repl_python()
library(tidyverse)
library(tidymodels)
reticulate::repl_python()
