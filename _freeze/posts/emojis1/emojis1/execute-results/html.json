{
  "hash": "84d5e652932f27cb442b2c27e93316fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: emojis1\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- emoji\n- textmining\n- string\ndate: '2023-11-16'\nslug: emojis1\ntitle: emojis1\n\n---\n\n\n\n\n\n\n# Aufgabe\n\nExtrahieren Sie die Anzahl der Emojis aus einem Text. \n\n\nNutzen Sie die [GermEval-2018-Daten](https://heidata.uni-heidelberg.de/dataset.xhtml?persistentId=doi:10.11588/data/0B5VML).\n\nDie Daten sind unter CC-BY-4.0 lizensiert. Author: Wiegand, Michael (Spoken Language Systems, Saarland University (2010-2018), Leibniz Institute for the German Language (since 2019)),\n\nDie Daten sind auch √ºber das R-Paket [PradaData](https://github.com/sebastiansauer/pradadata/tree/master/data-raw/GermEval-2018-Data-master) zu beziehen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(easystats)\ndata(\"germeval_train\", package = \"pradadata\")\n```\n:::\n\n\nNutzen Sie diesen Text-Datensatz, bevor Sie den gr√∂√üeren `germeval`-Datensatz verwenden:\n\n\n# Daten\n\nTeststring:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext <- c(\"Abbau, Abbruch ist jetzt\", \n          \"Test   üßë‚Äçüéì üòÑ heute!!\", \n          \"Abbruch #morgen #perfekt\", \n          \"Abmachung... LORE IPSUM\", \n          \"boese ja\", \"b√∂se nein\", \n          \"hallo ?! www.google.de\", \n          \"gut schlecht I am you are he she it is\")\n\nn_emo <- c(2, 0, 2, 1, 1, 1, 0, 2)\n\ntest_text <-\n  data.frame(id = 1:length(text),\n         text = text,\n         n_emo = n_emo)\n\ntest_text\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id                     text n_emo\n1  1 Abbau, Abbruch ist jetzt     2\n2  2   Test   üßë‚Äçüéì üòÑ heute!!     0\n3  3 Abbruch #morgen #perfekt     2\n [ reached 'max' / getOption(\"max.print\") -- omitted 5 rows ]\n```\n\n\n:::\n:::\n\n\n\nHinweise:\n\n- Orientieren Sie sich im √úbrigen an den [allgemeinen Hinweisen des Datenwerks](https://datenwerk.netlify.app/hinweise).\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# L√∂sung\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tictoc)\nlibrary(emoji)  # emoji_xxx\nlibrary(tidyEmoji)\n```\n:::\n\n\n\n## Test 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_text |> \n  mutate(n_emojis = emoji_count(text))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id                     text n_emo n_emojis\n1  1 Abbau, Abbruch ist jetzt     2        0\n2  2   Test   üßë‚Äçüéì üòÑ heute!!     0        3\n [ reached 'max' / getOption(\"max.print\") -- omitted 6 rows ]\n```\n\n\n:::\n:::\n\n\nDas Paket `emoji` beinhaltet eine Menge Emojis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemoji_name |> length()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4538\n```\n\n\n:::\n:::\n\n\n\n## Test2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_text$text |> \n  emoji_subset()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Test   üßë‚Äçüéì üòÑ heute!!\"\n```\n\n\n:::\n:::\n\n\n\n## TidyEmoji  - Emojis kategorisieren\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(tweets = c(\"I love tidyverse \\U0001f600\\U0001f603\\U0001f603\",\n\"R is my language! \\U0001f601\\U0001f606\\U0001f605\",\n\"This Tweet does not have Emoji!\",\n\"Wearing a mask\\U0001f637\\U0001f637\\U0001f637.\",\n\"Emoji does not appear in all Tweets\",\n\"A flag \\U0001f600\\U0001f3c1\")) %>%\nemoji_categorize(tweets)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 √ó 2\n  tweets                   .emoji_category        \n  <chr>                    <chr>                  \n1 I love tidyverse üòÄüòÉüòÉ  Smileys & Emotion      \n2 R is my language! üòÅüòÜüòÖ Smileys & Emotion      \n3 Wearing a masküò∑üò∑üò∑.    Smileys & Emotion      \n4 A flag üòÄüèÅ              Smileys & Emotion|Flags\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_text |> \n  emoji_categorize(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 √ó 4\n     id text                 n_emo .emoji_category                        \n  <int> <chr>                <dbl> <chr>                                  \n1     2 Test   üßë‚Äçüéì üòÑ heute!!     0 Smileys & Emotion|People & Body|Objects\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(wild_emojis, package = \"pradadata\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwild_emojis |> \n  emoji_categorize(emoji)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 28 √ó 2\n   emoji .emoji_category                           \n   <chr> <chr>                                     \n 1 üí£    Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n 2 üíÄ    Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n 3 ‚ò†Ô∏è     Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n 4 üò†    Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n 5 üëπ    Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n 6 üí©    Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n 7 üò°    Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n 8 ü§¢    Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n 9 ü§Æ    Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n10 üòñ    Smileys & Emotion|NULL|NULL|NULL|NULL|NULL\n# ‚Ñπ 18 more rows\n```\n\n\n:::\n:::\n\n\n\nAlternativ kann man auch via Regex und Unicode Regex ansprechen... \n`emoji_pattern <- \"\\\\p{So}\"`.\n\n\nDas ist vermutlich cleverer ü§ì.\n\n\n\n---\n\nCategories: \n\n- emoji\n- textmining\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}