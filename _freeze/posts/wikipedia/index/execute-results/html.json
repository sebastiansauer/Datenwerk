{
  "hash": "d3229e8d05389b039a3caa4cf2ee4b15",
  "result": {
    "engine": "knitr",
    "markdown": "---\n# gleich diese Datei in einem Ordner mit Namen der Aufgabe abspeichern!\ndate: 2024-08-23  # HEUTIGES DATUM EINTRAGEN, nicht \"today\"\ndraft: FALSE   # ACHTUNG DRAFT STEHT AUF TRUE!\ntitle: wikipedia \nexecute: \n  eval: true \n  \n  \nhighlight-style: arrow \ncache: true\ntoc: true\nnumber-sections: true\nextype: string\nexsolution: \"\"\nexshuffle: no\ncategories:\n- simulation \n- probability\n- story\n- nullhypothesis\n\n\nbibliography: \"bib.bib\"\n\n\n---\n\n\n\n\n# Aufgabe\n\nIn Ihrem Buch \"Active Statistics\" beschreiben die Autoren eine Studie der Wikipedia-Organisation [@gelman_active_2024], vgl. S. 33f.\n\nIn der Studie - ein kontrolliertes Experiment, auch \"A/B-Test\" genannt - wurde der Effekt von abgerundeten vs. quadratischen Ecken von Textboxen auf die Spendenbereitschaft untersucht (s. Abb. 2, S. 34). (Das Buch ist kostenfrei auf der [Webseite zum Buch](https://users.aalto.fi/~ave/ActiveStatistics.pdf) erhältlich.)\n\n\nRunde Ecken:\n\n{{< fa square >}}\n\n\n\n\nQuadratische Ecken:\n\n{{< fa square-full >}}\n\n\n\n\nDas Wikipedia-Team gab folgende Stichprobengrößen an:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_control_group <- 954630  # runde Ecken\nn_exp_group <- 1082180  # quadratische Ecken\nn_total <- n_control_group + n_exp_group\n```\n:::\n\n\n\nDamit liegt der Anteil der Experimentalgruppe am Gesamtstichprobenumfang bei 53%:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_exp_group / n_total\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5313112\n```\n\n\n:::\n:::\n\n\n\n\n**Wie hoch ist die Wahrscheinlichkeit, einen so großen, d.h. 53% vs. 47%, (oder noch größeren) Unterschied in den Umfängen der beiden Stichproben zu erhalten, unter der Annahme einer zufälligen Aufteilung?**\n\nHinweise:\n\n- Nutzen Sie Simulationstechniken.\n- Die Wahrscheinlichkeit ist auf 2 Dezimalen zu runden.\n\n\n\n# Lösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggpubr)  # Visualisierung\n```\n:::\n\n\n\nWir führen probehalber den Versuch einmal durch. \nHat jemand mal eben zwei Millionen Münzen?\nAnstelle von Münzen können wir auch den Computer nutzen.\n\nWir bezeichnen die beiden Ausgänge des Münzwurfexperiments mit 0 (Kontrollgruppe) und 1 (Experimentalgruppe). Eine `1` bedeutet also, dass eine Person der Experimentalgruppe zugeordnet wurde und eine `0`, dass sie der Kontrollgruppe zugeordnet wurde.\n\nDen Münzwurf wiederholen wir `n_total` Mal:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)  # Zufallszahlen festlegen, zur Reproduzierbarkeit\nwikipedia_experiment <- sample(\n  x = c(0,1),  # Ergebnisraum\n  size = n_total,  # Anzahl der Münzen\n  replace = TRUE)  # Ziehen mit Zurücklegen\n```\n:::\n\n\n\nMit `sample` können wir Stichproben ziehen, z.B. von Münzwürfen.\n\nDas Ergebnis ist ein lange Reihe von 0 und 1, die die jeweiligen Ergebnisse der Münzwürfe darstellt. Hier sind die ersten paar Ergebnisse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(wikipedia_experiment, n = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 0 1 1 1 1\n```\n\n\n:::\n:::\n\n\nWenn wir jetzt den Mittelwert berechnen, haben wir damit den Anteil der Experimentalgruppe an der Gesamtstichprobe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanteil_exp_gruppe <- mean(wikipedia_experiment)\nanteil_exp_gruppe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5002185\n```\n\n\n:::\n:::\n\n\nSehr nah dran an der exakten Hälfte! Dieser Versuchsausgang spricht dagegen, dass 53% dass Ergebnis einer Zufallsaufteilung (in Experimental- und Kontrollgruppe) ist.\nAber vielleicht war es nur Pech bzw. Glück? Vielleicht würde das Experiment, wenn wir nochmal die ca. 2 Millionen Münzen werfen, zu einem ganz anderen Ergebnis kommen? \n\nProbieren wir es aus! Wir wiederholen das Experiment sagen wir `n_reps = 100` Mal und notieren jedes Mal den Anteil der Experimentalgruppe am Stichprobenumfang.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_reps <- 100\n```\n:::\n\n\n\nDazu hilft die Funktion `replicate`, die die Münzwurf (Funktion `sample` plus (danach) `mean`) beliebig oft wiederholt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nviele_versuche <- replicate(n_reps, \n                            sample(x = c(0,1), \n                                   size = n_total,\n                                   replace = TRUE) |> \n                              mean())\n```\n:::\n\n\nHier sind die Ergebnisse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nviele_versuche\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 0.5002185 0.5001561 0.5004016 0.4997148 0.4999867 0.4998606 0.5006157\n  [8] 0.4999214 0.4997987 0.5005185 0.5001198 0.5008940 0.4995905 0.4995876\n [15] 0.5000462 0.5000658 0.5000570 0.5002308 0.5000756 0.5002509 0.4999126\n [22] 0.4995596 0.4996062 0.4993976 0.5003250 0.5002921 0.5004021 0.4996809\n [29] 0.5000844 0.4997948 0.4999995 0.5002170 0.5000025 0.5005086 0.4999362\n [36] 0.5003211 0.5008872 0.4996401 0.4998296 0.5004311 0.5002288 0.4998660\n [43] 0.4993681 0.4996784 0.5001031 0.4996779 0.5003638 0.4997722 0.4999656\n [50] 0.4993347 0.4998650 0.4998871 0.5000128 0.5000786 0.5005307 0.5001576\n [57] 0.5000417 0.4998424 0.4998449 0.4998606 0.5005715 0.5002686 0.4999651\n [64] 0.5001060 0.4996313 0.5003024 0.5000948 0.5005975 0.5002897 0.4995689\n [71] 0.5002278 0.4997894 0.5002254 0.5000304 0.4998719 0.5005464 0.4998012\n [78] 0.4998714 0.4999396 0.4999008 0.4995149 0.5001267 0.5003800 0.4999273\n [85] 0.4995100 0.5000584 0.5000172 0.5005818 0.5003000 0.4997800 0.4999887\n [92] 0.4998915 0.5001939 0.4997683 0.4999651 0.4996475 0.5001630 0.4998046\n [99] 0.5006564 0.4997820\n```\n\n\n:::\n:::\n\n\n\nEin paar Statistiken dazu:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(viele_versuche)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5000308\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(viele_versuche)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0003243425\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(viele_versuche)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5000076\n```\n\n\n:::\n\n```{.r .cell-code}\nIQR(viele_versuche)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0004255429\n```\n\n\n:::\n:::\n\n\nWie man sieht, ist die Streuung sehr gering: Alle Ergebnisse streuen sehr eng um 1/2 (50%). Von 3 Prozentpunkten Abweichung ist nichts zu sehen.\n\nVielleicht ist es nützlich, wenn man diesen Vektor (`viele_versuche`) visualisiert, z.B. mit einem Histogramm aus `ggpubr`.\n\n\n\nDie Daten benötigen wir dazu als Dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tibble(viele_versuche)\n\nglimpse(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 100\nColumns: 1\n$ viele_versuche <dbl> 0.5002185, 0.5001561, 0.5004016, 0.4997148, 0.4999867, …\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngghistogram(d, x = \"viele_versuche\",\n            add = \"mean\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nHier noch ein Dichtediagramm, da sieht man die Verteilungsform besser:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdensity(d, x = \"viele_versuche\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nUnter der Annahme einer Normalverteilung (was man als hinreichend gegeben betrachten kann), liegen ca. 95% der Werte zwischen MW ± 2 sd, bzw. ca. 99% nicht weiter als 3 sd vom MW entfernt.\n\n\n\nFazit: Unsere Simulation zeigt, dass die Wahrscheinlichkeit für einen Stichprobenanteil von 53% sehr klein ist, kleiner als 1 von 100 in unserer Simulation (1%) und vermutlich noch deutlich kleiner als 1%.\n\nWir können daraus schließen, dass die Zufallszuteilung (Randomisierung) nicht richtig funktioniert hat. Hätte sie funktioniert, wäre eine Aufteilung von 53% zu 47% kaum zu erwarten gewesen.\n\n\nAnders gesagt verwerfen wir die (Null-)Hypothese einer zufälligen Zuteilung zu den Gruppen.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}