{
  "hash": "9cfbc6869d1397bebbcb641bf725b3ec",
  "result": {
    "engine": "knitr",
    "markdown": "---\nextype: string\nexsolution: NA\nexname: purrr-map01\nexpoints: 1\ncategories:\n- R\n- map\n- tidyverse\ndate: '2022-10-24'\nslug: purrr-map01\ntitle: purrr-map01\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n# Exercise\n\n\nErstellen Sie einen Tibble mit folgenden Spalten:\n\n1. Buchstaben A-Z, so dass in der 1. Zeile \"A\" steht, in der 2. Zeile \"B\" etc.\n2. Buchstaben a-z,  so dass in der 1. Zeile \"a\" steht, in der 2. Zeile \"b\" etc.\n3. Buchstabenkombination der ersten beiden Spalten, so dass in der 1. Zeile \"A-a\" steht, in der 2. Zeile \"B-b\" etc.\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Solution\n\nGeht es vielleicht so?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <-\n  tibble(\n    letter1 = LETTERS,\n    letter2 = letters,\n    letters = paste(letter1, letter2, collapse = \"-\")\n  )\n\nhead(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  letter1 letter2 letters                                                       \n  <chr>   <chr>   <chr>                                                         \n1 A       a       A a-B b-C c-D d-E e-F f-G g-H h-I i-J j-K k-L l-M m-N n-O o-P…\n2 B       b       A a-B b-C c-D d-E e-F f-G g-H h-I i-J j-K k-L l-M m-N n-O o-P…\n3 C       c       A a-B b-C c-D d-E e-F f-G g-H h-I i-J j-K k-L l-M m-N n-O o-P…\n4 D       d       A a-B b-C c-D d-E e-F f-G g-H h-I i-J j-K k-L l-M m-N n-O o-P…\n5 E       e       A a-B b-C c-D d-E e-F f-G g-H h-I i-J j-K k-L l-M m-N n-O o-P…\n6 F       f       A a-B b-C c-D d-E e-F f-G g-H h-I i-J j-K k-L l-M m-N n-O o-P…\n```\n\n\n:::\n:::\n\n\nNein, leider nicht.\n\n\nOK, neuer Versuch:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <-\n  tibble(\n    letter1 = LETTERS,\n    letter2 = letters) %>% \n  unite(\"letters\", c(letter1, letter2), remove = FALSE)\n\n\nhead(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  letters letter1 letter2\n  <chr>   <chr>   <chr>  \n1 A_a     A       a      \n2 B_b     B       b      \n3 C_c     C       c      \n4 D_d     D       d      \n5 E_e     E       e      \n6 F_f     F       f      \n```\n\n\n:::\n:::\n\n\n\nProbieren wir es mit `purrr::map()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <-\n  tibble(\n    letter1 = LETTERS,\n    letter2 = letters,\n    letters = map2_chr(letter1, letter2, ~ paste(c(.x, .y), collapse =\"-\"))\n  )\n\nhead(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  letter1 letter2 letters\n  <chr>   <chr>   <chr>  \n1 A       a       A-a    \n2 B       b       B-b    \n3 C       c       C-c    \n4 D       d       D-d    \n5 E       e       E-e    \n6 F       f       F-f    \n```\n\n\n:::\n:::\n\n\nInfos zur Funktion `paste()` findet sich z.B. [hier](https://www.rdocumentation.org/packages/utile.tools/versions/0.2.7/topics/paste).\n\n\n\n\n\n---\n\nCategories: \n\n- R\n- map\n- tidyverse\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}