{
  "hash": "5a3fe5c99bd39184c8491f5b9efb98a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: wfsets_penguins01\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nexpoints: 1\ncategories:\n- R\n- statlearning\n- tidymodels\n- num\n- wfsets\ndate: '2023-05-17'\nslug: wfsets_penguins01\ntitle: wfsets_penguins01\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nBerechnen Sie die Vorhersagegüte (RMSE) für folgende Lernalgorithmen:\n\n- lineares Modell\n- knn (neighbors: tune)\n\nModellgleichung: `body_mass_g ~ bill_length_mm, data = d_train`.\n\nNutzen Sie minimale Vorverarbeitung.\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-1_e0527116a18f7c40c25c1fb8f64a1422'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(penguins, package = \"palmerpenguins\")\n```\n:::\n\n\n## Daten\n\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-2_5ff2e039949bb7997839ccdf7cc05262'}\n\n```{.r .cell-code}\nd <-\n  penguins %>% \n  drop_na()\n```\n:::\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-3_94dc600576e0b275fc6d2b764250652b'}\n\n```{.r .cell-code}\nd_split <- initial_split(d)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\n## Modelle\n\n\nLineares Modell:\n\n\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-4_2345506021efba087ef94c8ccf034282'}\n\n```{.r .cell-code}\nmod_lin <- linear_reg()\n\nmod_knn <- nearest_neighbor(mode = \"regression\",\n                                  neighbors = tune())\n```\n:::\n\n\n\n## Rezepte\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-5_10b66a35be488e10ce015272f293106a'}\n\n```{.r .cell-code}\nrec_basic <- recipe(body_mass_g ~ bill_length_mm, data = d_train) %>% \n         step_normalize(all_predictors())\n\nrec_basic\n```\n:::\n\n\n\n## Resampling\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-6_9e6d10235e8689842f85c6c932035571'}\n\n```{.r .cell-code}\nrsmpls <- vfold_cv(d_train)\n```\n:::\n\n\n\n## Workflow Set\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-7_66f3879835decec5aafda801244b5625'}\n\n```{.r .cell-code}\nwf_set <-\n  workflow_set(\n    preproc = list(rec_simple = rec_basic),\n    models = list(mod_lm = mod_lin,\n                  mod_nn = mod_knn)\n  )\n\nwf_set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id          info             option    result    \n  <chr>             <list>           <list>    <list>    \n1 rec_simple_mod_lm <tibble [1 × 4]> <opts[0]> <list [0]>\n2 rec_simple_mod_nn <tibble [1 × 4]> <opts[0]> <list [0]>\n```\n\n\n:::\n:::\n\n\n\n## Fitten\n\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-8_80db32375dc1427a20c2785406a207ee'}\n\n```{.r .cell-code}\nwf_fit <-\n  wf_set %>% \n  workflow_map(resamples = rsmpls)\n\nwf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id          info             option    result   \n  <chr>             <list>           <list>    <list>   \n1 rec_simple_mod_lm <tibble [1 × 4]> <opts[1]> <rsmp[+]>\n2 rec_simple_mod_nn <tibble [1 × 4]> <opts[1]> <tune[+]>\n```\n\n\n:::\n:::\n\n\n\nCheck:\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-9_d681726d04111d1edec1fd8783a7b31f'}\n\n```{.r .cell-code}\nwf_fit %>% pluck(\"result\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# Resampling results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits           id     .metrics         .notes          \n   <list>           <chr>  <list>           <list>          \n 1 <split [224/25]> Fold01 <tibble [2 × 4]> <tibble [0 × 3]>\n 2 <split [224/25]> Fold02 <tibble [2 × 4]> <tibble [0 × 3]>\n 3 <split [224/25]> Fold03 <tibble [2 × 4]> <tibble [0 × 3]>\n 4 <split [224/25]> Fold04 <tibble [2 × 4]> <tibble [0 × 3]>\n 5 <split [224/25]> Fold05 <tibble [2 × 4]> <tibble [0 × 3]>\n 6 <split [224/25]> Fold06 <tibble [2 × 4]> <tibble [0 × 3]>\n 7 <split [224/25]> Fold07 <tibble [2 × 4]> <tibble [0 × 3]>\n 8 <split [224/25]> Fold08 <tibble [2 × 4]> <tibble [0 × 3]>\n 9 <split [224/25]> Fold09 <tibble [2 × 4]> <tibble [0 × 3]>\n10 <split [225/24]> Fold10 <tibble [2 × 4]> <tibble [0 × 3]>\n\n[[2]]\n# Tuning results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits           id     .metrics          .notes          \n   <list>           <chr>  <list>            <list>          \n 1 <split [224/25]> Fold01 <tibble [16 × 5]> <tibble [0 × 3]>\n 2 <split [224/25]> Fold02 <tibble [16 × 5]> <tibble [0 × 3]>\n 3 <split [224/25]> Fold03 <tibble [16 × 5]> <tibble [0 × 3]>\n 4 <split [224/25]> Fold04 <tibble [16 × 5]> <tibble [0 × 3]>\n 5 <split [224/25]> Fold05 <tibble [16 × 5]> <tibble [0 × 3]>\n 6 <split [224/25]> Fold06 <tibble [16 × 5]> <tibble [0 × 3]>\n 7 <split [224/25]> Fold07 <tibble [16 × 5]> <tibble [0 × 3]>\n 8 <split [224/25]> Fold08 <tibble [16 × 5]> <tibble [0 × 3]>\n 9 <split [224/25]> Fold09 <tibble [16 × 5]> <tibble [0 × 3]>\n10 <split [225/24]> Fold10 <tibble [16 × 5]> <tibble [0 × 3]>\n```\n\n\n:::\n:::\n\n\n\n## Bester Kandidat\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-10_169bef08d9a56d4ee93f5f198ca7107a'}\n\n```{.r .cell-code}\nautoplot(wf_fit)\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-10-1.png){fig-pos='H' width=384}\n:::\n:::\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-11_047b7279f46e35405cb2a6acfe861e41'}\n\n```{.r .cell-code}\nautoplot(wf_fit, select_best = TRUE)\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-11-1.png){fig-pos='H' width=384}\n:::\n:::\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-12_1109e975892b64247ae291c34d915d04'}\n\n```{.r .cell-code}\nrank_results(wf_fit, rank_metric = \"rmse\") %>% \n  filter(.metric == \"rmse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 9\n  wflow_id          .config .metric  mean std_err     n preprocessor model  rank\n  <chr>             <chr>   <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int>\n1 rec_simple_mod_nn Prepro… rmse     642.    31.3    10 recipe       near…     1\n2 rec_simple_mod_nn Prepro… rmse     646.    30.9    10 recipe       near…     2\n3 rec_simple_mod_lm Prepro… rmse     647.    24.0    10 recipe       line…     3\n4 rec_simple_mod_nn Prepro… rmse     648.    32.2    10 recipe       near…     4\n5 rec_simple_mod_nn Prepro… rmse     659.    31.7    10 recipe       near…     5\n6 rec_simple_mod_nn Prepro… rmse     660.    32.2    10 recipe       near…     6\n7 rec_simple_mod_nn Prepro… rmse     687.    36.4    10 recipe       near…     7\n8 rec_simple_mod_nn Prepro… rmse     729.    39.7    10 recipe       near…     8\n9 rec_simple_mod_nn Prepro… rmse     786.    47.6    10 recipe       near…     9\n```\n\n\n:::\n:::\n\n\n\nAm besten war das lineare Modell, aber schauen wir uns auch mal das knn-Modell an, v.a. um zu wissen, wie man den besten Tuningparameter-Wert sieht:\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-13_75aa26dccaf3be4f12388a584049a8ef'}\n\n```{.r .cell-code}\nextract_workflow_set_result(wf_fit, \"rec_simple_mod_nn\") %>% \n  select_best()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  neighbors .config             \n      <int> <chr>               \n1        14 Preprocessor1_Model8\n```\n\n\n:::\n:::\n\n\n\n## Last Fit\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-14_f210d9448046ffd2db8bd33607f2363d'}\n\n```{.r .cell-code}\nbest_wf <-\n  wf_fit %>% \n  extract_workflow(\"rec_simple_mod_lm\")\n```\n:::\n\n\n\nFinalisieren müssen wir diesen Workflow nicht, da er keine Tuningparameter hatte.\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-15_ca53b9c6fb68e78d2c47d737bf0f49b8'}\n\n```{.r .cell-code}\nfit_final <-\n  best_wf %>% \n  last_fit(d_split)\n```\n:::\n\n\n\n## Modellgüte im Test-Set\n\n\n::: {.cell hash='wfsets_penguins01_cache/html/unnamed-chunk-16_5ade55da747131b4b08fb071d73a8312'}\n\n```{.r .cell-code}\ncollect_metrics(fit_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard     658.    Preprocessor1_Model1\n2 rsq     standard       0.342 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n---\n\nCategories: \n\n- R\n- statlearning\n- tidymodels\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}