{
  "hash": "917d2f5a0a3f1295b2ca1536c6c03464",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: lm-mario3\nextype: num\nexsolution: r fmt(loesung)\nexshuffle: no\nexpoints: 1\ncategories:\n- R\n- lm\n- predict\n- num\ndate: '2023-05-17'\nslug: lm-mario3\ntitle: lm-mario3\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\n\nSagen Sie den Verkaufspreis vorher für Spiele mit *1, 2, bzw. 3* Euro Versandkosten (`ship_pr`)!\n\nGeben Sie den Durchschnitt der Vorhersagen als Lösung an!\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmariokart <- read.csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/openintro/mariokart.csv\")\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(easystats)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n# Attaching packages: easystats 0.6.0 (red = needs update)\n✔ bayestestR  0.13.1   ✔ correlation 0.8.4 \n✔ datawizard  0.9.0    ✔ effectsize  0.8.6 \n✔ insight     0.19.6   ✔ modelbased  0.8.6 \n✔ performance 0.10.8   ✔ parameters  0.21.3\n✔ report      0.5.7    ✖ see         0.8.0 \n\nRestart the R-Session and update packages in red with `easystats::easystats_update()`.\n```\n\n\n:::\n:::\n\n\n\n## Regressionsgerade berechnen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_mariokart <- lm(total_pr ~ ship_pr, data = mariokart) # \"lm\" wie *l*lineares *M*odell, also eine Gerade.\nlm_mariokart\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = total_pr ~ ship_pr, data = mariokart)\n\nCoefficients:\n(Intercept)      ship_pr  \n     36.246        4.337  \n```\n\n\n:::\n:::\n\n\n\n## Vorhersagen\n\nVorhersagen funktionieren mit dem Befehl `predict`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneue_spiele <- tibble(ship_pr = c(1,2,3))\nneue_spiele\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n  ship_pr\n    <dbl>\n1       1\n2       2\n3       3\n```\n\n\n:::\n:::\n\n\nAnstelle von  `tibble` können Sie auch `data.frame` verwenden.\nMit `c` erstellt man einen \"Vektor\", also eine \"Liste\" zusammengehöriger Werte. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvorhersagen <- predict(lm_mariokart, neue_spiele)  # predicte mir den Verkaufspreis\n\nvorhersagen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1        2        3 \n40.58276 44.91998 49.25720 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nloesung <- mean(vorhersagen)\nloesung\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 44.91998\n```\n\n\n:::\n:::\n\n\n\nDie *Lösung* lautet: 44.9199833.\n\n\n\n\n\n\n---\n\nCategories: \n\n- R\n- lm\n- predict\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}