{
  "hash": "42c888a5fb5801c43d0756da4f530ce5",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: count-emojis\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- textmining\n- tidymodels\n- count\n- germeval\n- emojis\n- string\ndate: '2023-11-16'\nslug: count-emojis\ntitle: count-emojis\n\n---\n\n\n\n\n\n\n# Aufgabe\n\nZählen sie die Emojis eines Textes. \n\nUntersuchen Sie die Rechenzeit, die die jeweiligen Verfahren benötigen.\n\n\n\nHinweise:\n\n- Orientieren Sie sich im Übrigen an den [allgemeinen Hinweisen des Datenwerks](https://datenwerk.netlify.app/hinweise).\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n# Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(paged.print = FALSE,\n        pillar.print_max = 15, \n        pillar.print_min = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tictoc)  # Zeitmessung\n```\n:::\n\n\n\nTeststring:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_text <-\n  tibble(id = 1:4,\n         text = c(\"Abbau ist jetzt\", \n                  \"Hello 😊🌎🚀\", \n                  \"🔫\", \n                  \"🔫 🔪\"),\n         valence = c(0, 1, -1, -2))\n\ntest_text\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n     id text            valence\n  <int> <chr>             <dbl>\n1     1 Abbau ist jetzt       0\n2     2 Hello 😊🌎🚀          1\n3     3 🔫                   -1\n4     4 🔫 🔪                -2\n```\n\n\n:::\n:::\n\n\n\nDaten importieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(wild_emojis, package = \"pradadata\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwild_emojis$value <- 1\nwild_emojis$word <- wild_emojis$emoji\n```\n:::\n\n\n\n\n# Wörter zählen im Test-Datensatz\n\n\n\n## `stringr::str_count`\n\n\nMan kann den Unicode-Code von Emojis ansprechen, praktische Sache:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemoji_pattern <- \"\\\\p{So}\" \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_text$text |> \n  map_int(str_count, emoji_pattern)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 3 1 2\n```\n\n\n:::\n:::\n\n\n\n\nDie Funktion `map` ist nicht nötig:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_count(test_text$text, \"\\\\p{So}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 3 1 2\n```\n\n\n:::\n:::\n\n\n\nAls neue Spalte in der Tabelle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_text |>\n  mutate(n_emojis = str_count(text, \"\\\\p{So}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n     id text            valence n_emojis\n  <int> <chr>             <dbl>    <int>\n1     1 Abbau ist jetzt       0        0\n2     2 Hello 😊🌎🚀          1        3\n3     3 🔫                   -1        1\n4     4 🔫 🔪                -2        2\n```\n\n\n:::\n:::\n\n\n\n\n\n# Germeval-Datensatz\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(germeval_train, package = \"pradadata\")\n```\n:::\n\n\n\n\n\n\n## `stringr::str_count`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nmethod1 <- germeval_train$text |> \n  map_int(str_count, emoji_pattern)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.393 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\nmethod1 |> str()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n int [1:5009] 0 0 1 0 0 0 0 0 0 1 ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(method1, max = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 4 0 0\n [ reached getOption(\"max.print\") -- omitted 4989 entries ]\n```\n\n\n:::\n:::\n\n\n\nDie Funktion `map` ist nicht nötig:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nmethod3 <- \n  str_count(germeval_train$text, emoji_pattern)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.009 sec elapsed\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmethod3 |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 0 1 0 0 0\n```\n\n\n:::\n:::\n\n\n\n\nDann geht es auch viel schneller.\n\nAls neue Spalte in der Tabelle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nmethod4 <- \ngermeval_train |> \n  mutate(n_words = str_count(text, emoji_pattern))\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.009 sec elapsed\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(method4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t5009 obs. of  5 variables:\n $ id     : int  1 2 3 4 5 6 7 8 9 10 ...\n $ text   : chr  \"@corinnamilborn Liebe Corinna, wir würden dich gerne als Moderatorin für uns gewinnen! Wärst du begeisterbar?\" \"@Martin28a Sie haben ja auch Recht. Unser Tweet war etwas missverständlich. Dass das BVerfG Sachleistungen nich\"| __truncated__ \"@ahrens_theo fröhlicher gruß aus der schönsten stadt der welt theo ⚓️\" \"@dushanwegner Amis hätten alles und jeden gewählt...nur Hillary wollten sie nicht und eine Fortsetzung von Obam\"| __truncated__ ...\n $ c1     : chr  \"OTHER\" \"OTHER\" \"OTHER\" \"OTHER\" ...\n $ c2     : chr  \"OTHER\" \"OTHER\" \"OTHER\" \"OTHER\" ...\n $ n_words: int  0 0 1 0 0 0 0 0 0 1 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n\n\n:::\n\n```{.r .cell-code}\nmethod4 |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id\n1  1\n2  2\n3  3\n4  4\n5  5\n6  6\n                                                                                                                                                                                                                                                                                          text\n1                                                                                                                                                                                @corinnamilborn Liebe Corinna, wir würden dich gerne als Moderatorin für uns gewinnen! Wärst du begeisterbar?\n2                                                                                                                                               @Martin28a Sie haben ja auch Recht. Unser Tweet war etwas missverständlich. Dass das BVerfG Sachleistungen nicht ausschließt, kritisieren wir.\n3                                                                                                                                                                                                                        @ahrens_theo fröhlicher gruß aus der schönsten stadt der welt theo ⚓️\n4                                                                                                                                                 @dushanwegner Amis hätten alles und jeden gewählt...nur Hillary wollten sie nicht und eine Fortsetzung von Obama-Politik erst recht nicht..!\n5                                                                                                                                                     @spdde kein verläßlicher Verhandlungspartner. Nachkarteln nach den Sondierzngsgesprächen - schickt diese Stümper #SPD in die Versenkung.\n6 @Dirki_M Ja, aber wo widersprechen die Zahlen denn denen, die im von uns verlinkten Artikel stehen? In unserem Tweet geht es rein um subs. Geschützte. 2017 ist der gesamte Familiennachzug im Vergleich zu 2016 - die Zahlen, die Hr. Brandner bemüht - übrigens leicht rückläufig gewesen.\n       c1     c2 n_words\n1   OTHER  OTHER       0\n2   OTHER  OTHER       0\n3   OTHER  OTHER       1\n4   OTHER  OTHER       0\n5 OFFENSE INSULT       0\n6   OTHER  OTHER       0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n---\n\nCategories: \n\n- textmining\n- tidymodels\n- count\n- germeval\n- emojis\n- string\n\n",
    "supporting": [
      "count-emojis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}