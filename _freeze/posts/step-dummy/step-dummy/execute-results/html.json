{
  "hash": "6eaae22b40404597ec0187dd82777f20",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: step-dummy\nextype: schoice\nexsolution: 8\nexshuffle: no\ncategories:\n- tidymodels\n- statlearning\n- schoice\ndate: '2023-06-14'\nslug: step-dummy\ntitle: step-dummy\n\n---\n\n\n\n\n\n\n\n\n# Aufgabe\n\nViele Lernalgorithmen können nicht mit nominalen Variablen umgehen;\ndaher muss man sie dummifizieren, um sie einer Verarbeitung zugänglich zu machen.\nIn Tidymodels gibt es dafür `step_dummy()`.\n\nAber bezieht `step_dummy()` nur Variablen vom Typ `factor` ein oder auch Variablen vom Typ `character`? Oder vielleicht weder noch? \n\n\nHinweise:\n\n- Orientieren Sie sich im Übrigen an den [allgemeinen Hinweisen des Datenwerks](https://datenwerk.netlify.app/hinweise).\n\n\nAnswerlist\n----------\n* Nur Variablen vom Typ `factor`\n* Nur Variablen vom Typ `character`\n* Sowohl Variablen vom Typ `factor` als auch vom Typ `character`\n* Weder Variablen vom Typ `factor` noch vom Typ `character`\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n:::\n\n\n\n\n\nDaten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <-\n  data.frame(\n    y = c(1,2,3,4,5),\n    x = c(\"A\", \"B\", \"B\", \"C\", \"A\")\n  )\n\nstr(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t5 obs. of  2 variables:\n $ y: num  1 2 3 4 5\n $ x: chr  \"A\" \"B\" \"B\" \"C\" ...\n```\n\n\n:::\n:::\n\n\n## Rezept 1\n\nRezept 1, mit Variable vom Typ `character`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <-\n  recipe(y ~ x, data = d) %>% \n  step_dummy(x)\n\nd_baked <- rec %>% \n  prep() %>% \n  bake(new_data = NULL)\n\nstr(d_baked)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [5 × 3] (S3: tbl_df/tbl/data.frame)\n $ y  : num [1:5] 1 2 3 4 5\n $ x_B: num [1:5] 0 1 1 0 0\n $ x_C: num [1:5] 0 0 0 1 0\n```\n\n\n:::\n:::\n\n\n\n## Rezept 2\n\n\nRezept 2, mit Variable vom Typ `factor`:\n\n\n\nDaten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 <-\n  data.frame(\n    y = c(1,2,3,4,5),\n    x = factor(c(\"A\", \"B\", \"B\", \"C\", \"A\"))\n  )\n\nstr(d2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t5 obs. of  2 variables:\n $ y: num  1 2 3 4 5\n $ x: Factor w/ 3 levels \"A\",\"B\",\"C\": 1 2 2 3 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrec2 <-\n  recipe(y ~ x, data = d2) %>% \n  step_dummy(x)\n\nd_baked2 <- rec2 %>% \n  prep() %>% \n  bake(new_data = NULL)\n\nstr(d_baked2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [5 × 3] (S3: tbl_df/tbl/data.frame)\n $ y  : num [1:5] 1 2 3 4 5\n $ x_B: num [1:5] 0 1 1 0 0\n $ x_C: num [1:5] 0 0 0 1 0\n```\n\n\n:::\n:::\n\n\n\n\nAnswerlist\n----------\n\n\n* Falsch\n* Falsch\n* Wahr. `step_dummy` transformiert beide Arten von Variablen\n* Falsch\n\n\n\n\n\n---\n\nCategories: \n\n- tidymodels\n- statlearning\n- schoice\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}