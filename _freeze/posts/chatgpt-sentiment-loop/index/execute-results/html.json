{
  "hash": "7cd69d922d21752a6f7d9107918686bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: today\ndraft: FALSE   # ACHTUNG DRAFT STEHT AUF TRUE!\ntitle: chatgpt-sentiment-loop\nexecute: \n  eval: true\n  \nhighlight-style: github\ncache: true\n\nextype: string\nexsolution: \"\"\ncategories:\n- textmining\n- nlp\n- transformer\n- chatgpt\n- sentiment\n---\n\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\n\nFragen Sie ChatGPT via API zum Sentiment der ersten zwei Texte aus dem Germeval-2018-Datensatz (Train).\n\n\nHinweise:\n\n- Beachten Sie die [Standardhinweise des Datenwerks](https://datenwerk.netlify.app/hinweise).\n- Nutzen Sie Python, nicht R.\n- Das Verwenden der OpenAI-API kostet Geld. üí∏ Informieren Sie sich vorab. Um auf die API zugreifen zu k√∂nnen, m√ºssen Sie sich ein Konto angelegt haben und √ºber ein Guthaben verf√ºgen.\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# L√∂sung\n\n\n::: {.callout-attention}\nOpenAI hat eine neue API (Stand: 2023-11-23). Der Code der alten API bricht. üíî $\\square$\n:::\n\n\n\n\nModule importieren:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_0d9b95c0e45d37eaf91c71cb10a269b6'}\n\n```{.python .cell-code}\nfrom openai import OpenAI\nimport pandas as pd\nimport time \n```\n:::\n\n\n\n\nDaten importieren:\n\n\n::: {.cell hash='index_cache/html/import-data_2b0adf4e73947230105c3ea03a030319'}\n\n```{.python .cell-code}\ncsv_file_path_train = 'https://github.com/sebastiansauer/pradadata/raw/master/data-raw/germeval_train.csv'\n\ngermeval_train = pd.read_csv(csv_file_path_train)\n```\n:::\n\n\n\nDie ersten paar Texte herausziehen:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_8cb8ef9e334b5e33fdbb4a6f5dc12151'}\n\n```{.python .cell-code}\nn_tweets = 2\ntweets_first_few = germeval_train[\"text\"].head(n_tweets).tolist()\ntweets_first_few\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['@corinnamilborn Liebe Corinna, wir w√ºrden dich gerne als Moderatorin f√ºr uns gewinnen! W√§rst du begeisterbar?', '@Martin28a Sie haben ja auch Recht. Unser Tweet war etwas missverst√§ndlich. Dass das BVerfG Sachleistungen nicht ausschlie√üt, kritisieren wir.']\n```\n\n\n:::\n:::\n\n\n\nPrompt definieren:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_559180c3f31b9c1bd24588f8fc68924c'}\n\n```{.python .cell-code}\nprompt_stem  = \"Als KI mit Exertise in nat√ºrlicher Sprache und Emotionserkennung ist es Ihre Aufgabe, das Sentiment des folgenden Textes zu erkennen. Bitte antworten Sie nur mit einem Wort, entweder 'positiv', 'neutral' oder 'negativ'. Dieses Wort soll die Insgesamt-Einsch√§tzung des Sentiments des Textes zusammenfassen. Nach dem Doppelpunkt folt der Text, dessen Sentiment Sie einsch√§tzen sollen: \\n\"\n```\n:::\n\n\n\nMit \"List Comprehension\" k√∂nnen wir die Tweets jeweils mit dem Prompt verkn√ºpfen:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_0eed4ab1b04a3a8b8266800bfa2d01c9'}\n\n```{.python .cell-code}\nprompts = [prompt_stem + tweet for tweet in tweets_first_few]\nprompts[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\"Als KI mit Exertise in nat√ºrlicher Sprache und Emotionserkennung ist es Ihre Aufgabe, das Sentiment des folgenden Textes zu erkennen. Bitte antworten Sie nur mit einem Wort, entweder 'positiv', 'neutral' oder 'negativ'. Dieses Wort soll die Insgesamt-Einsch√§tzung des Sentiments des Textes zusammenfassen. Nach dem Doppelpunkt folt der Text, dessen Sentiment Sie einsch√§tzen sollen: \\n@corinnamilborn Liebe Corinna, wir w√ºrden dich gerne als Moderatorin f√ºr uns gewinnen! W√§rst du begeisterbar?\"\n```\n\n\n:::\n:::\n\n\nCheck: Wie viele Elemente hat die Liste `prompts`?\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_d770ecbb5239644c9d959ba50f3e7c98'}\n\n```{.python .cell-code}\nlen(prompts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2\n```\n\n\n:::\n:::\n\n\n\n\nAnmelden bei OpenAI:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_4ce836d4223cf9cfa179e3ebbc258f71'}\n\n```{.python .cell-code}\nclient = OpenAI()\n```\n:::\n\n\n\n::: {.callout-note}\nDieses Anmeldeverfahren setzt voraus, dass in `.Renviron` die Variable `OPENAI_API_KEY` hinterlegt ist. $\\square$\n:::\n\n\n\n\n\n\nAnfrage an die API, in eine Funktion gepackt:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_c0a8e09926d496d26f759b928f864594'}\n\n```{.python .cell-code}\ndef get_completion(prompt, client_instance, model=\"gpt-3.5-turbo\"):\n  messages = [{\"role\": \"user\", \"content\": prompt}]\n  response = client_instance.chat.completions.create(\n    model=model,\n    messages=messages,\n    max_tokens=50,\n    temperature=0,\n  )\n  return response.choices[0].message.content\n```\n:::\n\n\n\nUnd jetzt als Schleife:\n\n\nErgebnisliste anlegen, am Anfang noch leer:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_8f5f0fc682c78a0e8c62cc7cbab4f690'}\n\n```{.python .cell-code}\nresults = []\n```\n:::\n\n::: {.cell hash='index_cache/html/ask-api_d444344b7f3712e1ef893681d0fc334e'}\n\n```{.python .cell-code}\nstart_time = time.time()\n\nfor prompt in prompts:\n  result = get_completion(prompt, client) \n  results.append(result)\n\nend_time = time.time()\nend_time - start_time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1.8866519927978516\n```\n\n\n:::\n:::\n\n\nVoil√†:\n\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_4e041a9158a07c45eee08fc26ff518de'}\n\n```{.python .cell-code}\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['positiv', 'neutral']\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}