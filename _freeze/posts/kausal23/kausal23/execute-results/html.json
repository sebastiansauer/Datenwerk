{
  "hash": "38e2228c8390a4a5c46cf6d6370f59c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: kausal23\nexpoints: 1\nextype: schoice\nexsolution: r mchoice2string(sol_df$is_correct, single = TRUE)\nexshuffle: no\ncategories:\n- dag\n- causal\ndate: '2022-12-19'\nslug: kausal23\ntitle: kausal23\n\n---\n\n\n\n\n\n\n\n\n\n\n# Exercise\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\nGegeben sei der DAG `g` (s. u.). Der DAG verf√ºgt √ºber mehrere Variablen, \ndie als Knoten im Graph dargestellt sind und mit $x_1, x_2, \\ldots x_n$ bezeichnet sind.\n\n\n*Welche minimale Variablenmenge muss kontrolliert werden, um den kausalen Effekt von der UV zur AV zu identifizieren?*\n\n\nUV: x6.\n\nAV: x5.\n\n\n\n*Hinweise*: \n\n- Mengen sind mittels geschweifter Klammern gekennzeichnet, z.B. `{x8, x9}` meint die Menge mit den zwei Elementen `x8` und `x9`.\n- Die leere Menge `{ }` bedeutet, dass keine Variable kontrolliert werden muss, um den kausalen Effekt zu identifizieren.\n- Alle Variablen werden als gemessen vorausgesetzt.\n- Es ist m√∂glich, dass es keine L√∂sung gibt, dass es also keine Adjustierungsmenge gibt, um den kausalen Effekt zu identifizieren. Wenn dies der Fall sein sollte, w√§hlen Sie \"/\".\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](plot-dag-1.png){fig-pos='H' width=672}\n:::\n:::\n\nAnswerlist\n----------\n* /\n* { x4, x5 }\n* { x1, x5 }\n* { x3 }\n* /\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Solution\n\nFolgende minimale Variablenmenge muss kontrolliert werden, um den kausalen Effekt der UV auf die AV zu identifizieren: `/`.\n\nEs wird also nach dem *minimal adjustment set* gefragt.\nZu beachten ist, dass es weitere, aber gr√∂√üere Mengen geben kann, die den kausalen Effekt identifizieren,\naber gefragt ist nach der *minimalen* Menge.\nAu√üerdem ist es m√∂glich, dass es weitere minimale Adjustierungsmengen gibt, \ndie aber nicht in der Auswahlliste vorkommen.\n\n\n*Erl√§uterung*:\n\n\n::: {.cell}\n\n:::\n\n\n\nUV und AV sind  (durch mindestens einen offenen Pfad) verbunden (\"d-connected\").\n\n\nFolgende Unabh√§ngigkeitsbeziehungen (`_||_`) werden durch den DAG definiert:\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nx1 _||_ x6 | x2, x3, x4, x5\nx3 _||_ x4 | x1, x2\n```\n\n\n:::\n:::\n\n\nUV und AV werden durch folgende Pfade verbunden:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n$paths\n [1] \"x6 <- x2 -> x3 -> x5\"             \"x6 <- x2 -> x3 <- x1 -> x4 -> x5\"\n [3] \"x6 <- x2 -> x3 <- x1 -> x5\"       \"x6 <- x2 -> x4 -> x5\"            \n [5] \"x6 <- x2 -> x4 <- x1 -> x3 -> x5\" \"x6 <- x2 -> x4 <- x1 -> x5\"      \n [7] \"x6 <- x2 -> x5\"                   \"x6 <- x2 <- x1 -> x3 -> x5\"      \n [9] \"x6 <- x2 <- x1 -> x4 -> x5\"       \"x6 <- x2 <- x1 -> x5\"            \n[11] \"x6 <- x3 -> x5\"                   \"x6 <- x3 <- x1 -> x2 -> x4 -> x5\"\n[13] \"x6 <- x3 <- x1 -> x2 -> x5\"       \"x6 <- x3 <- x1 -> x4 -> x5\"      \n[15] \"x6 <- x3 <- x1 -> x4 <- x2 -> x5\" \"x6 <- x3 <- x1 -> x5\"            \n[17] \"x6 <- x3 <- x2 -> x4 -> x5\"       \"x6 <- x3 <- x2 -> x4 <- x1 -> x5\"\n[19] \"x6 <- x3 <- x2 -> x5\"             \"x6 <- x3 <- x2 <- x1 -> x4 -> x5\"\n[21] \"x6 <- x3 <- x2 <- x1 -> x5\"       \"x6 <- x4 -> x5\"                  \n[23] \"x6 <- x4 <- x1 -> x2 -> x3 -> x5\" \"x6 <- x4 <- x1 -> x2 -> x5\"      \n[25] \"x6 <- x4 <- x1 -> x3 -> x5\"       \"x6 <- x4 <- x1 -> x3 <- x2 -> x5\"\n[27] \"x6 <- x4 <- x1 -> x5\"             \"x6 <- x4 <- x2 -> x3 -> x5\"      \n[29] \"x6 <- x4 <- x2 -> x3 <- x1 -> x5\" \"x6 <- x4 <- x2 -> x5\"            \n[31] \"x6 <- x4 <- x2 <- x1 -> x3 -> x5\" \"x6 <- x4 <- x2 <- x1 -> x5\"      \n[33] \"x6 <- x5\"                        \n\n$open\n [1]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[25]  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\n\nOffenen Pfade sind der/die Pfad/e, die in der obigen Ausgabe unter `$open` mit `TRUE` gekennzeichnet sind.\n\n\nDer DAG ist wie folgt definiert:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"\\ndag {\\nx1\\nx2\\nx3\\nx4\\nx5\\nx6\\nx1 -> x2\\nx1 -> x3\\nx1 -> x4\\nx1 -> x5\\nx2 -> x3\\nx2 -> x4\\nx2 -> x5\\nx2 -> x6\\nx3 -> x5\\nx3 -> x6\\nx4 -> x5\\nx4 -> x6\\nx5 -> x6\\n}\\n\"\n```\n\n\n:::\n:::\n\nAnswerlist\n----------\n* Richtig\n* Falsch\n* Falsch\n* Falsch\n* Falsch\n\n\n\n\n\n\nDieser DAG ist nicht ganz ein Gespenster-DAG. Es stimmt fast, dass man alle nicht-kausalen Pfade zumachen (blockieren) kann. Aber nicht ganz: Der Pfad von AV zu UV muss offen bleiben. Und dieser Pfad ist *NICHT* kausal in diesem DAG, da er in die falsche Richtung zeigt (von AV zu UV, was die falsche Richtung ist).  Darum ist es ein \"biasing path\", ein \"b√∂ser Pfad\". Aber man kann ihn nicht zumachen, da man keine Pfade mit UV oder AV zumachen kann. Insofern ist dieser DAG ein verlorener Fall. üëª\n\nEs ist also ein bisschen ein Spezialfall. Wie gesagt, der entscheidende Punkt ist, dass der Pfad \"x5 (AV) ->x6 (UV)\" nicht kausal ist.\n\nNat√ºrlich ist das Beispiel extrem; niemand w√ºrde so einen DAG spezifizieren (normalerweise). Es macht keinen Sinn, eine Theorie, die sagt \"Ich glaube, dass meine Ursache eigentliche die Wirkung ist\". ü§™ \n\n\n\n\n\n---\n\nCategories: \n\n- dag\n- causal\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}