{
  "hash": "ec751d45c4e54fe7c143a01d5c861d23",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: targets-multiple-data-files\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- projectmgt\n- targets\n- repro\n- string\ndate: '2023-05-23'\nslug: targets-multiple-data-files\ntitle: targets-multiple-data-files\n\n---\n\n\n\n\n\n# Aufgabe\n\nSchreiben Sie eine `targets` Pipeline, die einen Ordner mit Datendateien beobachtet und sich aktualisiert, wenn neue Daten dazukommt. \nDie Pipeline soll die Datendateien importieren und zu einer Tabelle zusammenfügen und schließlich die Zeilen zählen.\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\nDie folgende Lösung ist stark inspiriert von [diesem SO-Post](https://stackoverflow.com/questions/69652540/how-should-i-use-targets-when-i-have-multiple-data-files).\n\n\nWir scheiben eine `_targets.R` Datei mit folgendem Inhalt.\n\n\nZuerst das Setup:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tarchetypes)  # für tar_files()\n```\n:::\n\n\n\nDann definieren wir Konstanten; hier den Pfad:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- list()\npath$data <- \"data/\"\n```\n:::\n\n\nAus Gründen der Ordnungsfreude haben wir eine Liste erstellt, in der dann alle möglichen Pfade abgelegt werden können.\n\nSchließlich definieren wir die Pipeline. Hier spielt die Musik:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\n  tar_files(data_paths, path$data %>% list.files(full.names = TRUE, pattern = \"csv\")),  # Liste der Daten-Dateien\n  tar_target(data_proc, data_paths %>% read_csv(),  # Einlesen\n             pattern = map(data_paths)),  # Über alle Elemente von data_paths iterieren, also über alle Datendateien\n  tar_target(n_row, nrow(data_proc))  # Zeilen zählen\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]]$data_paths_files\n<tar_stem> \n  name: data_paths_files \n  command:\n    path$data %>% list.files(full.names = TRUE, pattern = \"csv\") \n  format: rds \n  repository: local \n  iteration method: vector \n  error mode: stop \n  memory mode: persistent \n  storage mode: main \n  retrieval mode: main \n  deployment mode: worker \n  priority: 0 \n  resources:\n    list() \n  cue:\n    mode: always\n    command: TRUE\n    depend: TRUE\n    format: TRUE\n    repository: TRUE\n    iteration: TRUE\n    file: TRUE\n    seed: TRUE \n  packages:\n    tarchetypes\n    lubridate\n    forcats\n    stringr\n    dplyr\n    purrr\n    readr\n    tidyr\n    tibble\n    ggplot2\n    tidyverse\n    targets\n    stats\n    graphics\n    grDevices\n    utils\n    datasets\n    colorout\n    methods\n    base \n  library:\n    NULL\n[[1]]$data_paths\n<tar_pattern> \n  name: data_paths \n  command:\n    data_paths_files \n  pattern:\n    map(data_paths_files) \n  format: file \n  repository: local \n  iteration method: vector \n  error mode: stop \n  memory mode: persistent \n  storage mode: main \n  retrieval mode: main \n  deployment mode: main \n  priority: 0 \n  resources:\n    list() \n  cue:\n    mode: thorough\n    command: TRUE\n    depend: TRUE\n    format: TRUE\n    repository: TRUE\n    iteration: TRUE\n    file: TRUE\n    seed: TRUE \n  packages:\n    character(0) \n  library:\n    NULL\n\n[[2]]\n<tar_pattern> \n  name: data_proc \n  command:\n    data_paths %>% read_csv() \n  pattern:\n    map(data_paths) \n  format: rds \n  repository: local \n  iteration method: vector \n  error mode: stop \n  memory mode: persistent \n  storage mode: main \n  retrieval mode: main \n  deployment mode: worker \n  priority: 0 \n  resources:\n    list() \n  cue:\n    mode: thorough\n    command: TRUE\n    depend: TRUE\n    format: TRUE\n    repository: TRUE\n    iteration: TRUE\n    file: TRUE\n    seed: TRUE \n  packages:\n    tarchetypes\n    lubridate\n    forcats\n    stringr\n    dplyr\n    purrr\n    readr\n    tidyr\n    tibble\n    ggplot2\n    tidyverse\n    targets\n    stats\n    graphics\n    grDevices\n    utils\n    datasets\n    colorout\n    methods\n    base \n  library:\n    NULL\n[[3]]\n<tar_stem> \n  name: n_row \n  command:\n    nrow(data_proc) \n  format: rds \n  repository: local \n  iteration method: vector \n  error mode: stop \n  memory mode: persistent \n  storage mode: main \n  retrieval mode: main \n  deployment mode: worker \n  priority: 0 \n  resources:\n    list() \n  cue:\n    mode: thorough\n    command: TRUE\n    depend: TRUE\n    format: TRUE\n    repository: TRUE\n    iteration: TRUE\n    file: TRUE\n    seed: TRUE \n  packages:\n    tarchetypes\n    lubridate\n    forcats\n    stringr\n    dplyr\n    purrr\n    readr\n    tidyr\n    tibble\n    ggplot2\n    tidyverse\n    targets\n    stats\n    graphics\n    grDevices\n    utils\n    datasets\n    colorout\n    methods\n    base \n  library:\n    NULL\n```\n\n\n:::\n:::\n\n\nMit `pattern = map(data_paths)` iterieren wir nicht nur über alle Elemente von `data_path`,\nsondern fügen die Elemente auch zu einer Tabelle zusammen.\n\n\nHier ist die ganze Syntax noch einmal:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# _targets.R file\n\nlibrary(targets)\nlibrary(tidyverse)\nlibrary(tarchetypes)\n\n\npath <- list()\npath$data <- \"data/\"\n\n\nlist(\n  tar_files(data_paths, path$data %>% list.files(full.names = TRUE, pattern = \"csv\")),\n  tar_target(data_proc, data_paths %>% read_csv(),\n             pattern = map(data_paths)),\n  tar_target(n_row, nrow(data_proc))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]]$data_paths_files\n<tar_stem> \n  name: data_paths_files \n  command:\n    path$data %>% list.files(full.names = TRUE, pattern = \"csv\") \n  format: rds \n  repository: local \n  iteration method: vector \n  error mode: stop \n  memory mode: persistent \n  storage mode: main \n  retrieval mode: main \n  deployment mode: worker \n  priority: 0 \n  resources:\n    list() \n  cue:\n    mode: always\n    command: TRUE\n    depend: TRUE\n    format: TRUE\n    repository: TRUE\n    iteration: TRUE\n    file: TRUE\n    seed: TRUE \n  packages:\n    tarchetypes\n    lubridate\n    forcats\n    stringr\n    dplyr\n    purrr\n    readr\n    tidyr\n    tibble\n    ggplot2\n    tidyverse\n    targets\n    stats\n    graphics\n    grDevices\n    utils\n    datasets\n    colorout\n    methods\n    base \n  library:\n    NULL\n[[1]]$data_paths\n<tar_pattern> \n  name: data_paths \n  command:\n    data_paths_files \n  pattern:\n    map(data_paths_files) \n  format: file \n  repository: local \n  iteration method: vector \n  error mode: stop \n  memory mode: persistent \n  storage mode: main \n  retrieval mode: main \n  deployment mode: main \n  priority: 0 \n  resources:\n    list() \n  cue:\n    mode: thorough\n    command: TRUE\n    depend: TRUE\n    format: TRUE\n    repository: TRUE\n    iteration: TRUE\n    file: TRUE\n    seed: TRUE \n  packages:\n    character(0) \n  library:\n    NULL\n\n[[2]]\n<tar_pattern> \n  name: data_proc \n  command:\n    data_paths %>% read_csv() \n  pattern:\n    map(data_paths) \n  format: rds \n  repository: local \n  iteration method: vector \n  error mode: stop \n  memory mode: persistent \n  storage mode: main \n  retrieval mode: main \n  deployment mode: worker \n  priority: 0 \n  resources:\n    list() \n  cue:\n    mode: thorough\n    command: TRUE\n    depend: TRUE\n    format: TRUE\n    repository: TRUE\n    iteration: TRUE\n    file: TRUE\n    seed: TRUE \n  packages:\n    tarchetypes\n    lubridate\n    forcats\n    stringr\n    dplyr\n    purrr\n    readr\n    tidyr\n    tibble\n    ggplot2\n    tidyverse\n    targets\n    stats\n    graphics\n    grDevices\n    utils\n    datasets\n    colorout\n    methods\n    base \n  library:\n    NULL\n[[3]]\n<tar_stem> \n  name: n_row \n  command:\n    nrow(data_proc) \n  format: rds \n  repository: local \n  iteration method: vector \n  error mode: stop \n  memory mode: persistent \n  storage mode: main \n  retrieval mode: main \n  deployment mode: worker \n  priority: 0 \n  resources:\n    list() \n  cue:\n    mode: thorough\n    command: TRUE\n    depend: TRUE\n    format: TRUE\n    repository: TRUE\n    iteration: TRUE\n    file: TRUE\n    seed: TRUE \n  packages:\n    tarchetypes\n    lubridate\n    forcats\n    stringr\n    dplyr\n    purrr\n    readr\n    tidyr\n    tibble\n    ggplot2\n    tidyverse\n    targets\n    stats\n    graphics\n    grDevices\n    utils\n    datasets\n    colorout\n    methods\n    base \n  library:\n    NULL\n```\n\n\n:::\n:::\n\n\n\n\n\n\n---\n\nCategories: \n\n- projectmgt\n- targets\n- repro\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}