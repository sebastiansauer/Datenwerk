{
  "hash": "1efd0ab6e55ee6e11c46de676f7b5fdc",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: kausal28\nexpoints: 1\nextype: schoice\nexsolution: r mchoice2string(sol_df$is_correct, single = TRUE)\nexshuffle: no\ncategories:\n- dag\n- causal\ndate: '2022-12-19'\nslug: kausal28\ntitle: kausal28\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n\n\n\n\n\n\n# Exercise\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dagitty)\nlibrary(ggdag)\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n\n\n\n\nGegeben sei der DAG (Graph) `g` (s. u.). Der DAG verfügt über mehrere Variablen, \ndie als Knoten im Graph dargestellt sind.\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <-\n  dagify(\n    y ~ z + m,\n    m ~ x + z,\n    exposure = \"x\",\n    outcome = \"y\"\n  )\n```\n:::\n\n\n\n\nHier ist die Definition des DAGs:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ndag {\nm\nx [exposure]\ny [outcome]\nz\nm -> y\nx -> m\nz -> m\nz -> y\n}\n```\n\n\n:::\n:::\n\n\n\n\n\nUnd so sieht er aus:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdag(g) + theme_dag_blank()\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-3-1.png){fig-pos='H' width=672}\n:::\n:::\n\n\n\n\n\n*Welche minimale Variablenmenge muss kontrolliert werden, um den kausalen Effekt von der UV zur AV zu identifizieren?*\n\n\nUV: x\n\nAV: y\n\n\n\n*Hinweise*: \n\n- Mengen sind mittels geschweifter Klammern gekennzeichnet, z.B. `{x8, x9}` meint die Menge mit den zwei Elementen `x8` und `x9`.\n- Die leere Menge `{ }` bedeutet, dass keine Variable kontrolliert werden muss, um den kausalen Effekt zu identifizieren.\n- Alle Variablen werden als gemessen vorausgesetzt.\n- Es ist möglich, dass es keine Lösung gibt, dass es also keine Adjustierungsmenge gibt, um den kausalen Effekt zu identifizieren. Wenn dies der Fall sein sollte, wählen Sie \"keine Lösung\".\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\nAnswerlist\n----------\n\n\n* {m}\n* {z}\n* {m, z}\n* { }\n* keine Lösung\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Solution\n\n\nFolgende minimale Variablenmenge muss kontrolliert werden, um den kausalen Effekt der UV auf die AV zu identifizieren: *leere Menge*.\n\n`z` muss nicht kontrolliert werden, da der Pfad `x->my<-z->y` wegen des Colliders bereits geschlossen ist.\nEs bleibt nur ein Pfad über und der ist kausal: `x->m->y`.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](unnamed-chunk-5-1.png){fig-pos='H' width=672}\n:::\n:::\n\n\n\n\n\n*Erläuterung*:\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nUV und AV sind  (durch mindestens einen offenen Pfad) verbunden (\"d-connected\").\n\n\nFolgende Unabhängigkeitsbeziehungen (`_||_`) werden durch den DAG definiert:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nx _||_ y | m, z\nx _||_ z\n```\n\n\n:::\n:::\n\n\n\n\nUV und AV werden durch folgende Pfade verbunden:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n$paths\n[1] \"x -> m -> y\"      \"x -> m <- z -> y\"\n\n$open\n[1]  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\nOffenen Pfade sind der/die Pfad/e, die in der obigen Ausgabe unter `$open` mit `TRUE` gekennzeichnet sind.\n\n\n\n\n\nAnswerlist\n----------\n\n\n* Falsch\n* Falsch\n* Falsch\n* Richtig\n* Falsch\n\n\n\n\n\n\n---\n\nCategories: \n\n- dag\n- causal\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}