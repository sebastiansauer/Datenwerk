{
  "hash": "712399591057ccc29082bfba5f17316b",
  "result": {
    "markdown": "---\nextype: string\nexsolution: NA\nexname: purrr-map04\nexpoints: 1\ncategories:\n- r\n- map\n- tidyverse\ndate: '2022-10-10'\nslug: purrr-map04\ntitle: purrr-map04\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6.9000     ✔ purrr   0.3.4     \n✔ tibble  3.1.8          ✔ dplyr   1.0.10    \n✔ tidyr   1.2.1          ✔ stringr 1.4.1     \n✔ readr   2.1.2          ✔ forcats 0.5.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n\n# Exercise\n\nImportieren Sie das Grundatzprogramm der Partei AfD (in der aktuellsten Version). \nTokenisieren Sie nach Seiten. \nDann verschachteln Sie die Spalte, in denen der Text der Seite steht, zu einer Listenspalte.\nSchließlich zählen Sie die Anzahl der Wörter pro Seite und berichten gängige deskriptive Statistiken dazu.\n\n\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Solution\n\nText aus PDF-Dateien kann man mit dem Paket [`pdftools`](https://docs.ropensci.org/pdftools/) einlesen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pdftools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing poppler version 22.02.0\n```\n:::\n\n```{.r .cell-code}\nd_path <- \"/Users/sebastiansaueruser/Google Drive/Literatur/_Div/Politik/afd-grundsatzprogramm-2022.pdf\"\n\nd <- tibble(text = pdf_text(d_path),\n            page = 1:length(text))\n```\n:::\n\n\n\nZu Seiten tokenisieren brauchen wir nicht; das Datenmaterial ist bereits nach Seiten organisiert.\n\nJetzt \"verschachteln\" (to nest) wir die Spalte mit dem Text:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 <-\n  d %>% \n  nest(data = text)\n\nhead(d2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n   page data            \n  <int> <list>          \n1     1 <tibble [1 × 1]>\n2     2 <tibble [1 × 1]>\n3     3 <tibble [1 × 1]>\n4     4 <tibble [1 × 1]>\n5     5 <tibble [1 × 1]>\n6     6 <tibble [1 × 1]>\n```\n:::\n:::\n\n\n\n\nDann zählen wir die Wörter pro Seite:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3 <-\n  d2 %>% \n  mutate(word_count_per_page = map(data, ~ str_count(.x$text, \"\\\\w+\")))\n\nhead(d3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n   page data             word_count_per_page\n  <int> <list>           <list>             \n1     1 <tibble [1 × 1]> <int [1]>          \n2     2 <tibble [1 × 1]> <int [1]>          \n3     3 <tibble [1 × 1]> <int [1]>          \n4     4 <tibble [1 × 1]> <int [1]>          \n5     5 <tibble [1 × 1]> <int [1]>          \n6     6 <tibble [1 × 1]> <int [1]>          \n```\n:::\n:::\n\nWie sieht eine Zelle aus `data` aus?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3$data[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  text                                                                          \n  <chr>                                                                         \n1 \"PROGRAMM FÜR\\nDEUTSCHLAND.\\nDas Grundsatzprogramm der Alternative für Deutsc…\n```\n:::\n:::\n\n\nWie sieht eine Zelle aus `word_count_per_page` aus?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3$data[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  text                                                                          \n  <chr>                                                                         \n1 \"PROGRAMM FÜR\\nDEUTSCHLAND.\\nDas Grundsatzprogramm der Alternative für Deutsc…\n```\n:::\n:::\n\n\nAh! Darin steckt nur eine einzelne Zahl!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3$data[[1]] %>% str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [1 × 1] (S3: tbl_df/tbl/data.frame)\n $ text: chr \"PROGRAMM FÜR\\nDEUTSCHLAND.\\nDas Grundsatzprogramm der Alternative für Deutschland.\\n\"\n```\n:::\n:::\n\n\n\nDas heißt, wir können vereinfachen, entschacheln:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd4 <-\n  d3 %>% \n  unnest(word_count_per_page)\n\nhead(d4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n   page data             word_count_per_page\n  <int> <list>                         <int>\n1     1 <tibble [1 × 1]>                   9\n2     2 <tibble [1 × 1]>                 410\n3     3 <tibble [1 × 1]>                 516\n4     4 <tibble [1 × 1]>                 297\n5     5 <tibble [1 × 1]>                   1\n6     6 <tibble [1 × 1]>                 414\n```\n:::\n:::\n\n\nVisualisierung:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd4 %>% \n  ggplot(aes(x = word_count_per_page)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](purrr-map04_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(easystats)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n# Attaching packages: easystats 0.5.2 (red = needs update)\n✔ insight     0.18.4    ✖ datawizard  0.6.1  \n✔ bayestestR  0.13.0    ✖ performance 0.9.2  \n✖ parameters  0.18.2    ✖ effectsize  0.7.0.5\n✔ modelbased  0.8.5     ✖ correlation 0.8.2  \n✔ see         0.7.3     ✔ report      0.5.5  \n\nRestart the R-Session and update packages in red with `easystats::easystats_update()`.\n```\n:::\n\n```{.r .cell-code}\ndescribe_distribution(d4$word_count_per_page)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Mean |     SD |    IQR |          Range | Skewness | Kurtosis |  n | n_Missing\n--------------------------------------------------------------------------------\n285.84 | 172.27 | 322.75 | [1.00, 516.00] |    -0.64 |    -1.24 | 96 |         0\n```\n:::\n:::\n\n\n\n\n\n\n---\n\nCategories: \n\n- r\n- map\n- tidyverse\n\n",
    "supporting": [
      "purrr-map04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}