{
  "hash": "3e6aa9e93593d3f2d0d4caecf55f3583",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: 2024-05-09  # HEUTIGES DATUM EINTRAGEN\ndraft: FALSE   # ACHTUNG DRAFT STEHT AUF TRUE!\ntitle: flights-yacsda-eda \nexecute: \n  eval: true \nhighlight-style: arrow \ncache: true\ntoc: true\nnumber-sections: true\nextype: string\nexsolution: \"\"\nexshuffle: no\ncategories:\n- eda  # ENTER CATEGORIES HERE\n- yacsda\n- variability\n- association\n\n\nbibliography: \"../../library-ses.bib\"\n\n\n---\n\n\n# Hintergrund und Ziel\n\n\nDiese Fallstudie zeigt einige mögliche/typische Schritte der explorativen Datenanalyse (EDA) im Hinblick auf die Forschungsfrage \"*Welche Variablen steht in Zusammenhang mit Flugverspätungen?*\".\n\n\n\n\n# Pakete laden\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # data wrangling\nlibrary(fastDummies)  # nur für \"Dummyisierung\"\nlibrary(easystats)  # komfortabel Statistiken ausrechnen\nlibrary(DataExplorer)  # Daten visualisieren\nlibrary(ggpubr)  # Daten visualisieren\n```\n:::\n\n\n\n\n\n\n# Daten laden\n\nDer Datensatz kann z.B. hier bezogen werden:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights <- read.csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/nycflights13/flights.csv\")\n```\n:::\n\n\n\nAlternativ findet man den Datensatz auch im Paket `nycflights13` (das man vorab installiert haben muss).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(flights, package = \"nycflights13\")\n```\n:::\n\nDer Datensatz ist relativ groß:\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 336776     19\n```\n\n\n:::\n:::\n\n\nDas sind 19 Variablen, über 300.000 Zeilen.\n\n\n# Was ist Verspätung?\n\nSchauen wir uns den Datensatz mal näher an, um die Zielvariable \"Verspätung\" zu beleuchten.\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n\n\n:::\n:::\n\n\nEs gibt zwei Spalten, die auf Verspätung hinzielen:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(dep_delay, arr_delay) %>% \n  head()\n```\n\n::: {.cell-output-display}\n\n\n| dep_delay| arr_delay|\n|---------:|---------:|\n|         2|        11|\n|         4|        20|\n|         2|        33|\n|        -1|       -18|\n|        -6|       -25|\n|        -4|        12|\n:::\n:::\n\nMan könnte auch schreiben, alternativ:\n\n- Hey R,\n- Nimm die Tabelle `flights` und dann\n- wähle alle Spalten aus, die den Text \"delay\" enthalten und dann\n- zeige den Anfang (\"Kopf\") der Tabelle\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(contains(\"delay\")) %>% \n  head()\n```\n\n::: {.cell-output-display}\n\n\n| dep_delay| arr_delay|\n|---------:|---------:|\n|         2|        11|\n|         4|        20|\n|         2|        33|\n|        -1|       -18|\n|        -6|       -25|\n|        -4|        12|\n:::\n:::\n\n\nEin Blick in die Hilfe lässt uns mehr lernen, was die Spalten bedeuten: `help(flights)` (wenn das Paket `nycflights13` geladen ist; alternativ kann man z.B. [hier](https://vincentarelbundock.github.io/Rdatasets/doc/nycflights13/flights.html) nachlesen):\n\n````\ndep_delay, arr_delay\n\nDeparture and arrival delays, in minutes. \nNegative times represent early departures/arrivals.\n````\n\n## Wie ähnlich sind Ankunfts- und Abflugsverspätung?\n\nDa der Datensatz so groß ist, ziehen wir eine Stichprobe (mit `sample_n`), dann geht alles schneller. Hier *nicht* wichtig, nur um etwas Zeit beim Plotten zu sparen. In der Praxis würde ich in an dieser Stelle keine Stichprobe ziehen, bzw. mit dem Gesamtdatensatz weiterarbeiten (was wir ja auch im Folgenden tun).\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_sample <- \nflights |> \n  sample_n(size = 1000) \n```\n:::\n\n\n\n### Diagramm mit DataExplorer\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_sample |> \n  select(dep_delay, arr_delay) |> \n  plot_scatterplot(by = \"arr_delay\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n### Diagramm mit ggplot\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_sample |> \n  ggplot() +\n  aes(y = dep_delay, x = arr_delay) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Statistiken\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  drop_na(dep_delay, arr_delay) %>% \n  summarise(sd(dep_delay),\n            sd(arr_delay))\n```\n\n::: {.cell-output-display}\n\n\n| sd(dep_delay)| sd(arr_delay)|\n|-------------:|-------------:|\n|      40.06569|      44.63329|\n:::\n:::\n\nDas sind ca. 10% Differenz in der Skalierung; wir können die Skalierung komplett angleichen, um Abweichungen, die auf unterschiedlichen Mustern beruhen, besser zu sehen. Dazu hilft uns die z-Transformation.\n\nDie beiden Variablen scheinen ziemlich stark korreliert zu sein.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  drop_na(dep_delay, arr_delay) %>% \n  summarise(cor(dep_delay, arr_delay))\n```\n\n::: {.cell-output-display}\n\n\n| cor(dep_delay, arr_delay)|\n|-------------------------:|\n|                 0.9148028|\n:::\n:::\n\nJa, sind sie. Dann ist es vielleicht egal, welche der beiden Variablen wir verwenden. Nehmen wir `dep_delay`.\n\n\n\n### Vertiefung: z-Skalierung\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(contains(\"delay\")) %>% \n  drop_na() %>% \n  mutate(dep_delay = scale(dep_delay),  # z-Transformation\n         arr_delay = scale(arr_delay)) %>%   # z-Transformation\n  ggplot() +\n  aes(x = arr_delay, y = dep_delay) +\n  geom_bin2d() +\n  geom_abline(linetype = \"dashed\",\n              color = \"grey60\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n`bin2d` wurde hier nur aus dem Grund verwendet, da das Plotten von ein paar Hunderttausend Punkte recht lange dauert. `bin2d` hingegen ist sehr schnell.\n\n\n\n# Verteilung der Verspätung\n\n## Visualisierung\n\n:::{.panel-tabset}\n\n### Mit DataExplorer\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(dep_delay) |> \n  plot_density()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### Mit ggplot\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  ggplot() +\n  aes(x = dep_delay) %>% \n  geom_density()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n:::\n\n\nEin sehr langer rechter Rand; die meisten Flüge sind nicht/kaum verspätet; aber einige wenige sind sehr stark verspätet.\n\n\nZentrale deskriptive Statistiken könnte man sich mit `summary` ausgeben lassen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  filter(!is.na(dep_delay)) %>%  # keine fehlenden Werte\n  summarise(depdelay_mean = mean(dep_delay),\n            depdelay_sd = sd(dep_delay),\n            depdelay_md = median(dep_delay),\n            depdelay_iqr = IQR(dep_delay)) \n```\n\n::: {.cell-output-display}\n\n\n| depdelay_mean| depdelay_sd| depdelay_md| depdelay_iqr|\n|-------------:|-----------:|-----------:|------------:|\n|      12.63907|    40.21006|          -2|           16|\n:::\n:::\n\n\n### Vertiefung: Wiederholung mit `across`\n\nOder man benutzt den Befehl `across`, der es erlaubt, eine oder mehrere Funktionen auf eine oder mehrere Spalten wiederholtanzuwenden (Man spricht von einer \"Schleife\"). In diesem Beispiel wenden wir mehrere Funktionen (adressiert mit `.fns`) auf eine Spalte (`dep_delay`), adressiert mit dem Argument `.cols` an. Außerdem kann man die Namen der resultierenden Spalten bestimmen mit dem Argument `.names`. In der geschweiften Klammer steht eine interne Variable, die den Namen der jeweils berechneten Funktion (`{fn}`) an den Namen der neu erstellten Spalte anfügt; in der Ausgabe sieht man das gut.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  summarise(across(\n    .cols = dep_delay,\n    .fns = list(mean = mean, \n                md = median, \n                sd = sd, \n                iqr = IQR), na.rm = TRUE,\n    .names = \"depdelay_{fn}\"\n  ))\n```\n\n::: {.cell-output-display}\n\n\n| depdelay_mean| depdelay_md| depdelay_sd| depdelay_iqr|\n|-------------:|-----------:|-----------:|------------:|\n|      12.63907|          -2|    40.21006|           16|\n:::\n:::\n\n\n## flights2: Extremwerte (der Verspätung) definieren\n\nEs gibt keinen sicheren Weg, mit Extremwerten umzugehen. Häufig macht es Sinn, die Ergebnisse mehrerer Analysen zu vergleichen mit, oder ohne Extremwerten. \n\n\n\n<!-- [Quelle dieses Abschnitts](https://data-se.netlify.app/2021/03/08/eda-zu-flugversp%C3%A4tungen/#flights2-extremwerte-definieren) -->\n\n\n\"Wann ist ein Flug *sehr* verspätet?\n\n\n### Boxplot-Methode\n\nEine Möglichkeit ist die \"Boxplot-Methode\": Entferne alle Flüge, die mehr verspätet sind als als das 1.5-fache der IQR über dem 3. Quartil (75. Perzentil): $q75+1.5iqr$\n\nBerechnen wir zunächst das 75. Perzentil (3. Quartil):\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  summarise(q75 = quantile(dep_delay, \n                           prob = .75, \n                           na.rm = TRUE))\n```\n\n::: {.cell-output-display}\n\n\n| q75|\n|---:|\n|  11|\n:::\n:::\n\nDas sind also etwa 11 Minuten, die die Grenzlinie zwischen den 75% weniger bzw. den 25% stärker verspäteten Flügen markieren.\n\n\n\nDann berechnen wir den IQR:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  summarise(depdelay_iqr = IQR(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output-display}\n\n\n| depdelay_iqr|\n|------------:|\n|           16|\n:::\n:::\n\n\nDer Grenzwert liegt dem zufolge bei:\n\n::: {.cell}\n\n```{.r .cell-code}\ngrenzwert <- 11 + 1.5*16\n```\n:::\n\n\n\nDas ist kein \"gottgegebener\" Wert, sondern *ein* pragmatischer Versuch, einen Grenzwert zu finden. \nDie Nützlichkeit dieses Grenzwerts müsste sich noch erweisen.\nViele andere Grenzwerte lassen sich verteidigen.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 <-\n  flights %>% \n  mutate(is_extreme = case_when(\n    dep_delay > 11 + 1.5 * 16 ~ TRUE, # Verspätung > 35 Min.\n    dep_delay <= 35 ~ FALSE  # in den anderen Fällen (<= 35 Min.), dann kein Extremwert\n  ))\n```\n:::\n\n\n\n\n## Fehlende Werte berechnen\n\nWie viele fehlende Werte gibt es eigentlich in `dep_delay`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  describe_distribution(dep_delay)\n```\n\n::: {.cell-output-display}\n\n\n|Variable  |     Mean|       SD| IQR| Min|  Max| Skewness| Kurtosis|      n| n_Missing|\n|:---------|--------:|--------:|---:|---:|----:|--------:|--------:|------:|---------:|\n|dep_delay | 12.63907| 40.21006|  16| -43| 1301| 4.802541| 43.95012| 328521|      8255|\n:::\n:::\n\n\nAlternativ, und weniger komfortabel könnte man sagen\n\n- Hey R,\n- nimm die Tabelle `flights` und dann\n- fasse die Spalte `dep_delay` zu einer Zahl zusammen und zwar\n- anhand der *Summe* (`sum`) der fehlenden Werten (`is.na`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  summarise(sum(is.na(dep_delay)))  # fehlende Werte zählen\n```\n\n::: {.cell-output-display}\n\n\n| sum(is.na(dep_delay))|\n|---------------------:|\n|                  8255|\n:::\n:::\n\n\n\n\n\nWie viele Fälle gingen verloren, wenn wir die Fälle mit fehlenden Werten bei `dep_delay` entfernten?\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  drop_na(dep_delay) %>% \n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 328521\n```\n\n\n:::\n:::\n\nUnd wenn wir *alle* fehlenden Werte entfernen würden?\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  drop_na() %>% \n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 327346\n```\n\n\n:::\n:::\n\n\nWir verlieren nicht viele Fälle mehr, wenn wir die fehlenden Werte aller Variablen (Spalten) entfernen. Also machen wir das mal.\n\n\n### Vertiefung: across\n\nSo bekommt man die fehlenden Werte für alle Spalten auf einmal:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  summarise(across(everything(), ~ sum(is.na(.x))))\n```\n\n::: {.cell-output-display}\n\n\n| year| month| day| dep_time| sched_dep_time| dep_delay| arr_time| sched_arr_time| arr_delay| carrier| flight| tailnum| origin| dest| air_time| distance| hour| minute| time_hour|\n|----:|-----:|---:|--------:|--------------:|---------:|--------:|--------------:|---------:|-------:|------:|-------:|------:|----:|--------:|--------:|----:|------:|---------:|\n|    0|     0|   0|     8255|              0|      8255|     8713|              0|      9430|       0|      0|    2512|      0|    0|     9430|        0|    0|      0|         0|\n:::\n:::\n\n\nEhrlicherweise muss man sagen, dass man mit `describe_distribution` auch komfortabel die fehlenden Werte für alle Spalten bekommt.\n\n## flights3\n\nAchtung: dieses Vorgehen hier ist gefährlich. U.U. verliert man sehr viele Zeilen (Beobachtungen).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights3 <-\n  flights2 %>% \n  drop_na() %>% \n  select(-year)\n```\n:::\n\nDie Spalte `year` ist kontant (immer der Wert \"2013\"); daher ist die Spalte nutzlos, sie birgt keine Information. Wir können sie gefahrlos löschen.\n\n\n\n# Deskriptive Statistiken\n\n\n\n## Mit `summarise`\n\n\nDas kann machen mit `summarise`. Einfach, kann aber viel Tipperei bedeuten:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  summarise(mean(dep_delay),\n            sd(dep_delay),\n            mean(arr_delay),\n            sd(arr_delay))  # und so weiter\n```\n\n::: {.cell-output-display}\n\n\n| mean(dep_delay)| sd(dep_delay)| mean(arr_delay)| sd(arr_delay)|\n|---------------:|-------------:|---------------:|-------------:|\n|              NA|            NA|              NA|            NA|\n:::\n:::\n\n\n\n## Mit `describe_distribution` \n\n`describe_distribution` ist sehr praktisch; man bekommt viele Statistiken auf einmal gezeigt; das spart viel Tipperei.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  describe_distribution()\n```\n\n::: {.cell-output-display}\n\n\n|Variable       |        Mean|          SD|  IQR|  Min|  Max|   Skewness|   Kurtosis|      n| n_Missing|\n|:--------------|-----------:|-----------:|----:|----:|----:|----------:|----------:|------:|---------:|\n|year           | 2013.000000|    0.000000|    0| 2013| 2013|        NaN|        NaN| 336776|         0|\n|month          |    6.548510|    3.414457|    6|    1|   12| -0.0133999| -1.1869501| 336776|         0|\n|day            |   15.710787|    8.768607|   15|    1|   31|  0.0077445| -1.1859454| 336776|         0|\n|dep_time       | 1349.109947|  488.281791|  837|    1| 2400| -0.0247435| -1.0883200| 328521|      8255|\n|sched_dep_time | 1344.254840|  467.335756|  823|  106| 2359| -0.0058581| -1.1979031| 336776|         0|\n|dep_delay      |   12.639070|   40.210061|   16|  -43| 1301|  4.8025405| 43.9501160| 328521|      8255|\n|arr_time       | 1502.054999|  533.264132|  836|    1| 2400| -0.4678191| -0.1926344| 328063|      8713|\n|sched_arr_time | 1536.380220|  497.457141|  821|    1| 2359| -0.3531381| -0.3822478| 336776|         0|\n|arr_delay      |    6.895377|   44.633292|   31|  -86| 1272|  3.7168175| 29.2330440| 327346|      9430|\n|flight         | 1971.923620| 1632.471938| 2912|    1| 8500|  0.6616036| -0.8485607| 336776|         0|\n|air_time       |  150.686460|   93.688305|  110|   20|  695|  1.0707052|  0.8630770| 327346|      9430|\n|distance       | 1039.912604|  733.233033|  887|   17| 4983|  1.1286902|  1.1936399| 336776|         0|\n|hour           |   13.180247|    4.661316|    8|    1|   23| -0.0005427| -1.2064161| 336776|         0|\n|minute         |   26.230100|   19.300846|   36|    0|   59|  0.0929309| -1.2350180| 336776|         0|\n:::\n:::\n\n\n<!-- ## Mit `skimr`  -->\n\n<!-- Das Paket `skimr` mit der Funktion `skim` ist sehr ähnlich zu `describe_distribution`. Allerdings gibt `skim` auch eine Beschreibung zu den  -->\n\n\n# Korrelate von Verspätung\n\nSchauen wir, welche Variablen mit `dep_delay`, der Verspätung der Flüge also, korrelieren.\n\n\n## Metrische Prädiktoren\n\n\n### Nur mit `cor` \n\nAm einfachsten geht es so. Der Nachteil ist mehr (viel) Tipperei:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights3 %>% \n  select(where(is.numeric)) %>%  # wähle alle numerischen Spalten\n  summarise(cor_month = cor(dep_delay, month),\n            cor_day = cor(dep_delay, day),\n            cor_dep_time = cor(dep_delay, dep_time))  # etc\n```\n\n::: {.cell-output-display}\n\n\n|  cor_month|   cor_day| cor_dep_time|\n|----------:|---------:|------------:|\n| -0.0200547| 0.0005914|    0.2596127|\n:::\n:::\n\n\n### Mit `easystats`\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(where(is.numeric)) %>% \n  correlation()\n```\n\n::: {.cell-output-display}\n\n\n|Parameter1     |Parameter2     |          r|   CI|     CI_low|    CI_high|             t| df_error|         p|Method              |  n_Obs|\n|:--------------|:--------------|----------:|----:|----------:|----------:|-------------:|--------:|---------:|:-------------------|------:|\n|year           |month          |         NA| 0.95|         NA|         NA|            NA|   336774|        NA|Pearson correlation | 336776|\n|year           |day            |         NA| 0.95|         NA|         NA|            NA|   336774|        NA|Pearson correlation | 336776|\n|year           |dep_time       |         NA| 0.95|         NA|         NA|            NA|   328519|        NA|Pearson correlation | 328521|\n|year           |sched_dep_time |         NA| 0.95|         NA|         NA|            NA|   336774|        NA|Pearson correlation | 336776|\n|year           |dep_delay      |         NA| 0.95|         NA|         NA|            NA|   328519|        NA|Pearson correlation | 328521|\n|year           |arr_time       |         NA| 0.95|         NA|         NA|            NA|   328061|        NA|Pearson correlation | 328063|\n|year           |sched_arr_time |         NA| 0.95|         NA|         NA|            NA|   336774|        NA|Pearson correlation | 336776|\n|year           |arr_delay      |         NA| 0.95|         NA|         NA|            NA|   327344|        NA|Pearson correlation | 327346|\n|year           |flight         |         NA| 0.95|         NA|         NA|            NA|   336774|        NA|Pearson correlation | 336776|\n|year           |air_time       |         NA| 0.95|         NA|         NA|            NA|   327344|        NA|Pearson correlation | 327346|\n|year           |distance       |         NA| 0.95|         NA|         NA|            NA|   336774|        NA|Pearson correlation | 336776|\n|year           |hour           |         NA| 0.95|         NA|         NA|            NA|   336774|        NA|Pearson correlation | 336776|\n|year           |minute         |         NA| 0.95|         NA|         NA|            NA|   336774|        NA|Pearson correlation | 336776|\n|month          |day            |  0.0029423| 0.95| -0.0004350|  0.0063197|     1.7075186|   336774| 1.0000000|Pearson correlation | 336776|\n|month          |dep_time       | -0.0039324| 0.95| -0.0073519| -0.0005129|    -2.2539453|   328519| 0.3388037|Pearson correlation | 328521|\n|month          |sched_dep_time | -0.0045726| 0.95| -0.0079499| -0.0011953|    -2.6536338|   336774| 0.1274143|Pearson correlation | 336776|\n|month          |dep_delay      | -0.0200570| 0.95| -0.0234749| -0.0166386|   -11.4983104|   328519| 0.0000000|Pearson correlation | 328521|\n|month          |arr_time       | -0.0025199| 0.95| -0.0059418|  0.0009020|    -1.4433357|   328061| 1.0000000|Pearson correlation | 328063|\n|month          |sched_arr_time | -0.0041727| 0.95| -0.0075500| -0.0007954|    -2.4215548|   336774| 0.2318219|Pearson correlation | 336776|\n|month          |arr_delay      | -0.0173820| 0.95| -0.0208064| -0.0139572|    -9.9464509|   327344| 0.0000000|Pearson correlation | 327346|\n|month          |flight         | -0.0008341| 0.95| -0.0042114|  0.0025433|    -0.4840347|   336774| 1.0000000|Pearson correlation | 336776|\n|month          |air_time       |  0.0109242| 0.95|  0.0074988|  0.0143493|     6.2505247|   327344| 0.0000000|Pearson correlation | 327346|\n|month          |distance       |  0.0216356| 0.95|  0.0182596|  0.0250112|    12.5585894|   336774| 0.0000000|Pearson correlation | 336776|\n|month          |hour           | -0.0052274| 0.95| -0.0086046| -0.0018501|    -3.0336183|   336774| 0.0410819|Pearson correlation | 336776|\n|month          |minute         |  0.0155277| 0.95|  0.0121509|  0.0189040|     9.0121387|   336774| 0.0000000|Pearson correlation | 336776|\n|day            |dep_time       | -0.0004674| 0.95| -0.0038869|  0.0029522|    -0.2678812|   328519| 1.0000000|Pearson correlation | 328521|\n|day            |sched_dep_time | -0.0000144| 0.95| -0.0033917|  0.0033630|    -0.0083485|   336774| 1.0000000|Pearson correlation | 336776|\n|day            |dep_delay      |  0.0004200| 0.95| -0.0029995|  0.0038395|     0.2407375|   328519| 1.0000000|Pearson correlation | 328521|\n|day            |arr_time       | -0.0055369| 0.95| -0.0089587| -0.0021151|    -3.1714238|   328061| 0.0273074|Pearson correlation | 328063|\n|day            |sched_arr_time | -0.0024028| 0.95| -0.0057801|  0.0009746|    -1.3943765|   336774| 1.0000000|Pearson correlation | 336776|\n|day            |arr_delay      | -0.0003192| 0.95| -0.0037448|  0.0031065|    -0.1826024|   327344| 1.0000000|Pearson correlation | 327346|\n|day            |flight         | -0.0017908| 0.95| -0.0051681|  0.0015866|    -1.0392164|   336774| 1.0000000|Pearson correlation | 336776|\n|day            |air_time       |  0.0022364| 0.95| -0.0011893|  0.0056620|     1.2795263|   327344| 1.0000000|Pearson correlation | 327346|\n|day            |distance       |  0.0030413| 0.95| -0.0003361|  0.0064186|     1.7649426|   336774| 1.0000000|Pearson correlation | 336776|\n|day            |hour           | -0.0000553| 0.95| -0.0034326|  0.0033221|    -0.0320789|   336774| 1.0000000|Pearson correlation | 336776|\n|day            |minute         |  0.0009867| 0.95| -0.0023907|  0.0043640|     0.5725883|   336774| 1.0000000|Pearson correlation | 336776|\n|dep_time       |sched_dep_time |  0.9546169| 0.95|  0.9543125|  0.9549192|  1837.0937739|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_time       |dep_delay      |  0.2602312| 0.95|  0.2570404|  0.2634164|   154.4779649|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_time       |arr_time       |  0.6607789| 0.95|  0.6588467|  0.6627023|   504.2386087|   328061| 0.0000000|Pearson correlation | 328063|\n|dep_time       |sched_arr_time |  0.7846824| 0.95|  0.7833648|  0.7859929|   725.5275036|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_time       |arr_delay      |  0.2323057| 0.95|  0.2290624|  0.2355439|   136.6497146|   327344| 0.0000000|Pearson correlation | 327346|\n|dep_time       |flight         |  0.0419571| 0.95|  0.0385431|  0.0453701|    24.0695668|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_time       |air_time       | -0.0146195| 0.95| -0.0180442| -0.0111944|    -8.3652793|   327344| 0.0000000|Pearson correlation | 327346|\n|dep_time       |distance       | -0.0139982| 0.95| -0.0174169| -0.0105792|    -8.0240834|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_time       |hour           |  0.9533056| 0.95|  0.9529927|  0.9536165|  1809.2355940|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_time       |minute         |  0.0915767| 0.95|  0.0881848|  0.0949665|    52.7101121|   328519| 0.0000000|Pearson correlation | 328521|\n|sched_dep_time |dep_delay      |  0.1988867| 0.95|  0.1956002|  0.2021688|   116.3188193|   328519| 0.0000000|Pearson correlation | 328521|\n|sched_dep_time |arr_time       |  0.6426802| 0.95|  0.6406672|  0.6446843|   480.4710020|   328061| 0.0000000|Pearson correlation | 328063|\n|sched_dep_time |sched_arr_time |  0.7833425| 0.95|  0.7820341|  0.7846440|   731.3355602|   336774| 0.0000000|Pearson correlation | 336776|\n|sched_dep_time |arr_delay      |  0.1738962| 0.95|  0.1705721|  0.1772163|   101.0322717|   327344| 0.0000000|Pearson correlation | 327346|\n|sched_dep_time |flight         |  0.0364947| 0.95|  0.0331214|  0.0398672|    21.1928124|   336774| 0.0000000|Pearson correlation | 336776|\n|sched_dep_time |air_time       | -0.0155321| 0.95| -0.0189568| -0.0121071|    -8.8876246|   327344| 0.0000000|Pearson correlation | 327346|\n|sched_dep_time |distance       | -0.0179950| 0.95| -0.0213710| -0.0146185|   -10.4445684|   336774| 0.0000000|Pearson correlation | 336776|\n|sched_dep_time |hour           |  0.9991483| 0.95|  0.9991425|  0.9991540| 14051.7706130|   336774| 0.0000000|Pearson correlation | 336776|\n|sched_dep_time |minute         |  0.0829598| 0.95|  0.0796047|  0.0863129|    48.3099293|   336774| 0.0000000|Pearson correlation | 336776|\n|dep_delay      |arr_time       |  0.0287288| 0.95|  0.0253094|  0.0321476|    16.4616791|   328061| 0.0000000|Pearson correlation | 328063|\n|dep_delay      |sched_arr_time |  0.1604885| 0.95|  0.1571552|  0.1638181|    93.1945228|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_delay      |arr_delay      |  0.9148028| 0.95|  0.9142422|  0.9153599|  1295.8504088|   327344| 0.0000000|Pearson correlation | 327346|\n|dep_delay      |flight         |  0.0547337| 0.95|  0.0513238|  0.0581424|    31.4185914|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_delay      |air_time       | -0.0224051| 0.95| -0.0258288| -0.0189809|   -12.8220570|   327344| 0.0000000|Pearson correlation | 327346|\n|dep_delay      |distance       | -0.0216708| 0.95| -0.0250885| -0.0182526|   -12.4238721|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_delay      |hour           |  0.1982259| 0.95|  0.1949385|  0.2015089|   115.9165150|   328519| 0.0000000|Pearson correlation | 328521|\n|dep_delay      |minute         |  0.0284409| 0.95|  0.0250238|  0.0318573|    16.3079309|   328519| 0.0000000|Pearson correlation | 328521|\n|arr_time       |sched_arr_time |  0.7889971| 0.95|  0.7877018|  0.7902853|   735.5354750|   328061| 0.0000000|Pearson correlation | 328063|\n|arr_time       |arr_delay      |  0.0244821| 0.95|  0.0210582|  0.0279055|    14.0114093|   327344| 0.0000000|Pearson correlation | 327346|\n|arr_time       |flight         |  0.0250418| 0.95|  0.0216217|  0.0284613|    14.3475801|   328061| 0.0000000|Pearson correlation | 328063|\n|arr_time       |air_time       |  0.0542960| 0.95|  0.0508798|  0.0577110|    31.1108134|   327344| 0.0000000|Pearson correlation | 327346|\n|arr_time       |distance       |  0.0469912| 0.95|  0.0435763|  0.0504051|    26.9447568|   328061| 0.0000000|Pearson correlation | 328063|\n|arr_time       |hour           |  0.6426514| 0.95|  0.6406383|  0.6446556|   480.4342878|   328061| 0.0000000|Pearson correlation | 328063|\n|arr_time       |minute         |  0.0409691| 0.95|  0.0375524|  0.0443848|    23.4854231|   328061| 0.0000000|Pearson correlation | 328063|\n|sched_arr_time |arr_delay      |  0.1332613| 0.95|  0.1298949|  0.1366246|    76.9302376|   327344| 0.0000000|Pearson correlation | 327346|\n|sched_arr_time |flight         |  0.0215937| 0.95|  0.0182176|  0.0249692|    12.5342010|   336774| 0.0000000|Pearson correlation | 336776|\n|sched_arr_time |air_time       |  0.0789183| 0.95|  0.0755131|  0.0823217|    45.2935710|   327344| 0.0000000|Pearson correlation | 327346|\n|sched_arr_time |distance       |  0.0687259| 0.95|  0.0653637|  0.0720865|    39.9777082|   336774| 0.0000000|Pearson correlation | 336776|\n|sched_arr_time |hour           |  0.7832825| 0.95|  0.7819738|  0.7845843|   731.1906842|   336774| 0.0000000|Pearson correlation | 336776|\n|sched_arr_time |minute         |  0.0503212| 0.95|  0.0469518|  0.0536895|    29.2395738|   336774| 0.0000000|Pearson correlation | 336776|\n|arr_delay      |flight         |  0.0728621| 0.95|  0.0694537|  0.0762687|    41.7983960|   327344| 0.0000000|Pearson correlation | 327346|\n|arr_delay      |air_time       | -0.0352971| 0.95| -0.0387181| -0.0318753|   -20.2074620|   327344| 0.0000000|Pearson correlation | 327346|\n|arr_delay      |distance       | -0.0618678| 0.95| -0.0652796| -0.0584545|   -35.4649465|   327344| 0.0000000|Pearson correlation | 327346|\n|arr_delay      |hour           |  0.1734556| 0.95|  0.1701310|  0.1767762|   100.7683213|   327344| 0.0000000|Pearson correlation | 327346|\n|arr_delay      |minute         |  0.0215222| 0.95|  0.0180979|  0.0249460|    12.3165691|   327344| 0.0000000|Pearson correlation | 327346|\n|flight         |air_time       | -0.4728384| 0.95| -0.4754938| -0.4701743|  -307.0191395|   327344| 0.0000000|Pearson correlation | 327346|\n|flight         |distance       | -0.4841654| 0.95| -0.4867468| -0.4815755|  -321.1194483|   336774| 0.0000000|Pearson correlation | 336776|\n|flight         |hour           |  0.0358380| 0.95|  0.0324646|  0.0392106|    20.8109689|   336774| 0.0000000|Pearson correlation | 336776|\n|flight         |minute         |  0.0181366| 0.95|  0.0147602|  0.0215127|    10.5268290|   336774| 0.0000000|Pearson correlation | 336776|\n|air_time       |distance       |  0.9906496| 0.95|  0.9905857|  0.9907132|  4154.4244720|   327344| 0.0000000|Pearson correlation | 327346|\n|air_time       |hour           | -0.0162773| 0.95| -0.0197018| -0.0128523|    -9.3141118|   327344| 0.0000000|Pearson correlation | 327346|\n|air_time       |minute         |  0.0170318| 0.95|  0.0136070|  0.0204563|     9.7459979|   327344| 0.0000000|Pearson correlation | 327346|\n|distance       |hour           | -0.0188605| 0.95| -0.0222364| -0.0154841|   -10.9470924|   336774| 0.0000000|Pearson correlation | 336776|\n|distance       |minute         |  0.0197798| 0.95|  0.0164035|  0.0231556|    11.4809042|   336774| 0.0000000|Pearson correlation | 336776|\n|hour           |minute         |  0.0417676| 0.95|  0.0383957|  0.0451386|    24.2598646|   336774| 0.0000000|Pearson correlation | 336776|\n:::\n:::\n\n\n\n### Vertiefung: Mit `across`\n\nBerechnen wir die Korrelationen jetzt mit dem Befehl `across`. Der Punkt `.` spricht hier jeweils eine Spalte an, die von `across` ausgewählt wurde. Der Effekt ist, dass eine Korrelation von jeder Spalte mit `dep_delay` berechnet wird.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights3 %>% \n  select(where(is.numeric)) %>%  # nur die numerischen Spalten auswählen\n  summarise(across(\n    .cols = everything(),\n    .fns = ~ cor(., dep_delay))) %>% \n  pivot_longer(everything()) %>%  # von breit auf lang\n  arrange(-value)  # absteigend sortieren\n```\n\n::: {.cell-output-display}\n\n\n|name           |      value|\n|:--------------|----------:|\n|dep_delay      |  1.0000000|\n|arr_delay      |  0.9148028|\n|dep_time       |  0.2596127|\n|sched_dep_time |  0.1989235|\n|hour           |  0.1982692|\n|sched_arr_time |  0.1604972|\n|flight         |  0.0539697|\n|arr_time       |  0.0294210|\n|minute         |  0.0282514|\n|day            |  0.0005914|\n|month          | -0.0200547|\n|distance       | -0.0216809|\n|air_time       | -0.0224051|\n:::\n:::\n\n\n\n<!-- ### Mit `correlate`  -->\n\n<!-- Oder so, das ist vielleicht einfacher: -->\n\n\n\n<!-- ```{r} -->\n<!-- flights2 %>%  -->\n<!--   select(where(is.numeric)) %>%  # alle metrischen Variablen, aber sonst keine -->\n<!--   correlate() %>%   # korreliere, was du hast -->\n<!--   focus(dep_delay) %>%  # beschränke (fokussiere) dich auf `dep_delay` -->\n<!--   arrange(-dep_delay) -->\n\n<!-- ``` -->\n\n\n## Nominale Prädiktoren\n\n### Welche nominalen Prädiktoren gibt es?\n\nHey R, wähle alle nicht numerischen Spalten aus und sage mir deren Namen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  select(where(negate(is.numeric))) %>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"carrier\"    \"tailnum\"    \"origin\"     \"dest\"       \"time_hour\" \n[6] \"is_extreme\"\n```\n\n\n:::\n:::\n\nJetzt kann man für jede nominale Variable die Anzahl der unterschiedlichen Ausprägungen abfragen:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  summarise(n_distinct(carrier))\n```\n\n::: {.cell-output-display}\n\n\n| n_distinct(carrier)|\n|-------------------:|\n|                  16|\n:::\n:::\n\n\n<!-- ```{r} -->\n<!-- flights2 %>%  -->\n<!--   select(where(negate(is.numeric))) %>%  -->\n<!--   summarise(across( -->\n<!--     .cols = everything(), -->\n<!--     .fns = list(ndist = n_distinct) -->\n<!--   )) %>%  -->\n<!--   pivot_longer(everything()) -->\n<!-- ``` -->\n\n<!-- Geht auch mit `skim`, s. oben, ist einfacher. -->\n\n### Carrier\n\n`carrier` meint die Fluggesellschaft, die den jeweiligen Flug durchgeführt hat.\nDa stellen sich eine Reihe interessanter Fragen:\n\n- Wie viele verschiedene Fluggesellschaften gibt es? \n- Wie viele Flüge hat jede davon ausgeführt?\n- Welche Fluggesellschaft hat die meisten Flüge ausgeführt?\n- Gibt es große Unterschiede in de Zahl der ausgeführten Flüge.\n- Wer hat eigentlich die flüssige Seife erfunden?\n\nFragen über Fragen...\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2_count <- \nflights2 %>% \n  select(carrier) %>% \n  count(carrier, sort = TRUE) \n\nflights2_count\n```\n\n::: {.cell-output-display}\n\n\n|carrier |     n|\n|:-------|-----:|\n|UA      | 58665|\n|B6      | 54635|\n|EV      | 54173|\n|DL      | 48110|\n|AA      | 32729|\n|MQ      | 26397|\n|US      | 20536|\n|9E      | 18460|\n|WN      | 12275|\n|VX      |  5162|\n|FL      |  3260|\n|AS      |   714|\n|F9      |   685|\n|YV      |   601|\n|HA      |   342|\n|OO      |    32|\n:::\n:::\n\n\nWir brauchen eine Visualisierung dazu; das beantwortet vielleicht einen Teil der obigen Fragen.\n\n\n### Visualisierung von `carrier`\n\n### Mit `DataExplorer`\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2_count |> \n  plot_scatterplot(by = \"n\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n### Mit `ggplot`\n\n::: {.cell}\n\n```{.r .cell-code}\nplot1 <- \n  flights2_count |> \n  ggplot() +\n  aes(y = carrier, x = n) +\n  geom_point(color = \"red\") +\n  geom_line(group = 1)\n\nplot1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\nWir müssen die Werte von `carrier` sortieren anhand der Anzahl der Flüge, sonst ist es zu unübersichtlich.\n\n### Vertiefung: Achsen-Labels anpassen\n\n*Dieser Abschnitt ist zur Vertiefung, er ist  nicht inhaltlich wichtig*\n\nSagen wir, wir möchten die Labels der X-Achse anpassen, und zwar möchten wir die Werte 25.000, 50.000, und 75.0000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot1 +\n  scale_x_continuous(breaks = c(0, 25000, 50000, 75000),\n                     limits = c(0, 100000),\n                     labels = c(\"keine\", \"wenig\", \"mittel\", \"viel\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nHm, schön sieht es noch nicht aus; die `limits` machen nicht unbedingt Sinn. Die `labels` sind auch wenig sinnvoll.\n\nMehr zum Thema \"Achsen aufhübschen\" findet sich z.B. [hier](https://rkabacoff.github.io/datavis/Customizing.html#axes).\n\n\n\n### \"Lumpsensammler-Kategorie\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 <-\n  flights2 %>% \n  mutate(carrier = factor(carrier)) %>%   # nicht `character`, sondern `factor` wollen\n  mutate(carrier_lump = fct_lump(carrier, n = 8)) \n```\n:::\n\n\nHier fassen wir mit `fct_lump` alle Stufen von `carrier` zu *acht* Stufen (daher `n = 8`) zusammen *plus* einer \"*Lump*ensammler-Kategorie\" zusammen.\nDazu muss die Variable aber als `factor` vorliegen, was wir in der Zeile davor erledigt haben.\n\nJetzt haben wir noch nur 9 (8 plus Lumpensammler-Gruppe) Gruppen:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2_lump_count <-\n  flights2 %>% \n  # select(carrier) %>% \n  # mutate(carrier_lump = fct_lump(carrier, n = 8)) |> \n  count(carrier_lump, sort = TRUE)\n\nflights2_lump_count\n```\n\n::: {.cell-output-display}\n\n\n|carrier_lump |     n|\n|:------------|-----:|\n|UA           | 58665|\n|B6           | 54635|\n|EV           | 54173|\n|DL           | 48110|\n|AA           | 32729|\n|MQ           | 26397|\n|Other        | 23071|\n|US           | 20536|\n|9E           | 18460|\n:::\n:::\n\n\n### Visualisierung der Lumpensammler\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2_count <-\n  flights2_count |> \n  mutate(carrier =  fct_reorder(carrier, n)) |> \n  count(carrier, sort = TRUE)\n```\n:::\n\n\n\n\nMit `fct_reorder` haben wir die Werte von `carrier` (UA, B6, AA, ...) sortiert und zwar anhand der Werte von `n`, also anhand der Häufigkeit. Es resultiert eine Rangfolge: `UA > B6 > EV > DL > ...` etc. \n(Nur) Mit einer sortierten Faktorvariable lässt sich  entsprechendes Diagramm gut sortiert darstellen.\n\n\n#### Mit ggplot\n\nLiniendiagramm:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2_lump_count |> \n  ggplot() +\n  aes(y = carrier_lump, x = n) +\n  geom_point(color = \"red\") +\n  geom_line(group = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nAh, schon besser. Aber recht informationsarm, das Diagramm. Informationsreicher als das Liniendiagramm ist ein Boxplot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  filter(!is_extreme) %>% \n  ggplot() +\n  aes(x = carrier_lump, \n      y = dep_delay) %>% \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nEine alternative Darstellung wäre ein [Letter Value Plot](https://rdrr.io/cran/lvplot/man/geom_lv.html).\n\nSchauen wir uns mal die Mediane genauer an:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  filter(!is_extreme) %>% \n  group_by(carrier_lump) %>% \n  summarise(dep_delay = median(dep_delay, na.rm = TRUE)) %>% \n  arrange(dep_delay)\n```\n\n::: {.cell-output-display}\n\n\n|carrier_lump | dep_delay|\n|:------------|---------:|\n|US           |        -5|\n|MQ           |        -4|\n|9E           |        -3|\n|AA           |        -3|\n|DL           |        -3|\n|EV           |        -3|\n|B6           |        -2|\n|UA           |        -1|\n|Other        |         0|\n:::\n:::\n\n\nDie Reihenfolge entspricht der dem obigen Diagramm.\n\n\n\n\n## Korrelation von `carrier` mit Verspätung\n\nHier mit \"Dummysierung\" aller nicht-numerischer Spalten. Ein Beispiel zur Verdeutlichung:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 <- \n  flights2 %>% \n  mutate(\n    originJFK = case_when(\n      origin == \"JFK\" ~ 1,  # \"1\" wenn JFK, \n      origin != \"JFK\" ~ 0   # ansonsten 0\n    ),  \n    originLGA = case_when(\n      origin == \"LGA\" ~ 1,  # \"1\" wenn LGA,\n      TRUE ~ 0,  # in allen anderen Fällen (\"TRUE\") 0\n    )\n  )\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  select(origin, originJFK, originLGA) %>% \n  slice(1:5)\n```\n\n::: {.cell-output-display}\n\n\n|origin | originJFK| originLGA|\n|:------|---------:|---------:|\n|EWR    |         0|         0|\n|LGA    |         0|         1|\n|JFK    |         1|         0|\n|JFK    |         1|         0|\n|LGA    |         0|         1|\n:::\n:::\n\n\nDiese Art der Umwandlung von mehrstufig-nominal in eine binäre Variable (0-1-Variable, oder \"Indikatorvariable\") kann man sich auch z.B. mit der Funktion `dummy_cols()` (aus dem Paket `fastDummies`) bewerkstelligen lassen:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  select(origin, dep_delay) %>% \n  dummy_cols() %>%  # aus dem Paket `fastDummies`\n  head()  # slice(1:6)\n```\n\n::: {.cell-output-display}\n\n\n|origin | dep_delay| origin_EWR| origin_JFK| origin_LGA|\n|:------|---------:|----------:|----------:|----------:|\n|EWR    |         2|          1|          0|          0|\n|LGA    |         4|          0|          0|          1|\n|JFK    |         2|          0|          1|          0|\n|JFK    |        -1|          0|          1|          0|\n|LGA    |        -6|          0|          0|          1|\n|EWR    |        -4|          1|          0|          0|\n:::\n:::\n\nMit den \"dummyisierten\" Spalten können wir jetzt Korrelationen rechnen, denn jetzt haben wir Zahlen. \n*Achtung*: Die Variablen bleiben nominalskaliert, trotz der 0-1-Transformation. \nAuf diese Art Korrelationen zu berechnen ist nur für dummysierte Variablen (\"Indikatorvariablen\") sinnvoll. \nDie Schiefe der Verteilung begrenzt hier übrigens die Stärke der Korrelation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  select(dep_delay, carrier) %>% \n  dummy_cols() %>%   # \"Dummysierung\"\n  select(-carrier) %>% \n  pivot_longer(-dep_delay,\n               names_to = \"carrier\",\n               values_to = \"value\") %>% \n  group_by(carrier) %>% \n  summarise(cor_depdelay_carrier = cor(dep_delay, value,\n                                       use = \"complete.obs\")) %>% \n  arrange(-abs(cor_depdelay_carrier)) %>% \n  filter(abs(cor_depdelay_carrier) > 0.10)\n```\n\n::: {.cell-output-display}\n\n\n|carrier | cor_depdelay_carrier|\n|:-------|--------------------:|\n:::\n:::\n\nKeine Korrelation war (im Betrag) größer als 0.1. Also gab es nur vernachlässigbare Korrelationen und im Output wurde daher nichts angezeigt.\n\n\n\nZur Erinnerung: Es ist nicht unbedingt nötig, die \"Dummyisierung\" durchzuführen, ein einfaches Vergleichen der Mittelwerte (oder Mediane) mit ihrer Streuung führt zu einem ähnlichen Ergebnis.\nDie Regression mit `lm` führt für Sie automatisch die Dummyisierung durch. \n\n### `Hour`\n\n\n#### Mit ggplot\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  filter(!is_extreme) %>% \n  select(dep_delay, hour) %>% \n  mutate(hour = factor(hour)) %>% \n  ggplot() +\n  aes(x = fct_reorder(hour, dep_delay,\n                      na.rm = TRUE), \n      y = dep_delay) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n#### Mit DataExplorer\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  filter(!is_extreme) %>% \n  select(dep_delay, hour) %>% \n  mutate(hour = factor(hour)) %>% \n  plot_boxplot(by = \"hour\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n### `Origin`\n\n#### Mit ggplot\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  filter(!is_extreme) %>% \n  select(origin, dep_delay) %>% \n  ggplot() +\n  aes(x = origin, y = dep_delay) %>% \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n#### Mit DataExplorer\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  filter(!is_extreme) %>% \n  select(origin, dep_delay) %>% \n  plot_boxplot(by = \"origin\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n## Drei Variablen: `Origin`, `hour`, `dep_delay`\n\n\n#### Mit ggplot\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  filter(!is_extreme) %>% \n  select(origin, dep_delay, hour) %>% \n  mutate(hour = factor(hour, levels = 5:23)) %>% \n  ggplot() +\n  aes(x = hour, y = dep_delay) +\n  geom_boxplot() +\n  facet_wrap(~ origin)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n#### Mit ggpubr\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>% \n  filter(!is_extreme) %>% \n  select(origin, dep_delay, hour) %>% \n  mutate(hour = factor(hour, levels = 5:23)) %>% \n  ggboxplot(x = \"hour\", y = \"dep_delay\", facet.by = \"origin\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n## Vertiefung: Alle nominale Variablen\n\nNatürlich könnte man \"händisch\" alle nominalskalierten Variablen explizit benennen, etwa so:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights3 %>% \n  select(carrier, tailnum, origin, dest, time_hour) %>% \n  slice(1:3)\n```\n\n::: {.cell-output-display}\n\n\n|carrier |tailnum |origin |dest |time_hour           |\n|:-------|:-------|:------|:----|:-------------------|\n|UA      |N14228  |EWR    |IAH  |2013-01-01 05:00:00 |\n|UA      |N24211  |LGA    |IAH  |2013-01-01 05:00:00 |\n|AA      |N619AA  |JFK    |MIA  |2013-01-01 05:00:00 |\n:::\n:::\n\nAber es geht auch etwas \"cooler\" mit weniger Tipperei:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights3 %>% \n  select(where(~ !is.numeric(.))) %>%  # wähle alle nicht-numerischen Spalten\n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"carrier\"    \"tailnum\"    \"origin\"     \"dest\"       \"time_hour\" \n[6] \"is_extreme\"\n```\n\n\n:::\n:::\n\n\n### flights4\n\n::: {.cell}\n\n```{.r .cell-code}\nflights4 <-\nflights3 %>% \n  mutate(dest = fct_lump_prop(dest, prop = .025)) \n```\n:::\n\n\nMit `fct_lump_prop` fassen wir alle Stufen zu einer zusammen, die jeweils weniger als 2.5% der Fääle ausmachen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights4 %>% \n  count(dest, sort = T)\n```\n\n::: {.cell-output-display}\n\n\n|dest  |      n|\n|:-----|------:|\n|Other | 172061|\n|ATL   |  16837|\n|ORD   |  16566|\n|LAX   |  16026|\n|BOS   |  15022|\n|MCO   |  13967|\n|CLT   |  13674|\n|SFO   |  13173|\n|FLL   |  11897|\n|MIA   |  11593|\n|DCA   |   9111|\n|DTW   |   9031|\n|DFW   |   8388|\n:::\n:::\n\n### Visualisierung im Grid\n\n::: {.cell}\n\n```{.r .cell-code}\nflights4 %>% \n  filter(!is_extreme) %>% \n  select(dep_delay, dest, origin, carrier) %>% \n  group_by(dest, origin, carrier) %>% \n  summarise(depdelay_md = median(dep_delay, na.rm = T)) %>% \n  ggplot() +\n  aes(x = origin, y = depdelay_md, color = origin) +\n  facet_grid(dest ~ carrier) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\nPuh, das Diagramm ist nicht sehr aussagekräftig. \nVielleicht besser als Tabelle?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights4 %>% \n  filter(!is_extreme) %>% \n  select(dep_delay, dest, origin, carrier) %>% \n  group_by(dest, origin, carrier) %>% \n  summarise(depdelay_md = median(dep_delay, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 128 × 4\n# Groups:   dest, origin [37]\n   dest  origin carrier depdelay_md\n   <fct> <chr>  <chr>         <dbl>\n 1 ATL   EWR    9E               -6\n 2 ATL   EWR    DL               -3\n 3 ATL   EWR    EV               -2\n 4 ATL   EWR    UA               -1\n 5 ATL   JFK    9E               -2\n 6 ATL   JFK    DL               -1\n 7 ATL   LGA    DL               -3\n 8 ATL   LGA    EV               30\n 9 ATL   LGA    FL                0\n10 ATL   LGA    MQ               -4\n# ℹ 118 more rows\n```\n\n\n:::\n:::\n\n\nHm, ist auch nicht gerade nützlich.\n\nDas Beispiel zeigt, dass die Datenvisualisierung bei einer größeren Zahl an Dimensionen und/oder vielen Werten an ihre Grenzen kommen kann.\n\n\n\n## Anzahl von Flüge\n\n\n### Vorbereitung\n\n::: {.cell}\n\n```{.r .cell-code}\nflights4_sum <- \n  flights4 %>% \n  filter(!is_extreme) %>% \n  select(month, origin, dep_delay) %>% \n  drop_na() %>% \n  group_by(month, origin) %>% \n  summarise(delay_md = median(dep_delay),\n            delay_iqr = IQR(dep_delay),\n            delay_n = n()) %>% \n  mutate(month = factor(month),\n         delay_n = as.numeric(delay_n))\n```\n:::\n\n### Visualisierung mit ggplot\n\n::: {.cell}\n\n```{.r .cell-code}\nflights4 %>% \n  filter(!is_extreme) %>% \n  select(month, origin, dep_delay) %>% \n  mutate(month = factor(month)) %>% \n  drop_na() %>% \n  ggplot() +\n  aes(x = month, y = dep_delay, color = origin) +\n  geom_violin() +\n  geom_point(data = flights4_sum, \n             aes(y = delay_md,\n                 x = month)) +\n  facet_wrap( ~ origin)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n### Visualisierung mit ggpubr\n\n::: {.cell}\n\n```{.r .cell-code}\nflights4 %>% \n  filter(!is_extreme) %>% \n  select(month, origin, dep_delay) %>% \n  mutate(month = factor(month)) %>% \n  drop_na() %>% \n  ggviolin(x = \"month\", y = \"dep_delay\", facet.by = \"origin\",\n           color = \"origin\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\n\n\n# Fazit\n\n\nKeine heiße Spur bisher. Allerdings erlaubt explorative Datenanalyse nur die gleichzeitige Betrachtung von zwei bis drei, vielleicht vier Variablen. Sind die Zusammenhänge komplizierter in dem Sinne, dass mehrere Variablen für einen Effekt zusammenwirken, so ist es mit explorativen Methoden schwer zu finden. \n\n\nDer nächste logische Schritt: Wir müssen modellieren. Mit Modellierungsmethoden lassen sich auch hochdimensionale Zusammenhänge finden. \n\n# Achtung\n\nDiese Analyse ist rein explorativ in dem Sinne, dass keine Hypothesen getestet werden. Es ist damit zu rechnen, dass falsch-positive Befunde auftauchen. Alle Ergebnisse sollten anhand neuer Daten validiert werden.\n\n# Reproduzierbarkeit\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       macOS Big Sur ... 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Berlin\n date     2024-05-09\n pandoc   3.1.12.2 @ /usr/local/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n package      * version date (UTC) lib source\n abind          1.4-5   2016-07-21 [1] CRAN (R 4.2.0)\n backports      1.4.1   2021-12-13 [1] CRAN (R 4.2.0)\n bayestestR   * 0.13.2  2024-02-12 [1] CRAN (R 4.2.1)\n broom          1.0.5   2023-06-09 [1] CRAN (R 4.2.0)\n cachem         1.0.8   2023-05-01 [1] CRAN (R 4.2.0)\n callr          3.7.5   2024-02-19 [1] CRAN (R 4.2.1)\n car            3.1-2   2023-03-30 [1] CRAN (R 4.2.0)\n carData        3.0-5   2022-01-06 [1] CRAN (R 4.2.0)\n cli            3.6.2   2023-12-11 [1] CRAN (R 4.2.0)\n coda           0.19-4  2020-09-30 [1] CRAN (R 4.2.0)\n codetools      0.2-19  2023-02-01 [1] CRAN (R 4.2.0)\n colorspace     2.1-0   2023-01-23 [1] CRAN (R 4.2.0)\n correlation  * 0.8.4   2023-04-06 [1] CRAN (R 4.2.1)\n crayon         1.5.2   2022-09-29 [1] CRAN (R 4.2.1)\n data.table     1.14.10 2023-12-08 [1] CRAN (R 4.2.0)\n DataExplorer * 0.8.2   2020-12-15 [1] CRAN (R 4.2.0)\n datawizard   * 0.9.1   2023-12-21 [1] CRAN (R 4.2.0)\n devtools       2.4.5   2022-10-11 [1] CRAN (R 4.2.1)\n digest         0.6.33  2023-07-07 [1] CRAN (R 4.2.0)\n dplyr        * 1.1.4   2023-11-17 [1] CRAN (R 4.2.0)\n easystats    * 0.7.0   2023-11-05 [1] CRAN (R 4.2.1)\n effectsize   * 0.8.6   2023-09-14 [1] CRAN (R 4.2.0)\n ellipsis       0.3.2   2021-04-29 [1] CRAN (R 4.2.0)\n emmeans        1.8.9   2023-10-17 [1] CRAN (R 4.2.0)\n estimability   1.4.1   2022-08-05 [1] CRAN (R 4.2.0)\n evaluate       0.23    2023-11-01 [1] CRAN (R 4.2.0)\n fansi          1.0.6   2023-12-08 [1] CRAN (R 4.2.0)\n farver         2.1.1   2022-07-06 [1] CRAN (R 4.2.0)\n fastDummies  * 1.7.3   2023-07-06 [1] CRAN (R 4.2.0)\n fastmap        1.1.1   2023-02-24 [1] CRAN (R 4.2.0)\n forcats      * 1.0.0   2023-01-29 [1] CRAN (R 4.2.0)\n fs             1.6.3   2023-07-20 [1] CRAN (R 4.2.0)\n generics       0.1.3   2022-07-05 [1] CRAN (R 4.2.0)\n ggplot2      * 3.5.0   2024-02-23 [1] CRAN (R 4.2.1)\n ggpubr       * 0.6.0   2023-02-10 [1] CRAN (R 4.2.0)\n ggsignif       0.6.4   2022-10-13 [1] CRAN (R 4.2.0)\n glue           1.6.2   2022-02-24 [1] CRAN (R 4.2.0)\n gridExtra      2.3     2017-09-09 [1] CRAN (R 4.2.0)\n gtable         0.3.4   2023-08-21 [1] CRAN (R 4.2.0)\n hms            1.1.3   2023-03-21 [1] CRAN (R 4.2.0)\n htmltools      0.5.7   2023-11-03 [1] CRAN (R 4.2.0)\n htmlwidgets    1.6.4   2023-12-06 [1] CRAN (R 4.2.0)\n httpuv         1.6.13  2023-12-06 [1] CRAN (R 4.2.0)\n igraph         2.0.2   2024-02-17 [1] CRAN (R 4.2.1)\n insight      * 0.19.8  2024-01-31 [1] CRAN (R 4.2.1)\n jsonlite       1.8.8   2023-12-04 [1] CRAN (R 4.2.0)\n knitr          1.45    2023-10-30 [1] CRAN (R 4.2.1)\n labeling       0.4.3   2023-08-29 [1] CRAN (R 4.2.0)\n later          1.3.2   2023-12-06 [1] CRAN (R 4.2.0)\n lattice        0.21-8  2023-04-05 [1] CRAN (R 4.2.0)\n lifecycle      1.0.4   2023-11-07 [1] CRAN (R 4.2.1)\n lubridate    * 1.9.3   2023-09-27 [1] CRAN (R 4.2.0)\n magrittr       2.0.3   2022-03-30 [1] CRAN (R 4.2.0)\n MASS           7.3-60  2023-05-04 [1] CRAN (R 4.2.0)\n Matrix         1.5-4.1 2023-05-18 [1] CRAN (R 4.2.0)\n memoise        2.0.1   2021-11-26 [1] CRAN (R 4.2.0)\n mime           0.12    2021-09-28 [1] CRAN (R 4.2.0)\n miniUI         0.1.1.1 2018-05-18 [1] CRAN (R 4.2.0)\n modelbased   * 0.8.7   2024-02-15 [1] CRAN (R 4.2.1)\n multcomp       1.4-25  2023-06-20 [1] CRAN (R 4.2.0)\n munsell        0.5.0   2018-06-12 [1] CRAN (R 4.2.0)\n mvtnorm        1.2-2   2023-06-08 [1] CRAN (R 4.2.0)\n networkD3      0.4     2017-03-18 [1] CRAN (R 4.2.0)\n parameters   * 0.21.5  2024-02-07 [1] CRAN (R 4.2.1)\n performance  * 0.10.9  2024-02-17 [1] CRAN (R 4.2.1)\n pillar         1.9.0   2023-03-22 [1] CRAN (R 4.2.0)\n pkgbuild       1.4.0   2022-11-27 [1] CRAN (R 4.2.0)\n pkgconfig      2.0.3   2019-09-22 [1] CRAN (R 4.2.0)\n pkgload        1.3.2.1 2023-07-08 [1] CRAN (R 4.2.0)\n prettyunits    1.2.0   2023-09-24 [1] CRAN (R 4.2.0)\n printr       * 0.3     2023-03-08 [1] CRAN (R 4.2.0)\n processx       3.8.3   2023-12-10 [1] CRAN (R 4.2.0)\n profvis        0.3.8   2023-05-02 [1] CRAN (R 4.2.0)\n promises       1.2.1   2023-08-10 [1] CRAN (R 4.2.0)\n ps             1.7.5   2023-04-18 [1] CRAN (R 4.2.0)\n purrr        * 1.0.2   2023-08-10 [1] CRAN (R 4.2.0)\n R6             2.5.1   2021-08-19 [1] CRAN (R 4.2.0)\n Rcpp           1.0.11  2023-07-06 [1] CRAN (R 4.2.0)\n readr        * 2.1.5   2024-01-10 [1] CRAN (R 4.2.1)\n remotes        2.4.2.1 2023-07-18 [1] CRAN (R 4.2.0)\n report       * 0.5.8   2023-12-07 [1] CRAN (R 4.2.1)\n rlang          1.1.3   2024-01-10 [1] CRAN (R 4.2.1)\n rmarkdown      2.26    2024-03-05 [1] CRAN (R 4.2.1)\n rstatix        0.7.2   2023-02-01 [1] CRAN (R 4.2.0)\n rstudioapi     0.15.0  2023-07-07 [1] CRAN (R 4.2.0)\n sandwich       3.0-2   2022-06-15 [1] CRAN (R 4.2.0)\n scales         1.3.0   2023-11-28 [1] CRAN (R 4.2.0)\n see          * 0.8.2   2024-02-14 [1] CRAN (R 4.2.1)\n sessioninfo    1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n shiny          1.8.0   2023-11-17 [1] CRAN (R 4.2.1)\n stringi        1.8.3   2023-12-11 [1] CRAN (R 4.2.0)\n stringr      * 1.5.1   2023-11-14 [1] CRAN (R 4.2.1)\n survival       3.5-5   2023-03-12 [1] CRAN (R 4.2.0)\n TH.data        1.1-2   2023-04-17 [1] CRAN (R 4.2.0)\n tibble       * 3.2.1   2023-03-20 [1] CRAN (R 4.2.0)\n tidyr        * 1.3.1   2024-01-24 [1] CRAN (R 4.2.1)\n tidyselect     1.2.0   2022-10-10 [1] CRAN (R 4.2.0)\n tidyverse    * 2.0.0   2023-02-22 [1] CRAN (R 4.2.0)\n timechange     0.2.0   2023-01-11 [1] CRAN (R 4.2.0)\n tzdb           0.4.0   2023-05-12 [1] CRAN (R 4.2.0)\n urlchecker     1.0.1   2021-11-30 [1] CRAN (R 4.2.0)\n usethis        2.2.2   2023-07-06 [1] CRAN (R 4.2.0)\n utf8           1.2.4   2023-10-22 [1] CRAN (R 4.2.0)\n vctrs          0.6.5   2023-12-01 [1] CRAN (R 4.2.0)\n withr          3.0.0   2024-01-16 [1] CRAN (R 4.2.1)\n xfun           0.41    2023-11-01 [1] CRAN (R 4.2.0)\n xtable         1.8-4   2019-04-21 [1] CRAN (R 4.2.0)\n yaml           2.3.8   2023-12-11 [1] CRAN (R 4.2.0)\n zoo            1.8-12  2023-04-13 [1] CRAN (R 4.2.0)\n\n [1] /Users/sebastiansaueruser/Rlibs\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}