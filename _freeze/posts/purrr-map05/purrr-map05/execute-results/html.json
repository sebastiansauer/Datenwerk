{
  "hash": "d660d25124d06fcd770f09630e43b7b3",
  "result": {
    "markdown": "---\nextype: string\nexsolution: NA\nexname: purrr-map05\nexpoints: 1\ncategories:\n- programming\n- loop\ndate: '2022-10-24'\nslug: purrr-map05\ntitle: purrr-map05\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n\n\n# Exercise\n\nErstellen Sie eine Tabelle mit mit folgenden Spalten:\n\n- ID-Spalte: $1,2,..., 10$\n- Eine Spalte, in der jede Zelle eine Tabelle mit einem Vektor $x$, einer standardnormalverteilten Zufallszahlen (n=1000), enthält\n\nBerechnen Sie den Mittelwert von jedem $x$! Diese Ergebnisse sollen als weitere Spalte der Tabelle hinzugefügt werden.\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tibble(\n  id = 1:10) %>% \n  mutate(x = map(id, ~ rnorm(n = 1e3))\n) \n\nstr(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [10 × 2] (S3: tbl_df/tbl/data.frame)\n $ id: int [1:10] 1 2 3 4 5 6 7 8 9 10\n $ x :List of 10\n  ..$ : num [1:1000] 0.454 -0.379 0.838 0.576 -0.452 ...\n  ..$ : num [1:1000] 0.0403 0.0899 -1.9857 -1.6792 -0.3218 ...\n  ..$ : num [1:1000] 0.5553 0.1963 -0.4612 -0.0934 1.2162 ...\n  ..$ : num [1:1000] -0.5209 -0.2741 -0.4908 -0.1389 -0.0498 ...\n  ..$ : num [1:1000] -0.0841 0.5579 1.8881 -0.0544 1.0364 ...\n  ..$ : num [1:1000] -0.85 -1.036 -0.307 0.109 -1.692 ...\n  ..$ : num [1:1000] 0.349 -0.724 2.254 -1.578 -1.254 ...\n  ..$ : num [1:1000] -0.335 -0.351 0.173 0.47 0.954 ...\n  ..$ : num [1:1000] -1.42 0.981 -0.541 -1.375 0.274 ...\n  ..$ : num [1:1000] -0.411 0.388 -1.259 -1.037 1.545 ...\n```\n:::\n:::\n\nSo kann man sich die Mittelwerte ausgeben lassen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd$x %>% \n  map(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] -0.03530719\n\n[[2]]\n[1] -0.010507\n\n[[3]]\n[1] 0.02497519\n\n[[4]]\n[1] 0.04412629\n\n[[5]]\n[1] -0.04437515\n\n[[6]]\n[1] -0.01892384\n\n[[7]]\n[1] 0.006194343\n\n[[8]]\n[1] 0.007741509\n\n[[9]]\n[1] 0.0105266\n\n[[10]]\n[1] 0.0165064\n```\n:::\n:::\n\n\nJetzt fügen wir den letzten Schritt als Spalte hinzu:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 <-\n  d %>% \n  mutate(x_mean = map_dbl(x, ~ mean(.x))) \n\nhead(d2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n     id x              x_mean\n  <int> <list>          <dbl>\n1     1 <dbl [1,000]> -0.0353\n2     2 <dbl [1,000]> -0.0105\n3     3 <dbl [1,000]>  0.0250\n4     4 <dbl [1,000]>  0.0441\n5     5 <dbl [1,000]> -0.0444\n6     6 <dbl [1,000]> -0.0189\n```\n:::\n:::\n\n\n\nHier hätten wir auch schreiben können:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% \n  mutate(x_mean = map(x, mean)) %>% \n  unnest(x_mean) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n     id x              x_mean\n  <int> <list>          <dbl>\n1     1 <dbl [1,000]> -0.0353\n2     2 <dbl [1,000]> -0.0105\n3     3 <dbl [1,000]>  0.0250\n4     4 <dbl [1,000]>  0.0441\n5     5 <dbl [1,000]> -0.0444\n6     6 <dbl [1,000]> -0.0189\n```\n:::\n:::\n\n\n\n\n\n---\n\nCategories: \n\n- programming\n- loop\n\n",
    "supporting": [
      "purrr-map05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}