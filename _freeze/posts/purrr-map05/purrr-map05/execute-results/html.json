{
  "hash": "d660d25124d06fcd770f09630e43b7b3",
  "result": {
    "engine": "knitr",
    "markdown": "---\nextype: string\nexsolution: NA\nexname: purrr-map05\nexpoints: 1\ncategories:\n- programming\n- loop\ndate: '2022-10-24'\nslug: purrr-map05\ntitle: purrr-map05\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n# Exercise\n\nErstellen Sie eine Tabelle mit mit folgenden Spalten:\n\n- ID-Spalte: $1,2,..., 10$\n- Eine Spalte, in der jede Zelle eine Tabelle mit einem Vektor $x$, einer standardnormalverteilten Zufallszahlen (n=1000), enthält\n\nBerechnen Sie den Mittelwert von jedem $x$! Diese Ergebnisse sollen als weitere Spalte der Tabelle hinzugefügt werden.\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tibble(\n  id = 1:10) %>% \n  mutate(x = map(id, ~ rnorm(n = 1e3))\n) \n\nstr(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [10 × 2] (S3: tbl_df/tbl/data.frame)\n $ id: int [1:10] 1 2 3 4 5 6 7 8 9 10\n $ x :List of 10\n  ..$ : num [1:1000] -0.114 0.607 1.288 0.372 -0.438 ...\n  ..$ : num [1:1000] 0.982 -0.376 0.421 -0.59 1.143 ...\n  ..$ : num [1:1000] 0.429 0.417 0.592 -1.735 -1.192 ...\n  ..$ : num [1:1000] 0.514 -0.244 1.358 0.432 1.227 ...\n  ..$ : num [1:1000] 0.47 -0.621 -0.15 -0.959 2.287 ...\n  ..$ : num [1:1000] 0.0743 0.1768 -0.8956 -0.029 1.1695 ...\n  ..$ : num [1:1000] 1.672 -0.976 1.019 -0.327 -0.165 ...\n  ..$ : num [1:1000] -0.0175 2.7151 -0.464 -0.4519 0.4463 ...\n  ..$ : num [1:1000] -0.18 0.729 -0.494 0.127 -0.391 ...\n  ..$ : num [1:1000] -1.058 0.898 1.085 0.142 3.171 ...\n```\n\n\n:::\n:::\n\nSo kann man sich die Mittelwerte ausgeben lassen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd$x %>% \n  map(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.01370096\n\n[[2]]\n[1] 0.005118962\n\n[[3]]\n[1] -0.001769942\n\n[[4]]\n[1] -0.01192552\n\n[[5]]\n[1] 0.01277106\n\n[[6]]\n[1] -0.04090293\n\n[[7]]\n[1] 0.05199444\n\n[[8]]\n[1] 0.01361518\n\n[[9]]\n[1] 0.001292623\n\n[[10]]\n[1] -0.005675222\n```\n\n\n:::\n:::\n\n\nJetzt fügen wir den letzten Schritt als Spalte hinzu:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 <-\n  d %>% \n  mutate(x_mean = map_dbl(x, ~ mean(.x))) \n\nhead(d2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n     id x               x_mean\n  <int> <list>           <dbl>\n1     1 <dbl [1,000]>  0.0137 \n2     2 <dbl [1,000]>  0.00512\n3     3 <dbl [1,000]> -0.00177\n4     4 <dbl [1,000]> -0.0119 \n5     5 <dbl [1,000]>  0.0128 \n6     6 <dbl [1,000]> -0.0409 \n```\n\n\n:::\n:::\n\n\n\nHier hätten wir auch schreiben können:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% \n  mutate(x_mean = map(x, mean)) %>% \n  unnest(x_mean) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n     id x               x_mean\n  <int> <list>           <dbl>\n1     1 <dbl [1,000]>  0.0137 \n2     2 <dbl [1,000]>  0.00512\n3     3 <dbl [1,000]> -0.00177\n4     4 <dbl [1,000]> -0.0119 \n5     5 <dbl [1,000]>  0.0128 \n6     6 <dbl [1,000]> -0.0409 \n```\n\n\n:::\n:::\n\n\n\n\n\n---\n\nCategories: \n\n- programming\n- loop\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}