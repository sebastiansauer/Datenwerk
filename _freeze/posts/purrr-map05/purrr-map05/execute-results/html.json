{
  "hash": "a820a8b55e6ac2741b61387ecd9c3f38",
  "result": {
    "markdown": "---\nextype: string\nexsolution: NA\nexname: purrr-map05\nexpoints: 1\ndate: '2022-10-24'\nslug: purrr-map05\ntitle: purrr-map05\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n\n\n# Exercise\n\nErstellen Sie eine Tabelle mit mit folgenden Spalten:\n\n- ID-Spalte: $1,2,..., 10$\n- Eine Spalte, in der jede Zelle eine Tabelle mit einem Vektor $x$, einer standardnormalverteilten Zufallszahlen (n=1000), enthält\n\nBerechnen Sie den Mittelwert von jedem $x$! Diese Ergebnisse sollen als weitere Spalte der Tabelle hinzugefügt werden.\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tibble(\n  id = 1:10) %>% \n  mutate(x = map(id, ~ rnorm(n = 1e3))\n) \n\nstr(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [10 × 2] (S3: tbl_df/tbl/data.frame)\n $ id: int [1:10] 1 2 3 4 5 6 7 8 9 10\n $ x :List of 10\n  ..$ : num [1:1000] 0.559 -0.588 -0.452 -1.966 1.329 ...\n  ..$ : num [1:1000] -0.54581 0.89293 -0.66738 1.26568 -0.00726 ...\n  ..$ : num [1:1000] -1.527 0.934 -0.289 0.508 1.108 ...\n  ..$ : num [1:1000] 0.0425 0.7778 -0.7187 -1.3656 -2.5356 ...\n  ..$ : num [1:1000] 1.323 -0.453 0.628 1.592 0.187 ...\n  ..$ : num [1:1000] -0.751 -0.482 0.439 1.804 0.971 ...\n  ..$ : num [1:1000] -0.268 0.182 1.62 0.372 -0.261 ...\n  ..$ : num [1:1000] 0.0568 0.8057 0.1397 0.907 0.4752 ...\n  ..$ : num [1:1000] 0.831 -0.743 -0.402 1.098 -0.905 ...\n  ..$ : num [1:1000] 0.987 -0.225 1.544 -1.503 -0.502 ...\n```\n:::\n:::\n\nSo kann man sich die Mittelwerte ausgeben lassen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd$x %>% \n  map(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] -0.03513212\n\n[[2]]\n[1] 0.01395107\n\n[[3]]\n[1] 0.01891006\n\n[[4]]\n[1] -0.02203389\n\n[[5]]\n[1] 0.05744261\n\n[[6]]\n[1] 0.004502295\n\n[[7]]\n[1] -0.00387942\n\n[[8]]\n[1] -0.01771766\n\n[[9]]\n[1] -0.06057087\n\n[[10]]\n[1] 0.01811559\n```\n:::\n:::\n\n\nJetzt fügen wir den letzten Schritt als Spalte hinzu:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 <-\n  d %>% \n  mutate(x_mean = map_dbl(x, ~ mean(.x))) \n\nhead(d2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n     id x               x_mean\n  <int> <list>           <dbl>\n1     1 <dbl [1,000]> -0.0351 \n2     2 <dbl [1,000]>  0.0140 \n3     3 <dbl [1,000]>  0.0189 \n4     4 <dbl [1,000]> -0.0220 \n5     5 <dbl [1,000]>  0.0574 \n6     6 <dbl [1,000]>  0.00450\n```\n:::\n:::\n\n\n\nHier hätten wir auch schreiben können:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% \n  mutate(x_mean = map(x, mean)) %>% \n  unnest(x_mean) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n     id x               x_mean\n  <int> <list>           <dbl>\n1     1 <dbl [1,000]> -0.0351 \n2     2 <dbl [1,000]>  0.0140 \n3     3 <dbl [1,000]>  0.0189 \n4     4 <dbl [1,000]> -0.0220 \n5     5 <dbl [1,000]>  0.0574 \n6     6 <dbl [1,000]>  0.00450\n```\n:::\n:::\n\n\n\n\n\n---\n\nCategories: \n\n~\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}