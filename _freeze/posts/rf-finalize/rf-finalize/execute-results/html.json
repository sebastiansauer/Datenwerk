{
  "hash": "670fa6ce67079f0b670b3cc313a7cf1a",
  "result": {
    "markdown": "---\nexname: rf-finalize\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- tidymodels\n- statlearning\n- template\n- string\ndate: '2023-05-17'\nslug: rf-finalize\ntitle: rf-finalize\n\n---\n\n\n\n\n\n# Aufgabe\n\n<!-- Schreiben Sie eine Vorlage für eine prädiktive Analyse mit Tidymodels! -->\n\nBerechnen Sie ein prädiktives Modell mit dieser Modellgleichung:\n\n`body_mass_g ~ .` (Datensatz: palmerpenguins::penguins).\n\n\nBerichten Sie den RSMSE im Test-Sample!\n\nHinweise:\n- Tunen Sie `mtry`\n- Verwenden Sie Kreuzvalidierung\n- Verwenden Sie Standardwerte, wo nicht anders angegeben.\n- Fixieren Sie Zufallszahlen auf den Startwert 42.\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setup:\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        1.0.4     ✔ recipes      1.0.6\n✔ dials        1.2.0     ✔ rsample      1.1.1\n✔ dplyr        1.1.2     ✔ tibble       3.2.1\n✔ ggplot2      3.4.2     ✔ tidyr        1.3.0\n✔ infer        1.0.4     ✔ tune         1.1.1\n✔ modeldata    1.1.0     ✔ workflows    1.1.3\n✔ parsnip      1.1.0     ✔ workflowsets 1.0.1\n✔ purrr        1.0.1     ✔ yardstick    1.2.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ lubridate 1.9.2     ✔ stringr   1.5.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tictoc)  # Zeitmessung\n\n\n# Data:\nd_path <- \"https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv\"\nd <- read_csv(d_path)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 344 Columns: 9\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): species, island, sex dbl (6): ...1, bill_length_mm, bill_depth_mm,\nflipper_length_mm, body_mass_g...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\n# rm NA in the dependent variable:\nd <- d %>% \n  drop_na(body_mass_g)\n\n\nset.seed(42)\nd_split <- initial_split(d)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n\n\n# model:\nmod_rf <-\n  rand_forest(mode = \"regression\",\n           mtry = tune())\n\n\n# cv:\nset.seed(42)\nrsmpl <- vfold_cv(d_train)\n\n\n# recipe:\nrec_plain <- \n  recipe(body_mass_g ~  ., data = d_train) %>% \n  step_impute_bag(all_predictors())\n\n\n# workflow:\nwf1 <-\n  workflow() %>% \n  add_model(mod_rf) %>% \n  add_recipe(rec_plain)\n\n\n# tuning:\ntic()\nwf1_fit <-\n  wf1 %>% \n  tune_grid(\n    resamples = rsmpl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ni Creating pre-processing data to finalize unknown parameter: mtry\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n19.321 sec elapsed\n```\n:::\n\n```{.r .cell-code}\n# best candidate:\nshow_best(wf1_fit)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n   mtry .metric .estimator  mean     n std_err .config             \n  <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1     2 rmse    standard    282.    10   11.1  Preprocessor1_Model5\n2     3 rmse    standard    282.    10   10.6  Preprocessor1_Model7\n3     8 rmse    standard    282.    10    9.84 Preprocessor1_Model2\n4     5 rmse    standard    283.    10    9.41 Preprocessor1_Model3\n5     4 rmse    standard    283.    10    9.95 Preprocessor1_Model4\n```\n:::\n\n```{.r .cell-code}\n# finalize wf:\nwf1_final <-\n  wf1 %>% \n  finalize_workflow(select_best(wf1_fit))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n```\n:::\n\n```{.r .cell-code}\nwf1_fit_final <-\n  wf1_final %>% \n  last_fit(d_split)\n\n\n# Modellgüte im Test-Set:\ncollect_metrics(wf1_fit_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard     327.    Preprocessor1_Model1\n2 rsq     standard       0.817 Preprocessor1_Model1\n```\n:::\n:::\n\n\n\nAchtung: `step_impute_knn` scheint Probleme zu haben, wenn es Charakter-Variablen gibt.\n\n\n\n\n\n---\n\nCategories: \n\n- tidymodels\n- statlearning\n- template\n- string\n\n",
    "supporting": [
      "rf-finalize_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}