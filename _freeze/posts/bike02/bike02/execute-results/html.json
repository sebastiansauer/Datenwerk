{
  "hash": "3ec8da119c279445b430af0e2fef02d9",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: bike02\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nexpoints: 1\ncategories:\n- statlearning\n- tidymodels\n- num\ndate: '2023-05-17'\nslug: bike02\ntitle: bike02\nexecute:\n  eval: false\n  error: true\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nKann man die Anzahl gerade verliehener Fahrräder eines entsprechenden Anbieters anhand der Temperatur vorhersagen?\n\nIn dieser Übung untersuchen wir diese Frage.\n\nSie können die Daten von der [Webseite der UCI](https://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset#) herunterladen.\n\nWir beziehen uns auf den Datensatz `day`.\n\nBerechnen Sie einen Entscheidungsbaum  mit der Anzahl der aktuell vermieteten Räder als AV und der aktuellen Temperatur als UV!\n\nTunen Sie den Cp-Parameter des Baumes.\n\nGeben Sie den MSE an!\n\n[Hinweise](https://datenwerk.netlify.app/Hinweise.html)\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(tictoc)\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- read.csv(\"/Users/sebastiansaueruser/datasets/Bike-Sharing-Dataset/day.csv\")\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(d)\n```\n:::\n\n\n## Data split\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nd_split <- initial_split(d, strata = cnt)\n\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\n\n## Define recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec1 <- \n  recipe(cnt ~ temp, data = d)\n```\n:::\n\n\n\n\n## Define model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <-\n  decision_tree(cost_complexity = tune(),\n                mode = \"regression\")\n```\n:::\n\n\n\n\n## Define Resamples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsmpl <- vfold_cv(d_train)\n```\n:::\n\n\n\n## Workflow\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf1 <-\n  workflow() %>% \n  add_model(m1) %>% \n  add_recipe(rec1) \n```\n:::\n\n\n\n\n## Fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nfit1 <- tune_grid(\n  object = wf1, \n  resamples = rsmpl)\ntoc()\nfit1\n```\n:::\n\n\n\n## Bester Kandidat\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fit1)\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf1_best <-\n  wf1 %>% \n  finalize_workflow(parameters = select_best(fit1))\n```\n:::\n\n\n\n## Last Fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_testsample <- last_fit(wf1_best, d_split)\n```\n:::\n\n\n\n\n## Model performance (metrics) in test set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_testsample %>% collect_metrics()\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMSE <- fit_testsample %>% collect_metrics() %>% pluck(3, 1)\nMSE\n```\n:::\n\n\n\n\n**Solution**: \n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n---\n\nCategories: \n\n- statlearning\n- tidymodels\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}