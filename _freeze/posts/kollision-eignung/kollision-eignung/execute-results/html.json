{
  "hash": "5bb1c0ca752e4ac634fbee4f4f1f5b08",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: 2023-12-19  # HEUTIGES DATUM EINTRAGEN\ndraft: false   # ACHTUNG DRAFT STEHT AUF TRUE!\ntitle: kollision-eignung  # ACHTUNG: HIER NAMEN DER AUFGABE ANGEBEN\n\nexecute: \n  eval: true \n  \nhighlight-style: arrow \ncache: true\n\n\nextype: string\nexsolution: \"\"\nexshuffle: no\ncategories:\n- causal  # ENTER CATEGORIES HERE\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nSagen wir, über die *Eignung*, `e`, für ein Studium würden nur (die individuellen Ausprägungen) von Intelligenz (`iq`) und Fleiss (`fleiss`) entscheiden, s. den DAG in @fig-coll3-dag.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Kollisionsstruktur im Dag zur Studiumseignung, mit `s` für Studium, `f` für fleiss und `iq` für Intelligenz](fig-coll3-dag-1.png){#fig-coll3-dag fig-pos='H' width=384}\n:::\n:::\n\n\nBei positiver Eignung wird ein Studium aufgenommen (`studium = 1`) ansonsten nicht (`studium = 0)`. \n\n\n[Quelle](https://data-se.netlify.app/2020/04/16/simulation-berkson-s-paradox/)\n\n\n\nEignung (fürs Studium) sei definiert als die Summe von `iq` und `fleiss`, plus etwas Glück, s. @lst-studium.\n\n\n\n::: {.cell}\n\n```{#lst-studium .r .cell-code  lst-cap=\"Eignung ist die Summe von Fleiss und Intelligenz, plus ein Quentchen Glück\"}\nset.seed(42)  # Reproduzierbarkeit\nN <- 1e03  \n\nd_eignung <-\ntibble(\n  iq = rnorm(N),  # normalverteilt mit MW=0, sd=1\n  fleiss = rnorm(N),\n  glueck = rnorm(N, mean = 0, sd = .1),\n  eignung = 1/2 * iq + 1/2 * fleiss + glueck,\n  # nur wer geeignet ist, studiert (in unserem Modell):\n  studium = ifelse(eignung > 0, 1, 0) \n  )\n```\n:::\n\n\nLaut unserem Modell setzt sich Eignung zur Hälfte aus Intelligenz und zur Hälfte aus Fleiss zusammen, plus etwas Glück.\n\n\n*Aufgabe*: Zeigen Sie, dass eine Scheinkorrelation entsteht zwischen `fleiss` und `iq`, wenn man `studium` kontrolliert. Zeigen Sie außerdem, dass die Scheinkorrelation verschwindet, wenn man `studium` nicht kontrolliert.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHinweise:\n\n\n\n- Beachten Sie die [Standardhinweise des Datenwerks](https://datenwerk.netlify.app/hinweise).\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstanarm)\nlibrary(easystats)\n```\n:::\n\n\n## Modell Nur-Studis\n\n\nHier ist das Modell, in dem wir nur Studenten betrachten, also `studium == 1`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_eignung <-\n  stan_glm(iq ~ fleiss, \n           data = d_eignung %>%  filter(studium == 1), \n           refresh = 0)\n\nhdi(m_eignung)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Parameter   |   CI|     CI_low|    CI_high|Effects |Component   |\n|:-----------|----:|----------:|----------:|:-------|:-----------|\n|(Intercept) | 0.95|  0.7004608|  0.8596029|fixed   |conditional |\n|fleiss      | 0.95| -0.5266816| -0.3634545|fixed   |conditional |\n\n</div>\n:::\n\n```{.r .cell-code}\nplot(estimate_relation(m_eignung))\n```\n\n::: {.cell-output-display}\n![](m1-1.png){fig-pos='H' width=384}\n:::\n:::\n\n\nWie man sieht, gibt es einen Zusammenhang zwischen Fleiss und Intelligenz.\n\n\n## Modell Alle-Menschen\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_eignung_gesamtpop <-\n  stan_glm(iq ~ fleiss, \n           data = d_eignung , \n           refresh = 0)\n\nplot(estimate_relation(m_eignung_gesamtpop))\n\nhdi(m_eignung_gesamtpop)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Parameter   |   CI|     CI_low|   CI_high|Effects |Component   |\n|:-----------|----:|----------:|---------:|:-------|:-----------|\n|(Intercept) | 0.95| -0.0878065| 0.0344352|fixed   |conditional |\n|fleiss      | 0.95| -0.0509851| 0.0723826|fixed   |conditional |\n\n</div>\n:::\n\n::: {.cell-output-display}\n![](m2-1.png){fig-pos='H' width=384}\n:::\n:::\n\n\nWie man sieht, löst sich der Zusammenhang zwischen Fleiss und Intelligenz auf, wenn man `studium` *nicht* kontrolliert.\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}