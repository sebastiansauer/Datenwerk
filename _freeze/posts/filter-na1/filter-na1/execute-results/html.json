{
  "hash": "fb37b64f503bfd876ae95a6a48ab3694",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: filter-na1\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- 2023\n- eda\n- na\n- string\ndate: '2023-05-14'\nslug: filter-na1\ntitle: filter-na1\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nFiltern Sie alle Zeilen *ohne* fehlende Werte im Datensatz `penguins`!\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\nWie oft in einer Sprache, gibt es mehrere Wege, eine Sache auszudrücken. So auch in R. Im Folgenden sind mehrere Lösungen vorgeschlagen. Sie müssen *nicht* alle kennen. Es reicht, wenn Sie eine einzige kennen (es sei denn, Sie wollen ein Experte sein oder werden). Betrachten Sie es als eine Frage des Geschmacks: Das Menü ist vor Ihnen ausgebreitet, und Sie greifen zu dem, was Ihnen am meisten zusagt. $\\square$\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nd_path <- \"https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv\"\nd <- read_csv(d_path)\nnrow(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 344\n```\n\n\n:::\n:::\n\n\n\n## Weg 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_nona <-\n  d %>% \n  filter(complete.cases(.))\n\nnrow(d_nona)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 333\n```\n\n\n:::\n:::\n\n\n## Weg 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% \n  filter(if_all(everything(), ~ !is.na(.))) %>% \n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 333\n```\n\n\n:::\n:::\n\n\n\n## Weg 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd |> \n  drop_na() |> \n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 333\n```\n\n\n:::\n:::\n\n\n\n\n---\n\nCategories: \n\n- 2023\n- eda\n- na\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}