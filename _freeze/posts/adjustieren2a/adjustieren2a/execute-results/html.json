{
  "hash": "603cfa3db1cf6b206ac1eaf688aead0d",
  "result": {
    "engine": "knitr",
    "markdown": "---\nextype: string\nexsolution: ~\nexname: adjustieren2a\nexpoints: 1\ncategories:\n- regression\n- '2023'\n- string\ndate: '2023-11-08'\nslug: adjustieren2a\ntitle: adjustieren2a\n\n---\n\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\n\nBetrachten Sie folgendes Modell, das den Zusammenhang des Preises (`price`) \nund dem Gewicht (`carat`) von Diamanten untersucht (Datensatz `diamonds`).\n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-1_73efa773b271ecd14aa277ef23f1c726'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(easystats)\ndiamonds <- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/diamonds.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 53940 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): cut, color, clarity\ndbl (8): rownames, carat, depth, table, price, x, y, z\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\nAber zuerst zentrieren wir den metrischen Prädiktor `carat`, \num den Achsenabschnitt besser interpretieren zu können. \n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-2_fe3fcabfd9fbb6d891c2bea4d0b6639c'}\n\n```{.r .cell-code}\ndiamonds <-\n  diamonds %>% \n  mutate(carat_z = carat - mean(carat, na.rm = TRUE))\n```\n:::\n\n\nDann berechnen wir ein (nicht-bayesianisches, sondern frequentistisches) Regressionsmodell:\n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-3_d4a7aa56d074570bea050800590b7677'}\n\n```{.r .cell-code}\nlm1 <- lm(price ~ carat_z, data = diamonds)\nparameters(lm1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nParameter   | Coefficient |    SE |             95% CI | t(53938) |      p\n--------------------------------------------------------------------------\n(Intercept) |     3932.80 |  6.67 | [3919.73, 3945.87] |   589.83 | < .001\ncarat z     |     7756.43 | 14.07 | [7728.86, 7784.00] |   551.41 | < .001\n```\n\n\n:::\n:::\n\n\n\n\n\nZur Verdeutlichung ein Diagramm zum Modell:\n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-4_8a42f945d045632bc696b3f592820c19'}\n\n```{.r .cell-code}\nestimate_relation(lm1) |> plot()\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-4-1.png){fig-pos='H' width=384}\n:::\n:::\n\n\n*Aufgaben:*\n\na) Was kostet in Diamant mittlerer Größe laut Modell `lm1`? Runden Sie auf eine Dezimale. Geben Sie nur eine Zahl ein.\n\n\nb) Geben Sie eine Regressionsformel an, die `lm1` ergänzt, so dass die Schliffart (`cut`) des Diamanten kontrolliert (adjustiert) wird. Anders gesagt: Das Modell soll die mittleren Preise für jede der fünf Schliffarten angeben. Geben Sie nur die Regressionsformel an. Lassen Sie zwischen Termen jeweils ein Leerzeichen Abstand.\n\n\n\n\n\n*Hinweis*: Es gibt (laut Datensatz) folgende Schliffarten (und zwar in der folgenden Reihenfolge):\n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-5_e15e7627082a856bfe0a1cde5e205911'}\n\n```{.r .cell-code}\ndiamonds %>% \n  distinct(cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  cut      \n  <chr>    \n1 Ideal    \n2 Premium  \n3 Good     \n4 Very Good\n5 Fair     \n```\n\n\n:::\n:::\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-6_53e0812e0313018d8197443feaf9530b'}\n\n:::\n\n\n\na) Unser Modell `lm1` schätzt den Preis eines Diamanten mittlerer Größe auf etwa `3932.5` (was immer auch die Einheiten sind, Dollar vermutlich).\nDa der Prädiktor `carat_z` zentriert ist, entspricht ein Wert von `0` dem Mittelwert der ursprünglichen Verteilung, `carat`. Der Y-Wert, wenn X=0, wird vom Intercept angegeben.\n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-7_3083d1a5d13d5d7ba5b3c79f939ed0a6'}\n\n```{.r .cell-code}\nparameters(lm1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nParameter   | Coefficient |    SE |             95% CI | t(53938) |      p\n--------------------------------------------------------------------------\n(Intercept) |     3932.80 |  6.67 | [3919.73, 3945.87] |   589.83 | < .001\ncarat z     |     7756.43 | 14.07 | [7728.86, 7784.00] |   551.41 | < .001\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nUncertainty intervals (equal-tailed) and p-values (two-tailed) computed\n  using a Wald t-distribution approximation.\n```\n\n\n:::\n:::\n\n\n\nOder so:\n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-8_a1461757d88ecae50fbcb4788a0a22aa'}\n\n```{.r .cell-code}\ncoef(lm1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)     carat_z \n   3932.800    7756.426 \n```\n\n\n:::\n:::\n\n\n\n*Alternativ* können wir uns mit `predict` für jeden beliebigen Wert des Prädiktors die Vorhersage des Modells ausgeben lassen.\n\nWir definieren eine (hier sehr kurze) Tabelle mit Prädiktorwerten, für die wir die Vorhersage laut `lm1` wissen möchten:\n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-9_ae6f4f51b9bf0f741f567303d0a16b3d'}\n\n```{.r .cell-code}\nneue_daten <-\n  tibble(carat_z = 0)\n```\n:::\n\n\n\nDann weisen wir unseren Lieblingsroboter an, auf Basis von `lm1` eine Vorhersage (prediction) für `neue_daten` zu erstellen. \n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-10_2a3de673e8deed540047137d772f5bf0'}\n\n```{.r .cell-code}\npredict(lm1, newdata = neue_daten)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     1 \n3932.8 \n```\n\n\n:::\n:::\n\n\n\n\nb) `price ~ carat_z + cut` \n\nDieses zweite Modell könnten wir so berechnen:\n\n\n::: {.cell hash='adjustieren2a_cache/html/unnamed-chunk-11_79a5011d31d75123861ec4b41a3a4498'}\n\n```{.r .cell-code}\nlm2 <- lm(price ~ carat_z + cut, data = diamonds)\nparameters(lm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nParameter       | Coefficient |    SE |             95% CI | t(53934) |      p\n------------------------------------------------------------------------------\n(Intercept)     |     2405.18 | 37.83 | [2331.04, 2479.32] |    63.58 | < .001\ncarat z         |     7871.08 | 13.98 | [7843.68, 7898.48] |   563.04 | < .001\ncut [Good]      |     1120.33 | 43.50 | [1035.07, 1205.59] |    25.76 | < .001\ncut [Ideal]     |     1800.92 | 39.34 | [1723.81, 1878.04] |    45.77 | < .001\ncut [Premium]   |     1439.08 | 39.87 | [1360.94, 1517.21] |    36.10 | < .001\ncut [Very Good] |     1510.14 | 40.24 | [1431.26, 1589.01] |    37.53 | < .001\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nMan *könnte* hier noch einen Interaktionseffekt ergänzen, wenn man Grund zur Annahme hat,\ndass es einen gibt.\n\n\n\n\n\n---\n\nCategories: \n\n- regression\n- '2023'\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}