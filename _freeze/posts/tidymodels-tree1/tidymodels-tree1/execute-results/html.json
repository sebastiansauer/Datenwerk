{
  "hash": "6dbee207b8bbb21f13af0823ac5c7146",
  "result": {
    "markdown": "---\nexname: tidymodels-tree1\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- statlearning\n- trees\n- tidymodels\n- string\ndate: '2023-10-11'\nslug: tidymodels-tree1\ntitle: tidymodels-tree1\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        1.0.5     ✔ recipes      1.0.8\n✔ dials        1.2.0     ✔ rsample      1.2.0\n✔ dplyr        1.1.3     ✔ tibble       3.2.1\n✔ ggplot2      3.4.3     ✔ tidyr        1.3.0\n✔ infer        1.0.5     ✔ tune         1.1.2\n✔ modeldata    1.2.0     ✔ workflows    1.1.3\n✔ parsnip      1.1.1     ✔ workflowsets 1.0.1\n✔ purrr        1.0.2     ✔ yardstick    1.2.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n```\n:::\n:::\n\n\n\n\n# Aufgabe\n\n\nBerechnen Sie folgende prädiktiven Modelle und vergleichen Sie die Modellgüte:\n\n1. Entscheidungsbaum\n2. Bagging (Bootstrap-Bäume)\n\n\nModellformel: `am ~ .` (Datensatz `mtcars`)\n\nBerichten Sie die Modellgüte (ROC-AUC).\n\nHinweise:\n\n- Tunen Sie alle Parameter (die der Engine anbietet). \n- Verwenden Sie Defaults, wo nicht anders angegeben.\n- Führen Sie eine $v=2$-fache Kreuzvalidierung durch (weil die Stichprobe so klein ist).\n- Beachten Sie die [üblichen Hinweise](https://datenwerk.netlify.app/hinweise).\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(mtcars)\nlibrary(tictoc)  # Zeitmessung\nlibrary(baguette)\n```\n:::\n\n\n\nFür Klassifikation verlangt Tidymodels eine nominale AV, keine numerische:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars <-\n  mtcars %>% \n  mutate(am = factor(am))\n```\n:::\n\n\n\n\n## Daten teilen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_split <- initial_split(mtcars)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\n## Modell(e)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_tree <-\n  decision_tree(mode = \"classification\",\n                cost_complexity = tune(),\n                tree_depth = tune(),\n                min_n = tune())\n\nmod_bag <-\n  bag_tree(mode = \"classification\",\n           cost_complexity = tune(),\n           tree_depth = tune(),\n           min_n = tune())\n```\n:::\n\n\n\n\n\n## Rezept(e)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_plain <- \n  recipe(am ~ ., data = d_train)\n```\n:::\n\n\n\n\n## Resampling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsmpl <- vfold_cv(d_train, v = 2)\n```\n:::\n\n\n\n## Workflows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_tree <-\n  workflow() %>%  \n  add_recipe(rec_plain) %>% \n  add_model(mod_tree)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_bag <-\n  workflow() %>%  \n  add_recipe(rec_plain) %>% \n  add_model(mod_bag)\n```\n:::\n\n\n\n\n\n\n## Tuning/Fitting\n\nTuninggrid:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_grid <- grid_regular(extract_parameter_set_dials(mod_tree), levels = 5)\ntune_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 125 × 3\n   cost_complexity tree_depth min_n\n             <dbl>      <int> <int>\n 1    0.0000000001          1     2\n 2    0.0000000178          1     2\n 3    0.00000316            1     2\n 4    0.000562              1     2\n 5    0.1                   1     2\n 6    0.0000000001          4     2\n 7    0.0000000178          4     2\n 8    0.00000316            4     2\n 9    0.000562              4     2\n10    0.1                   4     2\n# ℹ 115 more rows\n```\n:::\n:::\n\n\nDa beide Modelle die gleichen Tuningparameter aufweisen,\nbrauchen wir nur ein Grid zu erstellen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nfit_tree <-\n  tune_grid(object = wf_tree,\n            grid = tune_grid,\n            metrics = metric_set(roc_auc),\n            resamples = rsmpl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n→ A | warning: 21 samples were requested but there were 12 rows in the data. 12 will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ B | warning: 30 samples were requested but there were 12 rows in the data. 12 will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x1\nThere were issues with some computations   A: x25   B: x4\n→ C | warning: 40 samples were requested but there were 12 rows in the data. 12 will be used.\nThere were issues with some computations   A: x25   B: x4\nThere were issues with some computations   A: x25   B: x25   C: x6\nThere were issues with some computations   A: x26   B: x25   C: x25\nThere were issues with some computations   A: x28   B: x25   C: x25\nThere were issues with some computations   A: x50   B: x28   C: x25\nThere were issues with some computations   A: x50   B: x50   C: x33\nThere were issues with some computations   A: x50   B: x50   C: x50\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n23.961 sec elapsed\n```\n:::\n\n```{.r .cell-code}\nfit_tree\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Tuning results\n# 2-fold cross-validation \n# A tibble: 2 × 4\n  splits          id    .metrics           .notes           \n  <list>          <chr> <list>             <list>           \n1 <split [12/12]> Fold1 <tibble [125 × 7]> <tibble [75 × 3]>\n2 <split [12/12]> Fold2 <tibble [125 × 7]> <tibble [75 × 3]>\n\nThere were issues with some computations:\n\n  - Warning(s) x50: 21 samples were requested but there were 12 rows in the data. 12 ...\n  - Warning(s) x50: 30 samples were requested but there were 12 rows in the data. 12 ...\n  - Warning(s) x50: 40 samples were requested but there were 12 rows in the data. 12 ...\n\nRun `show_notes(.Last.tune.result)` for more information.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nfit_bag <-\n  tune_grid(object = wf_bag,\n            grid = tune_grid,\n            metrics = metric_set(roc_auc),\n            resamples = rsmpl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n→ A | warning: There were 11 warnings in `dplyr::mutate()`.\n               The first warning was:\n               ℹ In argument: `model = iter(...)`.\n               Caused by warning:\n               ! 21 samples were requested but there were 12 rows in the data. 12 will be used.\n               ℹ Run `dplyr::last_dplyr_warnings()` to see the 10 remaining warnings.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x7\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x12\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x17\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x23\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ B | warning: There were 11 warnings in `dplyr::mutate()`.\n               The first warning was:\n               ℹ In argument: `model = iter(...)`.\n               Caused by warning:\n               ! 30 samples were requested but there were 12 rows in the data. 12 will be used.\n               ℹ Run `dplyr::last_dplyr_warnings()` to see the 10 remaining warnings.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x23\nThere were issues with some computations   A: x25   B: x3\nThere were issues with some computations   A: x25   B: x8\nThere were issues with some computations   A: x25   B: x14\nThere were issues with some computations   A: x25   B: x19\nThere were issues with some computations   A: x25   B: x25\n→ C | warning: There were 11 warnings in `dplyr::mutate()`.\n               The first warning was:\n               ℹ In argument: `model = iter(...)`.\n               Caused by warning:\n               ! 40 samples were requested but there were 12 rows in the data. 12 will be used.\n               ℹ Run `dplyr::last_dplyr_warnings()` to see the 10 remaining warnings.\nThere were issues with some computations   A: x25   B: x25\nThere were issues with some computations   A: x25   B: x25   C: x5\nThere were issues with some computations   A: x25   B: x25   C: x11\nThere were issues with some computations   A: x25   B: x25   C: x16\nThere were issues with some computations   A: x25   B: x25   C: x21\nThere were issues with some computations   A: x26   B: x25   C: x25\nThere were issues with some computations   A: x30   B: x25   C: x25\nThere were issues with some computations   A: x35   B: x25   C: x25\nThere were issues with some computations   A: x40   B: x25   C: x25\nThere were issues with some computations   A: x46   B: x25   C: x25\nThere were issues with some computations   A: x50   B: x26   C: x25\nThere were issues with some computations   A: x50   B: x32   C: x25\nThere were issues with some computations   A: x50   B: x37   C: x25\nThere were issues with some computations   A: x50   B: x43   C: x25\nThere were issues with some computations   A: x50   B: x48   C: x25\nThere were issues with some computations   A: x50   B: x50   C: x29\nThere were issues with some computations   A: x50   B: x50   C: x34\nThere were issues with some computations   A: x50   B: x50   C: x39\nThere were issues with some computations   A: x50   B: x50   C: x45\nThere were issues with some computations   A: x50   B: x50   C: x50\nThere were issues with some computations   A: x50   B: x50   C: x50\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n121.425 sec elapsed\n```\n:::\n:::\n\n\n## Bester Kandidat\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fit_tree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 9\n  cost_complexity tree_depth min_n .metric .estimator  mean     n std_err\n            <dbl>      <int> <int> <chr>   <chr>      <dbl> <int>   <dbl>\n1    0.0000000001          1     2 roc_auc binary     0.708     2   0.208\n2    0.0000000178          1     2 roc_auc binary     0.708     2   0.208\n3    0.00000316            1     2 roc_auc binary     0.708     2   0.208\n4    0.000562              1     2 roc_auc binary     0.708     2   0.208\n5    0.1                   1     2 roc_auc binary     0.708     2   0.208\n# ℹ 1 more variable: .config <chr>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fit_bag)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 9\n  cost_complexity tree_depth min_n .metric .estimator  mean     n std_err\n            <dbl>      <int> <int> <chr>   <chr>      <dbl> <int>   <dbl>\n1    0.1                   1    30 roc_auc binary     0.953     2  0.0469\n2    0.0000000001          4     2 roc_auc binary     0.914     2  0.0859\n3    0.0000000001          4    11 roc_auc binary     0.898     2  0.102 \n4    0.000562             15    30 roc_auc binary     0.898     2  0.102 \n5    0.000562              1    40 roc_auc binary     0.898     2  0.102 \n# ℹ 1 more variable: .config <chr>\n```\n:::\n:::\n\n\n\nBagging erzielte eine klar bessere Modellgüte (in den Validierungssamples) als das Entscheidungsbaum-Modell.\n\n\n## Finalisieren\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_best_finalized <-\n  wf_bag %>% \n  finalize_workflow(select_best(fit_bag))\n```\n:::\n\n\n\n## Last Fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fit <- \n  last_fit(object = wf_best_finalized, d_split)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n→ A | warning: There were 11 warnings in `dplyr::mutate()`.\n               The first warning was:\n               ℹ In argument: `model = iter(...)`.\n               Caused by warning:\n               ! 30 samples were requested but there were 24 rows in the data. 24 will be used.\n               ℹ Run `dplyr::last_dplyr_warnings()` to see the 10 remaining warnings.\n```\n:::\n\n```{.r .cell-code}\ncollect_metrics(final_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary          0.75 Preprocessor1_Model1\n2 roc_auc  binary          0.8  Preprocessor1_Model1\n```\n:::\n:::\n\n\nWie man sieht, ist die Modellgüte im Test-Sample schlechter als in den Train- bzw. Validierungssamples; ein typischer Befund.\n\n\n\n\n\n---\n\nCategories: \n\n- statlearning\n- trees\n- tidymodels\n- string\n\n",
    "supporting": [
      "tidymodels-tree1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}