{
  "hash": "d2c7176c780051da65b7f8cddf02c0a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: tidymodels-tree1\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- statlearning\n- trees\n- tidymodels\n- string\n- mtcars\ndate: '2023-11-08'\nslug: tidymodels-tree1\ntitle: tidymodels-tree1\n\n---\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n:::\n\n\n\n\n# Aufgabe\n\n\nBerechnen Sie folgende prädiktiven Modelle und vergleichen Sie die Modellgüte:\n\n1. Entscheidungsbaum\n2. Bagging (Bootstrap-Bäume)\n\n\nModellformel: `am ~ .` (Datensatz `mtcars`)\n\nBerichten Sie die Modellgüte (ROC-AUC).\n\nHinweise:\n\n- Tunen Sie alle Parameter (die der Engine anbietet). \n- Verwenden Sie Defaults, wo nicht anders angegeben.\n- Führen Sie eine $v=2$-fache Kreuzvalidierung durch (weil die Stichprobe so klein ist).\n- Beachten Sie die [üblichen Hinweise](https://datenwerk.netlify.app/hinweise).\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(mtcars)\nlibrary(tictoc)  # Zeitmessung\nlibrary(baguette)\n```\n:::\n\n\n\nFür Klassifikation verlangt Tidymodels eine nominale AV, keine numerische:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars <-\n  mtcars %>% \n  mutate(am = factor(am))\n```\n:::\n\n\n\n\n## Daten teilen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_split <- initial_split(mtcars)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\n## Modell(e)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_tree <-\n  decision_tree(mode = \"classification\",\n                cost_complexity = tune(),\n                tree_depth = tune(),\n                min_n = tune())\n\nmod_bag <-\n  bag_tree(mode = \"classification\",\n           cost_complexity = tune(),\n           tree_depth = tune(),\n           min_n = tune())\n```\n:::\n\n\n\n\n\n## Rezept(e)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_plain <- \n  recipe(am ~ ., data = d_train)\n```\n:::\n\n\n\n\n## Resampling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsmpl <- vfold_cv(d_train, v = 2)\n```\n:::\n\n\n\n## Workflows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_tree <-\n  workflow() %>%  \n  add_recipe(rec_plain) %>% \n  add_model(mod_tree)\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_bag <-\n  workflow() %>%  \n  add_recipe(rec_plain) %>% \n  add_model(mod_bag)\n```\n:::\n\n\n\n\n\n\n## Tuning/Fitting\n\nTuninggrid:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_grid <- grid_regular(extract_parameter_set_dials(mod_tree), levels = 5)\ntune_grid\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cost_complexity| tree_depth| min_n|\n|---------------:|----------:|-----:|\n|       0.0000000|          1|     2|\n|       0.0000000|          1|     2|\n|       0.0000032|          1|     2|\n|       0.0005623|          1|     2|\n|       0.1000000|          1|     2|\n|       0.0000000|          4|     2|\n|       0.0000000|          4|     2|\n|       0.0000032|          4|     2|\n|       0.0005623|          4|     2|\n|       0.1000000|          4|     2|\n|       0.0000000|          8|     2|\n|       0.0000000|          8|     2|\n|       0.0000032|          8|     2|\n|       0.0005623|          8|     2|\n|       0.1000000|          8|     2|\n|       0.0000000|         11|     2|\n|       0.0000000|         11|     2|\n|       0.0000032|         11|     2|\n|       0.0005623|         11|     2|\n|       0.1000000|         11|     2|\n|       0.0000000|         15|     2|\n|       0.0000000|         15|     2|\n|       0.0000032|         15|     2|\n|       0.0005623|         15|     2|\n|       0.1000000|         15|     2|\n|       0.0000000|          1|    11|\n|       0.0000000|          1|    11|\n|       0.0000032|          1|    11|\n|       0.0005623|          1|    11|\n|       0.1000000|          1|    11|\n|       0.0000000|          4|    11|\n|       0.0000000|          4|    11|\n|       0.0000032|          4|    11|\n|       0.0005623|          4|    11|\n|       0.1000000|          4|    11|\n|       0.0000000|          8|    11|\n|       0.0000000|          8|    11|\n|       0.0000032|          8|    11|\n|       0.0005623|          8|    11|\n|       0.1000000|          8|    11|\n|       0.0000000|         11|    11|\n|       0.0000000|         11|    11|\n|       0.0000032|         11|    11|\n|       0.0005623|         11|    11|\n|       0.1000000|         11|    11|\n|       0.0000000|         15|    11|\n|       0.0000000|         15|    11|\n|       0.0000032|         15|    11|\n|       0.0005623|         15|    11|\n|       0.1000000|         15|    11|\n|       0.0000000|          1|    21|\n|       0.0000000|          1|    21|\n|       0.0000032|          1|    21|\n|       0.0005623|          1|    21|\n|       0.1000000|          1|    21|\n|       0.0000000|          4|    21|\n|       0.0000000|          4|    21|\n|       0.0000032|          4|    21|\n|       0.0005623|          4|    21|\n|       0.1000000|          4|    21|\n|       0.0000000|          8|    21|\n|       0.0000000|          8|    21|\n|       0.0000032|          8|    21|\n|       0.0005623|          8|    21|\n|       0.1000000|          8|    21|\n|       0.0000000|         11|    21|\n|       0.0000000|         11|    21|\n|       0.0000032|         11|    21|\n|       0.0005623|         11|    21|\n|       0.1000000|         11|    21|\n|       0.0000000|         15|    21|\n|       0.0000000|         15|    21|\n|       0.0000032|         15|    21|\n|       0.0005623|         15|    21|\n|       0.1000000|         15|    21|\n|       0.0000000|          1|    30|\n|       0.0000000|          1|    30|\n|       0.0000032|          1|    30|\n|       0.0005623|          1|    30|\n|       0.1000000|          1|    30|\n|       0.0000000|          4|    30|\n|       0.0000000|          4|    30|\n|       0.0000032|          4|    30|\n|       0.0005623|          4|    30|\n|       0.1000000|          4|    30|\n|       0.0000000|          8|    30|\n|       0.0000000|          8|    30|\n|       0.0000032|          8|    30|\n|       0.0005623|          8|    30|\n|       0.1000000|          8|    30|\n|       0.0000000|         11|    30|\n|       0.0000000|         11|    30|\n|       0.0000032|         11|    30|\n|       0.0005623|         11|    30|\n|       0.1000000|         11|    30|\n|       0.0000000|         15|    30|\n|       0.0000000|         15|    30|\n|       0.0000032|         15|    30|\n|       0.0005623|         15|    30|\n|       0.1000000|         15|    30|\n|       0.0000000|          1|    40|\n|       0.0000000|          1|    40|\n|       0.0000032|          1|    40|\n|       0.0005623|          1|    40|\n|       0.1000000|          1|    40|\n|       0.0000000|          4|    40|\n|       0.0000000|          4|    40|\n|       0.0000032|          4|    40|\n|       0.0005623|          4|    40|\n|       0.1000000|          4|    40|\n|       0.0000000|          8|    40|\n|       0.0000000|          8|    40|\n|       0.0000032|          8|    40|\n|       0.0005623|          8|    40|\n|       0.1000000|          8|    40|\n|       0.0000000|         11|    40|\n|       0.0000000|         11|    40|\n|       0.0000032|         11|    40|\n|       0.0005623|         11|    40|\n|       0.1000000|         11|    40|\n|       0.0000000|         15|    40|\n|       0.0000000|         15|    40|\n|       0.0000032|         15|    40|\n|       0.0005623|         15|    40|\n|       0.1000000|         15|    40|\n\n</div>\n:::\n:::\n\n\nDa beide Modelle die gleichen Tuningparameter aufweisen,\nbrauchen wir nur ein Grid zu erstellen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nfit_tree <-\n  tune_grid(object = wf_tree,\n            grid = tune_grid,\n            metrics = metric_set(roc_auc),\n            resamples = rsmpl)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n29.666 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\nfit_tree\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|splits|id    |.metrics|.notes|\n||:-----|||\n|15.2 , 21.5 , 21.4 , 22.8 , 19.2 , 32.4 , 30.4 , 15.5 , 27.3 , 19.7 , 26   , 14.3 , 15.2 , 18.1 , 16.4 , 33.9 , 15   , 30.4 , 10.4 , 17.8 , 18.7 , 13.3 , 21   , 10.4 , 8    , 4    , 4    , 4    , 8    , 4    , 4    , 8    , 4    , 6    , 4    , 8    , 8    , 6    , 8    , 4    , 8    , 4    , 8    , 6    , 8    , 8    , 6    , 8    , 304  , 120.1, 121  , 108  , 400  , 78.7 , 95.1 , 318  , 79   , 145  , 120.3, 360  , 275.8, 225  , 275.8, 71.1 , 301  , 75.7 , 460  , 167.6, 360  , 350  , 160  , 472  , 150  , 97   , 109  , 93   , 175  , 66   , 113  , 150  , 66   , 175  , 91   , 245  , 180  , 105  , 180  , 65   , 335  , 52   , 215  , 123  , 175  , 245  , 110  , 205  , 3.15 , 3.7  , 4.11 , 3.85 , 3.08 , 4.08 , 3.77 , 2.76 , 4.08 , 3.62 , 4.43 , 3.21 , 3.07 , 2.76 , 3.07 , 4.22 , 3.54 , 4.93 , 3    , 3.92 , 3.15 , 3.73 , 3.9  , 2.93 , 3.435, 2.465, 2.78 , 2.32 , 3.845, 2.2  , 1.513, 3.52 , 1.935, 2.77 , 2.14 , 3.57 , 3.78 , 3.46 , 4.07 , 1.835, 3.57 , 1.615, 5.424, 3.44 , 3.44 , 3.84 , 2.875, 5.25 , 17.3 , 20.01, 18.6 , 18.61, 17.05, 19.47, 16.9 , 16.87, 18.9 , 15.5 , 16.7 , 15.84, 18   , 20.22, 17.4 , 19.9 , 14.6 , 18.52, 17.82, 18.9 , 17.02, 15.41, 17.02, 17.98, 0    , 1    , 1    , 1    , 0    , 1    , 1    , 0    , 1    , 0    , 0    , 0    , 0    , 1    , 0    , 1    , 0    , 1    , 0    , 1    , 0    , 0    , 0    , 0    , 1    , 1    , 2    , 2    , 1    , 2    , 2    , 1    , 2    , 2    , 2    , 1    , 1    , 1    , 1    , 2    , 2    , 2    , 1    , 1    , 1    , 1    , 2    , 1    , 3    , 3    , 4    , 4    , 3    , 4    , 5    , 3    , 4    , 5    , 5    , 3    , 3    , 3    , 3    , 4    , 5    , 4    , 3    , 4    , 3    , 3    , 4    , 3    , 2    , 1    , 2    , 1    , 2    , 1    , 2    , 2    , 1    , 6    , 2    , 4    , 3    , 1    , 3    , 1    , 8    , 2    , 4    , 4    , 2    , 4    , 4    , 4    , 1    , 3    , 4    , 5    , 7    , 9    , 12   , 16   , 19   , 22   , 23   , 24   , NA   , Fold1 |Fold1 |1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , 0.728571428571429   , pre0_mod001_post0   , pre0_mod002_post0   , pre0_mod003_post0   , pre0_mod004_post0   , pre0_mod005_post0   , pre0_mod006_post0   , pre0_mod007_post0   , pre0_mod008_post0   , pre0_mod009_post0   , pre0_mod010_post0   , pre0_mod011_post0   , pre0_mod012_post0   , pre0_mod013_post0   , pre0_mod014_post0   , pre0_mod015_post0   , pre0_mod016_post0   , pre0_mod017_post0   , pre0_mod018_post0   , pre0_mod019_post0   , pre0_mod020_post0   , pre0_mod021_post0   , pre0_mod022_post0   , pre0_mod023_post0   , pre0_mod024_post0   , pre0_mod025_post0   , pre0_mod026_post0   , pre0_mod027_post0   , pre0_mod028_post0   , pre0_mod029_post0   , pre0_mod030_post0   , pre0_mod031_post0   , pre0_mod032_post0   , pre0_mod033_post0   , pre0_mod034_post0   , pre0_mod035_post0   , pre0_mod036_post0   , pre0_mod037_post0   , pre0_mod038_post0   , pre0_mod039_post0   , pre0_mod040_post0   , pre0_mod041_post0   , pre0_mod042_post0   , pre0_mod043_post0   , pre0_mod044_post0   , pre0_mod045_post0   , pre0_mod046_post0   , pre0_mod047_post0   , pre0_mod048_post0   , pre0_mod049_post0   , pre0_mod050_post0   , pre0_mod051_post0   , pre0_mod052_post0   , pre0_mod053_post0   , pre0_mod054_post0   , pre0_mod055_post0   , pre0_mod056_post0   , pre0_mod057_post0   , pre0_mod058_post0   , pre0_mod059_post0   , pre0_mod060_post0   , pre0_mod061_post0   , pre0_mod062_post0   , pre0_mod063_post0   , pre0_mod064_post0   , pre0_mod065_post0   , pre0_mod066_post0   , pre0_mod067_post0   , pre0_mod068_post0   , pre0_mod069_post0   , pre0_mod070_post0   , pre0_mod071_post0   , pre0_mod072_post0   , pre0_mod073_post0   , pre0_mod074_post0   , pre0_mod075_post0   , pre0_mod076_post0   , pre0_mod077_post0   , pre0_mod078_post0   , pre0_mod079_post0   , pre0_mod080_post0   , pre0_mod081_post0   , pre0_mod082_post0   , pre0_mod083_post0   , pre0_mod084_post0   , pre0_mod085_post0   , pre0_mod086_post0   , pre0_mod087_post0   , pre0_mod088_post0   , pre0_mod089_post0   , pre0_mod090_post0   , pre0_mod091_post0   , pre0_mod092_post0   , pre0_mod093_post0   , pre0_mod094_post0   , pre0_mod095_post0   , pre0_mod096_post0   , pre0_mod097_post0   , pre0_mod098_post0   , pre0_mod099_post0   , pre0_mod100_post0   , pre0_mod101_post0   , pre0_mod102_post0   , pre0_mod103_post0   , pre0_mod104_post0   , pre0_mod105_post0   , pre0_mod106_post0   , pre0_mod107_post0   , pre0_mod108_post0   , pre0_mod109_post0   , pre0_mod110_post0   , pre0_mod111_post0   , pre0_mod112_post0   , pre0_mod113_post0   , pre0_mod114_post0   , pre0_mod115_post0   , pre0_mod116_post0   , pre0_mod117_post0   , pre0_mod118_post0   , pre0_mod119_post0   , pre0_mod120_post0   , pre0_mod121_post0   , pre0_mod122_post0   , pre0_mod123_post0   , pre0_mod124_post0   , pre0_mod125_post0 |preprocessor 1/1, model 51/125, preprocessor 1/1, model 52/125, preprocessor 1/1, model 53/125, preprocessor 1/1, model 54/125, preprocessor 1/1, model 55/125, preprocessor 1/1, model 56/125, preprocessor 1/1, model 57/125, preprocessor 1/1, model 58/125, preprocessor 1/1, model 59/125, preprocessor 1/1, model 60/125, preprocessor 1/1, model 61/125, preprocessor 1/1, model 62/125, preprocessor 1/1, model 63/125, preprocessor 1/1, model 64/125, preprocessor 1/1, model 65/125, preprocessor 1/1, model 66/125, preprocessor 1/1, model 67/125, preprocessor 1/1, model 68/125, preprocessor 1/1, model 69/125, preprocessor 1/1, model 70/125, preprocessor 1/1, model 71/125, preprocessor 1/1, model 72/125, preprocessor 1/1, model 73/125, preprocessor 1/1, model 74/125, preprocessor 1/1, model 75/125, preprocessor 1/1, model 76/125, preprocessor 1/1, model 77/125, preprocessor 1/1, model 78/125, preprocessor 1/1, model 79/125, preprocessor 1/1, model 80/125, preprocessor 1/1, model 81/125, preprocessor 1/1, model 82/125, preprocessor 1/1, model 83/125, preprocessor 1/1, model 84/125, preprocessor 1/1, model 85/125, preprocessor 1/1, model 86/125, preprocessor 1/1, model 87/125, preprocessor 1/1, model 88/125, preprocessor 1/1, model 89/125, preprocessor 1/1, model 90/125, preprocessor 1/1, model 91/125, preprocessor 1/1, model 92/125, preprocessor 1/1, model 93/125, preprocessor 1/1, model 94/125, preprocessor 1/1, model 95/125, preprocessor 1/1, model 96/125, preprocessor 1/1, model 97/125, preprocessor 1/1, model 98/125, preprocessor 1/1, model 99/125, preprocessor 1/1, model 100/125, preprocessor 1/1, model 101/125, preprocessor 1/1, model 102/125, preprocessor 1/1, model 103/125, preprocessor 1/1, model 104/125, preprocessor 1/1, model 105/125, preprocessor 1/1, model 106/125, preprocessor 1/1, model 107/125, preprocessor 1/1, model 108/125, preprocessor 1/1, model 109/125, preprocessor 1/1, model 110/125, preprocessor 1/1, model 111/125, preprocessor 1/1, model 112/125, preprocessor 1/1, model 113/125, preprocessor 1/1, model 114/125, preprocessor 1/1, model 115/125, preprocessor 1/1, model 116/125, preprocessor 1/1, model 117/125, preprocessor 1/1, model 118/125, preprocessor 1/1, model 119/125, preprocessor 1/1, model 120/125, preprocessor 1/1, model 121/125, preprocessor 1/1, model 122/125, preprocessor 1/1, model 123/125, preprocessor 1/1, model 124/125, preprocessor 1/1, model 125/125, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~1L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~1L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~1L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~1L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~1L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~4L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~4L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~4L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~4L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~4L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~8L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~8L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~8L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~8L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~8L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~11L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~11L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~11L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~11L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~11L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~15L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~15L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~15L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~15L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~15L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~1L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~1L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~1L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~1L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~1L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~4L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~4L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~4L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~4L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~4L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~8L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~8L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~8L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~8L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~8L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~11L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~11L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~11L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~11L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~11L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~15L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~15L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~15L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~15L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~15L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~1L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~1L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~1L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~1L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~1L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~4L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~4L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~4L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~4L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~4L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~8L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~8L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~8L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~8L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~8L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~11L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~11L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~11L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~11L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~11L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~15L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~15L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~15L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~15L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~15L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local |\n|15.2 , 21.5 , 21.4 , 22.8 , 19.2 , 32.4 , 30.4 , 15.5 , 27.3 , 19.7 , 26   , 14.3 , 15.2 , 18.1 , 16.4 , 33.9 , 15   , 30.4 , 10.4 , 17.8 , 18.7 , 13.3 , 21   , 10.4 , 8    , 4    , 4    , 4    , 8    , 4    , 4    , 8    , 4    , 6    , 4    , 8    , 8    , 6    , 8    , 4    , 8    , 4    , 8    , 6    , 8    , 8    , 6    , 8    , 304  , 120.1, 121  , 108  , 400  , 78.7 , 95.1 , 318  , 79   , 145  , 120.3, 360  , 275.8, 225  , 275.8, 71.1 , 301  , 75.7 , 460  , 167.6, 360  , 350  , 160  , 472  , 150  , 97   , 109  , 93   , 175  , 66   , 113  , 150  , 66   , 175  , 91   , 245  , 180  , 105  , 180  , 65   , 335  , 52   , 215  , 123  , 175  , 245  , 110  , 205  , 3.15 , 3.7  , 4.11 , 3.85 , 3.08 , 4.08 , 3.77 , 2.76 , 4.08 , 3.62 , 4.43 , 3.21 , 3.07 , 2.76 , 3.07 , 4.22 , 3.54 , 4.93 , 3    , 3.92 , 3.15 , 3.73 , 3.9  , 2.93 , 3.435, 2.465, 2.78 , 2.32 , 3.845, 2.2  , 1.513, 3.52 , 1.935, 2.77 , 2.14 , 3.57 , 3.78 , 3.46 , 4.07 , 1.835, 3.57 , 1.615, 5.424, 3.44 , 3.44 , 3.84 , 2.875, 5.25 , 17.3 , 20.01, 18.6 , 18.61, 17.05, 19.47, 16.9 , 16.87, 18.9 , 15.5 , 16.7 , 15.84, 18   , 20.22, 17.4 , 19.9 , 14.6 , 18.52, 17.82, 18.9 , 17.02, 15.41, 17.02, 17.98, 0    , 1    , 1    , 1    , 0    , 1    , 1    , 0    , 1    , 0    , 0    , 0    , 0    , 1    , 0    , 1    , 0    , 1    , 0    , 1    , 0    , 0    , 0    , 0    , 1    , 1    , 2    , 2    , 1    , 2    , 2    , 1    , 2    , 2    , 2    , 1    , 1    , 1    , 1    , 2    , 2    , 2    , 1    , 1    , 1    , 1    , 2    , 1    , 3    , 3    , 4    , 4    , 3    , 4    , 5    , 3    , 4    , 5    , 5    , 3    , 3    , 3    , 3    , 4    , 5    , 4    , 3    , 4    , 3    , 3    , 4    , 3    , 2    , 1    , 2    , 1    , 2    , 1    , 2    , 2    , 1    , 6    , 2    , 4    , 3    , 1    , 3    , 1    , 8    , 2    , 4    , 4    , 2    , 4    , 4    , 4    , 2    , 6    , 8    , 10   , 11   , 13   , 14   , 15   , 17   , 18   , 20   , 21   , NA   , Fold2 |Fold2 |1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1e-10               , 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 1.77827941003892e-08, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 3.16227766016838e-06, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.000562341325190349, 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 0.1                 , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 1                   , 1                   , 1                   , 1                   , 1                   , 4                   , 4                   , 4                   , 4                   , 4                   , 8                   , 8                   , 8                   , 8                   , 8                   , 11                  , 11                  , 11                  , 11                  , 11                  , 15                  , 15                  , 15                  , 15                  , 15                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , 2                   , 11                  , 21                  , 30                  , 40                  , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , roc_auc             , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binary              , binarypre0_mod001_post0   , pre0_mod002_post0   , pre0_mod003_post0   , pre0_mod004_post0   , pre0_mod005_post0   , pre0_mod006_post0   , pre0_mod007_post0   , pre0_mod008_post0   , pre0_mod009_post0   , pre0_mod010_post0   , pre0_mod011_post0   , pre0_mod012_post0   , pre0_mod013_post0   , pre0_mod014_post0   , pre0_mod015_post0   , pre0_mod016_post0   , pre0_mod017_post0   , pre0_mod018_post0   , pre0_mod019_post0   , pre0_mod020_post0   , pre0_mod021_post0   , pre0_mod022_post0   , pre0_mod023_post0   , pre0_mod024_post0   , pre0_mod025_post0   , pre0_mod026_post0   , pre0_mod027_post0   , pre0_mod028_post0   , pre0_mod029_post0   , pre0_mod030_post0   , pre0_mod031_post0   , pre0_mod032_post0   , pre0_mod033_post0   , pre0_mod034_post0   , pre0_mod035_post0   , pre0_mod036_post0   , pre0_mod037_post0   , pre0_mod038_post0   , pre0_mod039_post0   , pre0_mod040_post0   , pre0_mod041_post0   , pre0_mod042_post0   , pre0_mod043_post0   , pre0_mod044_post0   , pre0_mod045_post0   , pre0_mod046_post0   , pre0_mod047_post0   , pre0_mod048_post0   , pre0_mod049_post0   , pre0_mod050_post0   , pre0_mod051_post0   , pre0_mod052_post0   , pre0_mod053_post0   , pre0_mod054_post0   , pre0_mod055_post0   , pre0_mod056_post0   , pre0_mod057_post0   , pre0_mod058_post0   , pre0_mod059_post0   , pre0_mod060_post0   , pre0_mod061_post0   , pre0_mod062_post0   , pre0_mod063_post0   , pre0_mod064_post0   , pre0_mod065_post0   , pre0_mod066_post0   , pre0_mod067_post0   , pre0_mod068_post0   , pre0_mod069_post0   , pre0_mod070_post0   , pre0_mod071_post0   , pre0_mod072_post0   , pre0_mod073_post0   , pre0_mod074_post0   , pre0_mod075_post0   , pre0_mod076_post0   , pre0_mod077_post0   , pre0_mod078_post0   , pre0_mod079_post0   , pre0_mod080_post0   , pre0_mod081_post0   , pre0_mod082_post0   , pre0_mod083_post0   , pre0_mod084_post0   , pre0_mod085_post0   , pre0_mod086_post0   , pre0_mod087_post0   , pre0_mod088_post0   , pre0_mod089_post0   , pre0_mod090_post0   , pre0_mod091_post0   , pre0_mod092_post0   , pre0_mod093_post0   , pre0_mod094_post0   , pre0_mod095_post0   , pre0_mod096_post0   , pre0_mod097_post0   , pre0_mod098_post0   , pre0_mod099_post0   , pre0_mod100_post0   , pre0_mod101_post0   , pre0_mod102_post0   , pre0_mod103_post0   , pre0_mod104_post0   , pre0_mod105_post0   , pre0_mod106_post0   , pre0_mod107_post0   , pre0_mod108_post0   , pre0_mod109_post0   , pre0_mod110_post0   , pre0_mod111_post0   , pre0_mod112_post0   , pre0_mod113_post0   , pre0_mod114_post0   , pre0_mod115_post0   , pre0_mod116_post0   , pre0_mod117_post0   , pre0_mod118_post0   , pre0_mod119_post0   , pre0_mod120_post0   , pre0_mod121_post0   , pre0_mod122_post0   , pre0_mod123_post0   , pre0_mod124_post0   , pre0_mod125_post0 |preprocessor 1/1, model 51/125, preprocessor 1/1, model 52/125, preprocessor 1/1, model 53/125, preprocessor 1/1, model 54/125, preprocessor 1/1, model 55/125, preprocessor 1/1, model 56/125, preprocessor 1/1, model 57/125, preprocessor 1/1, model 58/125, preprocessor 1/1, model 59/125, preprocessor 1/1, model 60/125, preprocessor 1/1, model 61/125, preprocessor 1/1, model 62/125, preprocessor 1/1, model 63/125, preprocessor 1/1, model 64/125, preprocessor 1/1, model 65/125, preprocessor 1/1, model 66/125, preprocessor 1/1, model 67/125, preprocessor 1/1, model 68/125, preprocessor 1/1, model 69/125, preprocessor 1/1, model 70/125, preprocessor 1/1, model 71/125, preprocessor 1/1, model 72/125, preprocessor 1/1, model 73/125, preprocessor 1/1, model 74/125, preprocessor 1/1, model 75/125, preprocessor 1/1, model 76/125, preprocessor 1/1, model 77/125, preprocessor 1/1, model 78/125, preprocessor 1/1, model 79/125, preprocessor 1/1, model 80/125, preprocessor 1/1, model 81/125, preprocessor 1/1, model 82/125, preprocessor 1/1, model 83/125, preprocessor 1/1, model 84/125, preprocessor 1/1, model 85/125, preprocessor 1/1, model 86/125, preprocessor 1/1, model 87/125, preprocessor 1/1, model 88/125, preprocessor 1/1, model 89/125, preprocessor 1/1, model 90/125, preprocessor 1/1, model 91/125, preprocessor 1/1, model 92/125, preprocessor 1/1, model 93/125, preprocessor 1/1, model 94/125, preprocessor 1/1, model 95/125, preprocessor 1/1, model 96/125, preprocessor 1/1, model 97/125, preprocessor 1/1, model 98/125, preprocessor 1/1, model 99/125, preprocessor 1/1, model 100/125, preprocessor 1/1, model 101/125, preprocessor 1/1, model 102/125, preprocessor 1/1, model 103/125, preprocessor 1/1, model 104/125, preprocessor 1/1, model 105/125, preprocessor 1/1, model 106/125, preprocessor 1/1, model 107/125, preprocessor 1/1, model 108/125, preprocessor 1/1, model 109/125, preprocessor 1/1, model 110/125, preprocessor 1/1, model 111/125, preprocessor 1/1, model 112/125, preprocessor 1/1, model 113/125, preprocessor 1/1, model 114/125, preprocessor 1/1, model 115/125, preprocessor 1/1, model 116/125, preprocessor 1/1, model 117/125, preprocessor 1/1, model 118/125, preprocessor 1/1, model 119/125, preprocessor 1/1, model 120/125, preprocessor 1/1, model 121/125, preprocessor 1/1, model 122/125, preprocessor 1/1, model 123/125, preprocessor 1/1, model 124/125, preprocessor 1/1, model 125/125, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, warning, ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 21 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 30 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., ! 40 samples were requested but there were 12 rows in the data.\nℹ 12 samples will be used., tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~1L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~1L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~1L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~1L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~1L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~4L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~4L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~4L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~4L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~4L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~8L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~8L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~8L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~8L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~8L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~11L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~11L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~11L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~11L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~11L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~15L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~15L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~15L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~15L, minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~15L, ,     minsplit = min_rows(21L, data)), min_rows(21L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~1L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~1L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~1L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~1L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~1L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~4L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~4L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~4L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~4L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~4L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~8L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~8L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~8L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~8L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~8L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~11L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~11L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~11L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~11L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~11L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~15L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~15L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~15L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~15L, minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~15L, ,     minsplit = min_rows(30L, data)), min_rows(30L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~1L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~1L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~1L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~1L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~1L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~4L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~4L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~4L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~4L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~4L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~8L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~8L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~8L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~8L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~8L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~11L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~11L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~11L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~11L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~11L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1e-10, maxdepth = ~15L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~1.77827941003892e-08, ,     maxdepth = ~15L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~3.16227766016838e-06, ,     maxdepth = ~15L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.000562341325190349, ,     maxdepth = ~15L, minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local, tune_grid(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid.workflow(object = wf_tree, grid = tune_grid, metrics = metric_set(roc_auc), ,     resamples = rsmpl), tune_grid_workflow(object, resamples = resamples, grid = grid, ,     metrics = metrics, eval_time = eval_time, pset = param_info, ,     control = control), tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, ,     param_info = pset, metrics = metrics, eval_time = eval_time, ,     control = control), rlang::eval_bare(cl), lapply(resamples, loop_over_all_stages, grid = grid, static = static), FUN(X[[i]], ...), .catch_and_log(finalize_fit_model(wflow_with_fitted_pre, current_sched_model), ,     control = static$control, split_labels = split_labs, location = location, ,     notes = notes), catcher(.expr), rlang::try_fetch(expr, warning = add_cond, error = function(e) {,     structure(catch_message(e), class = \"try-error\", condition = rlang::`%&#124;&#124;%`(rlang::cnd_entrace(e), ,         e)), }), tryCatch(withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), stackOverflowError = handlers[[2L]]), tryCatchList(expr, classes, parentenv, handlers), tryCatchOne(expr, names, parentenv, handlers[[1L]]), doTryCatch(return(expr), name, parentenv, handler), withCallingHandlers(expr, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"warning\")) {,             out <- handlers[[1L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }, condition = function(cnd) {,     {,         .__handler_frame__. <- TRUE,         .__setup_frame__. <- frame,         if (inherits(cnd, \"message\")) {,             except <- c(\"warning\", \"error\"),         },         else if (inherits(cnd, \"warning\")) {,             except <- \"error\",         },         else {,             except <- \"\",         },     },     while (!is_null(cnd)) {,         if (inherits(cnd, \"error\")) {,             out <- handlers[[2L]](cnd),             if (!inherits(out, \"rlang_zap\")) ,                 throw(out),         },         inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\"),         if (is_false(inherit)) {,             return(),         },         cnd <- .subset2(cnd, \"parent\"),     }, }), finalize_fit_model(wflow_with_fitted_pre, current_sched_model), .fit_model(wflow_current, workflows::control_workflow()), fit(action_model, workflow = workflow, control = control), fit.action_model(action_model, workflow = workflow, control = control), fit_from_xy(spec, mold, case_weights, control_parsnip), fit_xy(spec, x = mold$predictors, y = mold$outcomes, case_weights = case_weights, ,     control = control_parsnip), fit_xy.model_spec(spec, x = mold$predictors, y = mold$outcomes, ,     case_weights = case_weights, control = control_parsnip), xy_form(object = object, env = eval_env, control = control, ...), form_form(object = object, env = env, control = control, ...), eval_mod(fit_call, capture = control$verbosity == 0, catch = control$catch, ,     envir = env, ...), eval_tidy(e, env = envir, ...), rpart::rpart(formula = ..y ~ ., data = data, cp = ~0.1, maxdepth = ~15L, ,     minsplit = min_rows(40L, data)), min_rows(40L, data), cli::cli_warn(c(`!` = \"{num_rows} sample{?s} {?was/were} requested but there were\\n               {n} rows in the data.\", ,     i = \"{n - offset} sample{?s} will be used.\")), rlang::warn(format_warning(message, .envir = .envir), ...), warning(cnd), withRestarts({,     .Internal(.signalCondition(cond, message, call)),     .Internal(.dfltWarn(message, call)), }, muffleWarning = function() NULL), withOneRestart(expr, restarts[[1L]]), doWithOneRestart(return(expr), restart), `<fn>`(`<rlng_wrn>`), 0, 0, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 10, 7, 16, 17, 17, 19, 20, 20, 22, 23, 24, 25, 0, 0, 28, 29, 30, 31, 32, 33, 0, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, tune, tune, tune, tune, rlang, base, tune, tune, tune, rlang, base, base, base, base, base, tune, workflows, generics, workflows, workflows, generics, parsnip, parsnip, parsnip, parsnip, rlang, rpart, parsnip, cli, rlang, base, base, base, base, rlang, ::, :::, :::, :::, ::, ::, local, ::, :::, ::, ::, local, local, local, ::, :::, ::, ::, :::, :::, ::, ::, :::, :::, :::, ::, ::, ::, ::, ::, ::, ::, local, local, local |\n\n</div>\n:::\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nfit_bag <-\n  tune_grid(object = wf_bag,\n            grid = tune_grid,\n            metrics = metric_set(roc_auc),\n            resamples = rsmpl)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n164.9 sec elapsed\n```\n\n\n:::\n:::\n\n\n## Bester Kandidat\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fit_tree)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cost_complexity| tree_depth| min_n|.metric |.estimator |      mean|  n|   std_err|.config           |\n|---------------:|----------:|-----:|:-------|:----------|---------:|--:|---------:|:-----------------|\n|               0|          1|     2|roc_auc |binary     | 0.8642857|  2| 0.1357143|pre0_mod001_post0 |\n|               0|          1|    11|roc_auc |binary     | 0.8642857|  2| 0.1357143|pre0_mod002_post0 |\n|               0|          1|    21|roc_auc |binary     | 0.8642857|  2| 0.1357143|pre0_mod003_post0 |\n|               0|          1|    30|roc_auc |binary     | 0.8642857|  2| 0.1357143|pre0_mod004_post0 |\n|               0|          1|    40|roc_auc |binary     | 0.8642857|  2| 0.1357143|pre0_mod005_post0 |\n\n</div>\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fit_bag)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cost_complexity| tree_depth| min_n|.metric |.estimator |      mean|  n|   std_err|.config           |\n|---------------:|----------:|-----:|:-------|:----------|---------:|--:|---------:|:-----------------|\n|       0.0000000|          4|    40|roc_auc |binary     | 0.9571429|  2| 0.0428571|pre0_mod035_post0 |\n|       0.0000000|          4|    21|roc_auc |binary     | 0.9428571|  2| 0.0571429|pre0_mod008_post0 |\n|       0.0000000|         11|    30|roc_auc |binary     | 0.9285714|  2| 0.0714286|pre0_mod044_post0 |\n|       0.0000032|         15|    11|roc_auc |binary     | 0.9285714|  2| 0.0714286|pre0_mod072_post0 |\n|       0.0005623|         11|    30|roc_auc |binary     | 0.9285714|  2| 0.0714286|pre0_mod094_post0 |\n\n</div>\n:::\n:::\n\n\n\nBagging erzielte eine klar bessere Modellgüte (in den Validierungssamples) als das Entscheidungsbaum-Modell.\n\n\n## Finalisieren\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_best_finalized <-\n  wf_bag %>% \n  finalize_workflow(select_best(fit_bag))\n```\n:::\n\n\n\n## Last Fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fit <- \n  last_fit(object = wf_best_finalized, d_split)\n\ncollect_metrics(final_fit)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|.metric     |.estimator | .estimate|.config         |\n|:-----------|:----------|---------:|:---------------|\n|accuracy    |binary     | 0.6250000|pre0_mod0_post0 |\n|roc_auc     |binary     | 0.6666667|pre0_mod0_post0 |\n|brier_class |binary     | 0.2482456|pre0_mod0_post0 |\n\n</div>\n:::\n:::\n\n\nWie man sieht, ist die Modellgüte im Test-Sample schlechter als in den Train- bzw. Validierungssamples; ein typischer Befund.\n\n\n\n\n\n---\n\nCategories: \n\n- statlearning\n- trees\n- tidymodels\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}