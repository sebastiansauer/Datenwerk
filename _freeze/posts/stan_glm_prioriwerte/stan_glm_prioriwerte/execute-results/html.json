{
  "hash": "e132bc49c54d0dbdf13b9256883d9eaa",
  "result": {
    "markdown": "---\nexname: stan_glm_prioriwerte\nextype: schoice\nexsolution: 512\nexshuffle: no\ncategories:\n- bayes\n- regression\ndate: '2022-12-14'\nslug: stan_glm_prioriwerte\ntitle: stan_glm_prioriwerte\n\n---\n\n\n\n\n\n\n\n\n\n\n\n# Exercise\n\nBerechnet man eine Posteriori-Verteilung mit `stan_glm()`, \nso kann man entweder die schwach informativen Prioriwerte der Standardeinstellung verwenden, \noder selber Prioriwerte definieren.\n\nBetrachten Sie dazu dieses Modell:\n\n````\nstan_glm(price ~ cut, data = diamonds, \n                   prior = normal(location = c(100, 100, 100, 100),\n                                  scale = c(10, 10, 10, 10)),\n                   prior_intercept = normal(3000, 500))\n```\n\nBeziehen Sie sich auf den Datensatz `diamonds`.\n\n\nWelche Aussage dazu passt (am besten)?\n\nAnswerlist\n----------\n* Es wird für (genau) einen Parameter eine Priori-Verteilung definiert.\n* Für keinen Regressionsparameter der UV liegt apriori die Wahrscheinlichkeit für einen negativen Wert bei mehr als 5%.\n* Mit `prior = normal()` werden Gruppenmittelwerte definiert.\n* Alle Parameter des Modells sind normalverteilt.\n* mit `prior_intercept = normal(3000, 500)` wird praktisch eine Gleichverteilung definiert (da die Streuung sehr hoch ist).\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Solution\n\n\nAnswerlist\n----------\n\n\n* Falsch\n* Wahr\n* Falsch\n* Falsch\n* Falsch\n\n\n\n\n\n---\n\nCategories: \n\n- bayes\n- regression\n\n",
    "supporting": [
      "stan_glm_prioriwerte_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}