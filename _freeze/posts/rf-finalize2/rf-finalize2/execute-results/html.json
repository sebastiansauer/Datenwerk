{
  "hash": "4690a9944f8d2a97db6186db24d51b83",
  "result": {
    "markdown": "---\nexname: rf-finalize2\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- tidymodels\n- statlearning\n- template\n- string\ndate: '2023-05-09'\nslug: rf-finalize2\ntitle: rf-finalize2\n\n---\n\n\n\n\n\n# Aufgabe\n\n<!-- Schreiben Sie eine Vorlage für eine prädiktive Analyse mit Tidymodels! -->\n\nBerechnen Sie ein prädiktives Modell (Random Forest) mit dieser Modellgleichung:\n\n`body_mass_g ~ .` (Datensatz: palmerpenguins::penguins).\n\n\nZeigen Sie, welche Werte für mtry im Default von Tidymodels gesetzt werden!\n\nHinweise:\n- Tunen Sie `mtry`\n- Verwenden Sie Kreuzvalidierung\n- Verwenden Sie Standardwerte, wo nicht anders angegeben.\n- Fixieren Sie Zufallszahlen auf den Startwert 42.\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\nZuererst der Standardablauf:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setup:\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        1.0.4     ✔ recipes      1.0.5\n✔ dials        1.2.0     ✔ rsample      1.1.1\n✔ dplyr        1.1.1     ✔ tibble       3.2.1\n✔ ggplot2      3.4.2     ✔ tidyr        1.3.0\n✔ infer        1.0.4     ✔ tune         1.1.0\n✔ modeldata    1.1.0     ✔ workflows    1.1.3\n✔ parsnip      1.0.4     ✔ workflowsets 1.0.0\n✔ purrr        1.0.1     ✔ yardstick    1.1.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ lubridate 1.9.2     ✔ stringr   1.5.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tictoc)  # Zeitmessung\n\n\n# Data:\nd_path <- \"https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv\"\nd <- read_csv(d_path)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 344 Columns: 9\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): species, island, sex dbl (6): ...1, bill_length_mm, bill_depth_mm,\nflipper_length_mm, body_mass_g...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\n# rm NA in the dependent variable:\nd <- d %>% \n  drop_na(body_mass_g)\n\n\nset.seed(42)\nd_split <- initial_split(d)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n\n\n# model:\nmod_rf <-\n  rand_forest(mode = \"regression\",\n           mtry = tune())\n\n\n# cv:\nset.seed(42)\nrsmpl <- vfold_cv(d_train)\n\n\n# recipe:\nrec_plain <- \n  recipe(body_mass_g ~  ., data = d_train) %>% \n  step_impute_bag(all_predictors())\n\n\n# workflow:\nwf1 <-\n  workflow() %>% \n  add_model(mod_rf) %>% \n  add_recipe(rec_plain)\n\n\n# tuning:\ntic()\nwf1_fit <-\n  wf1 %>% \n  tune_grid(\n    resamples = rsmpl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ni Creating pre-processing data to finalize unknown parameter: mtry\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n21.505 sec elapsed\n```\n:::\n:::\n\n\nDann schauen wir uns das Ergebnisobjekt vom Tuning an.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf1_fit %>% \n  collect_metrics() %>% \n  filter(.metric == \"rmse\") %>% \n  arrange(mtry)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 7\n   mtry .metric .estimator  mean     n std_err .config             \n  <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1     1 rmse    standard    309.    10   12.8  Preprocessor1_Model1\n2     2 rmse    standard    282.    10   11.1  Preprocessor1_Model5\n3     3 rmse    standard    282.    10   10.6  Preprocessor1_Model7\n4     4 rmse    standard    283.    10    9.95 Preprocessor1_Model4\n5     5 rmse    standard    283.    10    9.41 Preprocessor1_Model3\n6     6 rmse    standard    284.    10    9.95 Preprocessor1_Model6\n7     7 rmse    standard    283.    10    9.79 Preprocessor1_Model8\n8     8 rmse    standard    282.    10    9.84 Preprocessor1_Model2\n```\n:::\n:::\n\n\n\nIn der Hilfe ist zu lesen:\n\n>   If no tuning grid is provided, a semi-random grid (via dials::grid_latin_hypercube()) is created with 10 candidate parameter combinations.\n\nAus irgendwelchen Gründen wurden hier nur 10 Kandidatenwerte berechnet.\n\n\n\nWeiter steht dort:\n\n>    In some cases, the tuning parameter values depend on the dimensions of the data. For example, mtry in random forest models depends on the number of predictors. In this case, the default tuning parameter object requires an upper range. dials::finalize() can be used to derive the data-dependent parameters. Otherwise, a parameter set can be created (via dials::parameters()) and the dials update() function can be used to change the values. This updated parameter set can be passed to the function via the param_info argument.\n\n\nAchtung: `step_impute_knn` scheint Probleme zu haben, wenn es Charakter-Variablen gibt.\n\n\n\n\n\n---\n\nCategories: \n\n- tidymodels\n- statlearning\n- template\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}