{
  "hash": "65f5ae86f3afc221905cdbe63316e4b1",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: regression-tree01\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- statlearning\n- trees\n- tidymodels\n- string\n- mtcars\ndate: '2023-05-17'\nslug: regr-tree01\ntitle: regr-tree01\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n:::\n\n\n\n\n\n\n# Aufgabe\n\n\nBerechnen Sie einfaches Prognosemodell auf Basis eines Entscheidungsbaums!\n\nModellformel: `am ~ .` (Datensatz `mtcars`)\n\nBerichten Sie die Modellgüte (ROC-AUC).\n\nHinweise:\n\n- Tunen Sie den Komplexitätsparameter des Baumes.\n- Führen Sie eine $v=2$-fache Kreuzvalidierung durch (weil die Stichprobe so klein ist).\n- Beachten Sie die [üblichen Hinweise](https://datenwerk.netlify.app/hinweise).\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(mtcars)\nlibrary(tictoc)  # Zeitmessung\n```\n:::\n\n\n\n\n\nFür Klassifikation verlangt Tidymodels eine nominale AV, keine numerische:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars <-\n  mtcars %>% \n  mutate(am = factor(am))\n```\n:::\n\n\n\n\n\n\n## Daten teilen\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_split <- initial_split(mtcars)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\n\n\n## Modell(e)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_tree <-\n  decision_tree(mode = \"classification\",\n                cost_complexity = tune())\n```\n:::\n\n\n\n\n\n## Rezept(e)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec1 <- \n  recipe(am ~ ., data = d_train)\n```\n:::\n\n\n\n\n\n\n## Resampling\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsmpl <- vfold_cv(d_train, v = 2)\n```\n:::\n\n\n\n\n\n## Workflow\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf1 <-\n  workflow() %>%  \n  add_recipe(rec1) %>% \n  add_model(mod_tree)\n```\n:::\n\n\n\n\n## Tuning/Fitting\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 <-\n  tune_grid(object = wf1,\n            resamples = rsmpl)\n```\n:::\n\n\n\n\n\n## Bester Kandidat\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(fit1)\n```\n\n::: {.cell-output-display}\n![](regr-tree01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  cost_complexity .metric .estimator  mean     n std_err .config              \n            <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1        1.15e- 7 roc_auc binary       0.5     2       0 Preprocessor1_Model01\n2        2.55e-10 roc_auc binary       0.5     2       0 Preprocessor1_Model02\n3        2.58e- 9 roc_auc binary       0.5     2       0 Preprocessor1_Model03\n4        3.28e- 2 roc_auc binary       0.5     2       0 Preprocessor1_Model04\n5        6.43e- 6 roc_auc binary       0.5     2       0 Preprocessor1_Model05\n```\n\n\n:::\n:::\n\n\n\n\n\n## Finalisieren\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf1_finalized <-\n  wf1 %>% \n  finalize_workflow(select_best(fit1))\n```\n:::\n\n\n\n\n\n## Last Fit\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fit <- \n  last_fit(object = wf1_finalized, d_split)\n\ncollect_metrics(final_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  .metric     .estimator .estimate .config             \n  <chr>       <chr>          <dbl> <chr>               \n1 accuracy    binary         0.875 Preprocessor1_Model1\n2 roc_auc     binary         0.9   Preprocessor1_Model1\n3 brier_class binary         0.119 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n---\n\nCategories: \n\n- statlearning\n- trees\n- tidymodels\n- string\n\n",
    "supporting": [
      "regr-tree01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}