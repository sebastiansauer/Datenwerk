{
  "hash": "79c996d21de0f439628649945ce5888f",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: regression-tree03\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- statlearning\n- trees\n- tidymodels\n- string\n- mtcars\ndate: '2023-05-17'\nslug: regr-tree03\ntitle: regr-tree03\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n:::\n\n\n\n\n\n\n# Aufgabe\n\n\nBerechnen Sie einfaches Prognosemodell auf Basis eines Entscheidungsbaums!\n\nModellformel: `am ~ .` (Datensatz `mtcars`)\n\nBerichten Sie die Modellgüte (ROC-AUC).\n\nHinweise:\n\n- Tunen Sie alle Parameter (die der Engine anbietet). \n- Erstellen Sie ein Tuning-Grid mit 5 Werten pro Tuningparameter.\n- Führen Sie eine $v=2$-fache Kreuzvalidierung durch (weil die Stichprobe so klein ist).\n- Beachten Sie die [üblichen Hinweise](https://datenwerk.netlify.app/hinweise).\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(mtcars)\nlibrary(tictoc)  # Zeitmessung\n```\n:::\n\n\n\n\n\nFür Klassifikation verlangt Tidymodels eine nominale AV, keine numerische:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars <-\n  mtcars %>% \n  mutate(am = factor(am))\n```\n:::\n\n\n\n\n\n\n## Daten teilen\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_split <- initial_split(mtcars)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\n\n\n## Modell(e)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_tree <-\n  decision_tree(mode = \"classification\",\n                cost_complexity = tune(),\n                tree_depth = tune(),\n                min_n = tune())\n```\n:::\n\n\n\n\n\n\n\n## Rezept(e)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec1 <- \n  recipe(am ~ ., data = d_train)\n```\n:::\n\n\n\n\n\n\n## Resampling\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsmpl <- vfold_cv(d_train, v = 2)\n```\n:::\n\n\n\n\n\n## Workflow\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf1 <-\n  workflow() %>%  \n  add_recipe(rec1) %>% \n  add_model(mod_tree)\n```\n:::\n\n\n\n\n\n\n\n\n## Tuning/Fitting\n\nTuninggrid:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_grid <- grid_regular(extract_parameter_set_dials(mod_tree), levels = 5)\ntune_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 125 × 3\n   cost_complexity tree_depth min_n\n             <dbl>      <int> <int>\n 1    0.0000000001          1     2\n 2    0.0000000178          1     2\n 3    0.00000316            1     2\n 4    0.000562              1     2\n 5    0.1                   1     2\n 6    0.0000000001          4     2\n 7    0.0000000178          4     2\n 8    0.00000316            4     2\n 9    0.000562              4     2\n10    0.1                   4     2\n# ℹ 115 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nfit1 <-\n  tune_grid(object = wf1,\n            grid = tune_grid,\n            metrics = metric_set(roc_auc),\n            resamples = rsmpl)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n17.644 sec elapsed\n```\n\n\n:::\n:::\n\n\n\n\n\n## Bester Kandidat\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(fit1)\n```\n\n::: {.cell-output-display}\n![](regr-tree03_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 9\n  cost_complexity tree_depth min_n .metric .estimator  mean     n std_err\n            <dbl>      <int> <int> <chr>   <chr>      <dbl> <int>   <dbl>\n1    0.0000000001          1     2 roc_auc binary     0.865     2  0.0521\n2    0.0000000178          1     2 roc_auc binary     0.865     2  0.0521\n3    0.00000316            1     2 roc_auc binary     0.865     2  0.0521\n4    0.000562              1     2 roc_auc binary     0.865     2  0.0521\n5    0.1                   1     2 roc_auc binary     0.865     2  0.0521\n# ℹ 1 more variable: .config <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Finalisieren\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf1_finalized <-\n  wf1 %>% \n  finalize_workflow(select_best(fit1))\n```\n:::\n\n\n\n\n\n## Last Fit\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fit <- \n  last_fit(object = wf1_finalized, d_split)\n\ncollect_metrics(final_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  .metric     .estimator .estimate .config             \n  <chr>       <chr>          <dbl> <chr>               \n1 accuracy    binary         0.875 Preprocessor1_Model1\n2 roc_auc     binary         0.833 Preprocessor1_Model1\n3 brier_class binary         0.132 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n---\n\nCategories: \n\n- statlearning\n- trees\n- tidymodels\n- string\n\n",
    "supporting": [
      "regr-tree03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}