{
  "hash": "31a59421ca4f0211e7c22f37051a609a",
  "result": {
    "markdown": "---\nexname: tidymodels-tree2\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- stat-learning\n- trees\n- tidymodels\n- string\ndate: '2023-05-09'\nslug: tidymodels-tree2\ntitle: tidymodels-tree2\n\n---\n\n\n\n\n\n\n\n\n# Aufgabe\n\n\nBerechnen Sie folgendes einfache Modell:\n\n1. Entscheidungsbaum\n\n\nModellformel: `am ~ .` (Datensatz `mtcars`)\n\nHier geht es darum, die Geschwindigkeit (und den Ressourcenverbrauch) beim Fitten zu verringern.\nBenutzen Sie dazu folgende Methoden\n\n- Verwenden mehrerer Prozesskerne\n\nHinweise:\n\n- Tunen Sie alle Parameter (die der Engine anbietet). \n- Verwenden Sie Defaults, wo nicht anders angegeben.\n- Führen Sie eine $v=2$-fache Kreuzvalidierung durch (weil die Stichprobe so klein ist).\n- Beachten Sie die [üblichen Hinweise](https://datenwerk.netlify.app/hinweise).\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        1.0.4     ✔ recipes      1.0.5\n✔ dials        1.2.0     ✔ rsample      1.1.1\n✔ dplyr        1.1.1     ✔ tibble       3.2.1\n✔ ggplot2      3.4.2     ✔ tidyr        1.3.0\n✔ infer        1.0.4     ✔ tune         1.1.0\n✔ modeldata    1.1.0     ✔ workflows    1.1.3\n✔ parsnip      1.0.4     ✔ workflowsets 1.0.0\n✔ purrr        1.0.1     ✔ yardstick    1.1.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n```\n:::\n\n```{.r .cell-code}\ndata(mtcars)\nlibrary(tictoc)  # Zeitmessung\nlibrary(doParallel)  # Nutzen mehrerer Kerne\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: foreach\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'foreach'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:purrr':\n\n    accumulate, when\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: iterators\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: parallel\n```\n:::\n:::\n\n\n\n\nFür Klassifikation verlangt Tidymodels eine nominale AV, keine numerische:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars <-\n  mtcars %>% \n  mutate(am = factor(am))\n```\n:::\n\n\n\n\n## Daten teilen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nd_split <- initial_split(mtcars)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\n## Modell(e)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_tree <-\n  decision_tree(mode = \"classification\",\n                cost_complexity = tune(),\n                tree_depth = tune(),\n                min_n = tune())\n```\n:::\n\n\n\n\n\n## Rezept(e)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_plain <- \n  recipe(am ~ ., data = d_train)\n```\n:::\n\n\n\n\n## Resampling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nrsmpl <- vfold_cv(d_train, v = 2)\n```\n:::\n\n\n\n## Workflows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_tree <-\n  workflow() %>%  \n  add_recipe(rec_plain) %>% \n  add_model(mod_tree)\n```\n:::\n\n\n\n\n\n\n## Tuning/Fitting\n\nTuninggrid:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_grid <- grid_regular(extract_parameter_set_dials(mod_tree), levels = 5)\ntune_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 125 × 3\n   cost_complexity tree_depth min_n\n             <dbl>      <int> <int>\n 1    0.0000000001          1     2\n 2    0.0000000178          1     2\n 3    0.00000316            1     2\n 4    0.000562              1     2\n 5    0.1                   1     2\n 6    0.0000000001          4     2\n 7    0.0000000178          4     2\n 8    0.00000316            4     2\n 9    0.000562              4     2\n10    0.1                   4     2\n# ℹ 115 more rows\n```\n:::\n:::\n\n\n\n\n## Ohne Parallelisierung\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nfit_tree <-\n  tune_grid(object = wf_tree,\n            grid = tune_grid,\n            metrics = metric_set(roc_auc),\n            resamples = rsmpl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n→ A | warning: 21 samples were requested but there were 12 rows in the data. 12 will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x21\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ B | warning: 30 samples were requested but there were 12 rows in the data. 12 will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x21\nThere were issues with some computations   A: x25   B: x16\n→ C | warning: 40 samples were requested but there were 12 rows in the data. 12 will be used.\nThere were issues with some computations   A: x25   B: x16\nThere were issues with some computations   A: x25   B: x25   C: x8\nThere were issues with some computations   A: x25   B: x25   C: x13\nThere were issues with some computations   A: x26   B: x25   C: x25\nThere were issues with some computations   A: x29   B: x25   C: x25\nThere were issues with some computations   A: x49   B: x25   C: x25\nThere were issues with some computations   A: x50   B: x42   C: x25\nThere were issues with some computations   A: x50   B: x50   C: x30\nThere were issues with some computations   A: x50   B: x50   C: x49\nThere were issues with some computations   A: x50   B: x50   C: x50\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n38.862 sec elapsed\n```\n:::\n:::\n\n\nca. 45 sec. auf meinem Rechner (4-Kerne-MacBook Pro 2020).\n\n\n## Mit Parallelisierung\n\nParallele Verarbeitung starten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncl <- makePSOCKcluster(4)  # Create 4 clusters\nregisterDoParallel(cl)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nfit_tree2 <-\n  tune_grid(object = wf_tree,\n            grid = tune_grid,\n            metrics = metric_set(roc_auc),\n            resamples = rsmpl)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n17.103 sec elapsed\n```\n:::\n:::\n\n\n\nca. 17 Sekunden - deutlich schneller!\n\n\n\n\n\n\n---\n\nCategories: \n\n- stat-learning\n- trees\n- tidymodels\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}