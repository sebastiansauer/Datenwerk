{
  "hash": "02730385d519543a84e2a1f2b0ed7b67",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: germeval07-de-wordvec-no-resamples\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- 2023\n- textmining\n- datawrangling\n- germeval\n- prediction\n- tidymodels\n- string\ndate: '2023-11-15'\nslug: germeval07\ntitle: germeval07\n\n---\n\n\n\n\n\n\n# Aufgabe\n\nErstellen Sie ein prädiktives Modell für Textdaten. \nNutzen Sie *deutsche Word-Vektoren* für das Feature-Engineering.\n\nNutzen Sie die [GermEval-2018-Daten](https://heidata.uni-heidelberg.de/dataset.xhtml?persistentId=doi:10.11588/data/0B5VML).\n\nDie Daten sind unter CC-BY-4.0 lizensiert. Author: Wiegand, Michael (Spoken Language Systems, Saarland University (2010-2018), Leibniz Institute for the German Language (since 2019)),\n\nDie Daten sind auch über das R-Paket [PradaData](https://github.com/sebastiansauer/pradadata/tree/master/data-raw/GermEval-2018-Data-master) zu beziehen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndata(\"germeval_train\", package = \"pradadata\")\ndata(\"germeval_test\", package = \"pradadata\")\n```\n:::\n\n\nDie AV lautet `c1`. Die (einzige) UV lautet: `text`.\n\n\nHinweise:\n\n- Orientieren Sie sich im Übrigen an den [allgemeinen Hinweisen des Datenwerks](https://datenwerk.netlify.app/hinweise).\n- Nutzen Sie Tidymodels.\n- Nutzen Sie [Wikipedia2Vec](https://wikipedia2vec.github.io/wikipedia2vec/) als Grundlage für die Wordembeddings in deutscher Sprache. Laden Sie die Daten herunter (Achtung: ca. 2.8 GB).\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_train <-\n  germeval_train |> \n  select(id, c1, text)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tictoc)\nlibrary(tidymodels)\nlibrary(syuzhet)\nlibrary(beepr)\nlibrary(textrecipes)\n```\n:::\n\n\n\nEine [Vorlage für ein Tidymodels-Pipeline findet sich hier](https://datenwerk.netlify.app/posts/tidymodels-vorlage2/tidymodels-vorlage2.html).\n\n\n## Deutsche Textvektoren importieren\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwiki_de_embeds_path <- \"/Users/sebastiansaueruser/datasets/word-embeddings/wikipedia2vec/dewiki_20180420_100d.txt\"\n\ntic()\nwiki_de_embeds <- arrow::read_feather(file = \"/Users/sebastiansaueruser/datasets/word-embeddings/wikipedia2vec/part-0.arrow\")\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.558 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(wiki_de_embeds)[1] <- \"word\"\n\nwiki <- as_tibble(wiki_de_embeds)\n```\n:::\n\n\nDie Arrow-Datei ist *viel* schneller zu importieren als die Text-Datei.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nwiki_de_embeds <-\n  data.table::fread(file = wiki_de_embeds_path,\n                    sep = \" \",\n                    header = FALSE,\n                    showProgress = FALSE)  # progressbar\ntoc()\n```\n:::\n\n\n\n\nAls Parquet-Datei speichern (effizienter):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\narrow::write_dataset(wiki_de_embeds, path = \"/Users/sebastiansaueruser/datasets/word-embeddings/wikipedia2vec\",\n                     format = \"arrow\")\ntoc()\n```\n:::\n\n\n\n## Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# model:\nmod1 <-\n  logistic_reg()\n\n# recipe:\nrec1 <-\n  recipe(c1 ~ ., data = d_train) |> \n  update_role(id, new_role = \"id\")  |> \n  #update_role(c2, new_role = \"ignore\") |> \n  step_tokenize(text) %>%\n  step_stopwords(text, language = \"de\", stopword_source = \"snowball\") |> \n\n  step_word_embeddings(text,\n                       embeddings = wiki,\n                       aggregation = \"mean\") |> \n  step_normalize(all_numeric_predictors()) \n\n# workflow:\nwf1 <-\n  workflow() %>% \n  add_model(mod1) %>% \n  add_recipe(rec1)\n```\n:::\n\n\n## Preppen/Baken\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nrec1_prepped <- prep(rec1)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n25.165 sec elapsed\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd_train_baked <-\n  bake(rec1_prepped, new_data = NULL)\n\nhead(d_train_baked)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 102\n     id c1      wordembed_text_V2 wordembed_text_V3 wordembed_text_V4\n  <int> <fct>               <dbl>             <dbl>             <dbl>\n1     1 OTHER               0.557            -0.140            1.24  \n2     2 OTHER              -0.552             0.291            0.195 \n3     3 OTHER              -0.850            -0.473           -0.367 \n4     4 OTHER               0.953            -1.48             0.0741\n5     5 OFFENSE             0.436            -0.885           -0.112 \n6     6 OTHER              -0.453             0.333            0.0949\n# ℹ 97 more variables: wordembed_text_V5 <dbl>, wordembed_text_V6 <dbl>,\n#   wordembed_text_V7 <dbl>, wordembed_text_V8 <dbl>, wordembed_text_V9 <dbl>,\n#   wordembed_text_V10 <dbl>, wordembed_text_V11 <dbl>,\n#   wordembed_text_V12 <dbl>, wordembed_text_V13 <dbl>,\n#   wordembed_text_V14 <dbl>, wordembed_text_V15 <dbl>,\n#   wordembed_text_V16 <dbl>, wordembed_text_V17 <dbl>,\n#   wordembed_text_V18 <dbl>, wordembed_text_V19 <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n\n## Tuninig/Fitting\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nwf1_fit <-\n  wf1 %>% \n  fit(data = d_train)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n10.085 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep()\n```\n:::\n\n\n\nAus Zeitgründen verzichten wir hier auf Tuning.\n\n\n## Test-Set-Güte\n\n\nVorhersagen im Test-Set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\npreds <-\n  predict(wf1_fit, new_data = germeval_test)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n6.318 sec elapsed\n```\n\n\n:::\n:::\n\n\nUnd die Vorhersagen zum Test-Set hinzufügen, damit man `TRUTH` und `ESTIMATE` vergleichen kann:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_test <-\n  germeval_test |> \n  bind_cols(preds) |> \n  mutate(c1 = as.factor(c1))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_metrics <- metric_set(accuracy, f_meas)\nmy_metrics(d_test,\n           truth = c1,\n           estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.715\n2 f_meas   binary         0.533\n```\n\n\n:::\n:::\n\n\n\n## Fazit\n\n\n`wikipedia2vec` ist für die deutsche Sprache vorgekocht. \nDas macht Sinn für einen deutschsprachigen Corpus.\n\n\n\n\n---\n\nCategories: \n\n- 2023\n- textmining\n- datawrangling\n- germeval\n- prediction\n- tidymodels\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}