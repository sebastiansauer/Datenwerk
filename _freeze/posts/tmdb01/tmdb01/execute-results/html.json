{
  "hash": "4c76ecb867e5c1d1648ed20edb0a6d3c",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: tmdb01\nextype: num\nexsolution: r sol\nextol: 0.6\ncategories:\n- ds1\n- tidymodels\n- statlearning\n- tmdb\n- random-forest\n- num\ndate: '2023-05-17'\nslug: tmdb01\ntitle: tmdb01\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nMelden Sie sich an für die Kaggle Competition [TMDB Box Office Prediction -\nCan you predict a movie's worldwide box office revenue?](https://www.kaggle.com/competitions/tmdb-box-office-prediction/overview).\n\nSie benötigen dazu ein Konto; es ist auch möglich, sich mit seinem Google-Konto anzumelden.\n\nBei diesem Prognosewettbewerb geht es darum, vorherzusagen,\nwieviel Umsatz wohl einige Filme machen werden. \nAls Prädiktoren stehen einige Infos wie Budget, Genre, Titel etc. zur Verfügung.\nEine klassische \"predictive Competition\" also :-)\nAllerdings können immer ein paar Schwierigkeiten auftreten ;-)\n\n\n*Aufgabe*\n\n\nErstellen Sie ein *Random-Forest-Modell* mit Tidymodels! Reichen Sie es bei Kaggle ein un berichten Sie den Score!\n\n\n*Hinweise*\n\n<!-- - Nehmen Sie folgende Prädiktoren auf: `budget` und `popularity` -->\n- Verzichten Sie auf Vorverarbeitung. \n\n- Tunen Sie die typischen Parameter. \n- Begrenzen Sie sich auf folgende Prädiktoren.\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-1_ef02384184fdc4504b1a1d73f595bf50'}\n\n```{.r .cell-code}\npreds_chosen <- \n  c(\"id\", \"budget\", \"popularity\", \"runtime\")\n```\n:::\n\n\n\n\n\n- Ausnahme: Log-transformieren Sie `budget`. \n- Tunen Sie die typischen Parameter. \n- Reichen Sie das Modell ein und berichten Sie Ihren Score.\n\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-2_df28671ddf8919747dfb25f1cf91a436'}\n\n```{.r .cell-code}\npreds_chosen <- \n  c(\"id\", \"budget\", \"popularity\", \"runtime\", \"status\", \"revenue\")\n```\n:::\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n### Pakete starten\n\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-3_46dd9d5062502206d59560abd7535a9f'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tictoc)\nlibrary(doParallel)\n```\n:::\n\n\n\n\n\n### Daten importieren\n\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-4_854ee667b3637cf4e9c18db045cde5fe'}\n\n```{.r .cell-code}\nd_train_path <- \"https://raw.githubusercontent.com/sebastiansauer/Lehre/main/data/tmdb-box-office-prediction/train.csv\"\nd_test_path <- \"https://raw.githubusercontent.com/sebastiansauer/Lehre/main/data/tmdb-box-office-prediction/test.csv\"\n\nd_train <- read_csv(d_train_path)\nd_test <- read_csv(d_test_path)\n```\n:::\n\n\nWerfen wir einen Blick in die Daten:\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-5_c3e9c85ecc2f3e98d65700e9412fa6ac'}\n\n```{.r .cell-code}\nglimpse(d_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,000\nColumns: 23\n$ id                    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ belongs_to_collection <chr> \"[{'id': 313576, 'name': 'Hot Tub Time Machine C…\n$ budget                <dbl> 1.40e+07, 4.00e+07, 3.30e+06, 1.20e+06, 0.00e+00…\n$ genres                <chr> \"[{'id': 35, 'name': 'Comedy'}]\", \"[{'id': 35, '…\n$ homepage              <chr> NA, NA, \"http://sonyclassics.com/whiplash/\", \"ht…\n$ imdb_id               <chr> \"tt2637294\", \"tt0368933\", \"tt2582802\", \"tt182148…\n$ original_language     <chr> \"en\", \"en\", \"en\", \"hi\", \"ko\", \"en\", \"en\", \"en\", …\n$ original_title        <chr> \"Hot Tub Time Machine 2\", \"The Princess Diaries …\n$ overview              <chr> \"When Lou, who has become the \\\"father of the In…\n$ popularity            <dbl> 6.575393, 8.248895, 64.299990, 3.174936, 1.14807…\n$ poster_path           <chr> \"/tQtWuwvMf0hCc2QR2tkolwl7c3c.jpg\", \"/w9Z7A0GHEh…\n$ production_companies  <chr> \"[{'name': 'Paramount Pictures', 'id': 4}, {'nam…\n$ production_countries  <chr> \"[{'iso_3166_1': 'US', 'name': 'United States of…\n$ release_date          <chr> \"2/20/15\", \"8/6/04\", \"10/10/14\", \"3/9/12\", \"2/5/…\n$ runtime               <dbl> 93, 113, 105, 122, 118, 83, 92, 84, 100, 91, 119…\n$ spoken_languages      <chr> \"[{'iso_639_1': 'en', 'name': 'English'}]\", \"[{'…\n$ status                <chr> \"Released\", \"Released\", \"Released\", \"Released\", …\n$ tagline               <chr> \"The Laws of Space and Time are About to be Viol…\n$ title                 <chr> \"Hot Tub Time Machine 2\", \"The Princess Diaries …\n$ Keywords              <chr> \"[{'id': 4379, 'name': 'time travel'}, {'id': 96…\n$ cast                  <chr> \"[{'cast_id': 4, 'character': 'Lou', 'credit_id'…\n$ crew                  <chr> \"[{'credit_id': '59ac067c92514107af02c8c8', 'dep…\n$ revenue               <dbl> 12314651, 95149435, 13092000, 16000000, 3923970,…\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(d_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4,398\nColumns: 22\n$ id                    <dbl> 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, …\n$ belongs_to_collection <chr> \"[{'id': 34055, 'name': 'Pokémon Collection', 'p…\n$ budget                <dbl> 0.00e+00, 8.80e+04, 0.00e+00, 6.80e+06, 2.00e+06…\n$ genres                <chr> \"[{'id': 12, 'name': 'Adventure'}, {'id': 16, 'n…\n$ homepage              <chr> \"http://www.pokemon.com/us/movies/movie-pokemon-…\n$ imdb_id               <chr> \"tt1226251\", \"tt0051380\", \"tt0118556\", \"tt125595…\n$ original_language     <chr> \"ja\", \"en\", \"en\", \"fr\", \"en\", \"en\", \"de\", \"en\", …\n$ original_title        <chr> \"ディアルガVSパルキアVSダークライ\", \"Attack of t…\n$ overview              <chr> \"Ash and friends (this time accompanied by newco…\n$ popularity            <dbl> 3.851534, 3.559789, 8.085194, 8.596012, 3.217680…\n$ poster_path           <chr> \"/tnftmLMemPLduW6MRyZE0ZUD19z.jpg\", \"/9MgBNBqlH1…\n$ production_companies  <chr> NA, \"[{'name': 'Woolner Brothers Pictures Inc.',…\n$ production_countries  <chr> \"[{'iso_3166_1': 'JP', 'name': 'Japan'}, {'iso_3…\n$ release_date          <chr> \"7/14/07\", \"5/19/58\", \"5/23/97\", \"9/4/10\", \"2/11…\n$ runtime               <dbl> 90, 65, 100, 130, 92, 121, 119, 77, 120, 92, 88,…\n$ spoken_languages      <chr> \"[{'iso_639_1': 'en', 'name': 'English'}, {'iso_…\n$ status                <chr> \"Released\", \"Released\", \"Released\", \"Released\", …\n$ tagline               <chr> \"Somewhere Between Time & Space... A Legend Is B…\n$ title                 <chr> \"Pokémon: The Rise of Darkrai\", \"Attack of the 5…\n$ Keywords              <chr> \"[{'id': 11451, 'name': 'pok√©mon'}, {'id': 1155…\n$ cast                  <chr> \"[{'cast_id': 3, 'character': 'Tonio', 'credit_i…\n$ crew                  <chr> \"[{'credit_id': '52fe44e7c3a368484e03d683', 'dep…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n`preds_chosen` sind alle Prädiktoren im Datensatz, oder nicht? \nDas prüfen wir mal kurz:\n\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-6_c2628f73c0c6569dac1ba7fca60f1a86'}\n\n```{.r .cell-code}\npreds_chosen %in% names(d_train) %>% \n  all()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nJa, alle Elemente von `preds_chosen` sind  Prädiktoren im (Train-)Datensatz.\n\n\n#### CV\n\nNur um Zeit zu sparen, setzen wir die Anzahl der Folds auf $v=4$.\nBesser wäre z.B. $v=10$.\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-7_fa9fdb2b78309b72e1f6f70fc8ea9430'}\n\n```{.r .cell-code}\ncv_scheme <- vfold_cv(d_train, v = 4)\n```\n:::\n\n\n\n\n### Rezept 1\n\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-8_78ce182dc9ab09924a08f3b4a5bdceb3'}\n\n```{.r .cell-code}\nrec1 <- \n  recipe(revenue ~ budget + popularity + runtime, data = d_train) %>% \n  step_impute_bag(all_predictors()) %>% \n  step_naomit(all_predictors()) \n```\n:::\n\n\n\n\n\nMan beachte, dass noch 21 Prädiktoren angezeigt werden,\nda das Rezept noch nicht auf den Datensatz angewandt (\"gebacken\") wurde.\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-9_c8e5ea2cfd9bcdce273864e6cc2e2916'}\n\n```{.r .cell-code}\ntidy(rec1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  number operation type       trained skip  id              \n   <int> <chr>     <chr>      <lgl>   <lgl> <chr>           \n1      1 step      impute_bag FALSE   FALSE impute_bag_3h7s4\n2      2 step      naomit     FALSE   TRUE  naomit_5oazu    \n```\n\n\n:::\n:::\n\n\n\n\n\nRezept checken:\n\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-10_99c6619cf3dfada716e9d6b5ca2798e1'}\n\n```{.r .cell-code}\nprep(rec1)\n```\n:::\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-11_061955063f64581e16d711bdbbcc27e1'}\n\n```{.r .cell-code}\nd_train_baked <-\n  rec1 %>% \n  prep() %>% \n  bake(new_data = NULL)\n\nglimpse(d_train_baked)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,000\nColumns: 4\n$ budget     <dbl> 1.40e+07, 4.00e+07, 3.30e+06, 1.20e+06, 0.00e+00, 8.00e+06,…\n$ popularity <dbl> 6.575393, 8.248895, 64.299990, 3.174936, 1.148070, 0.743274…\n$ runtime    <dbl> 93, 113, 105, 122, 118, 83, 92, 84, 100, 91, 119, 98, 122, …\n$ revenue    <dbl> 12314651, 95149435, 13092000, 16000000, 3923970, 3261638, 8…\n```\n\n\n:::\n:::\n\n\n\n\n\nFehlende Werte noch übrig?\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-12_d1bd09c35d93acff06c4257840300f61'}\n\n```{.r .cell-code}\nlibrary(easystats)\ndescribe_distribution(d_train_baked) %>% \n  select(Variable, n_Missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nVariable   | n_Missing\n----------------------\nbudget     |         0\npopularity |         0\nruntime    |         0\nrevenue    |         0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### Modell 1: RF\n\n\n\n\n::: {.cell hash='tmdb01_cache/html/rf-model1_3e25bb1dfe744699fe0c78a6ddd5141a'}\n\n```{.r .cell-code}\nmodel1 <- rand_forest(mtry = tune(),\n                        trees = tune(),\n                        min_n = tune()) %>% \n            set_engine('ranger') %>% \n            set_mode('regression')\n```\n:::\n\n\n\n\n### Workflow 1\n\n\n\n::: {.cell hash='tmdb01_cache/html/wf1_a7ab131739c351f2b1da17abf4c57171'}\n\n```{.r .cell-code}\nwf1 <-\n  workflow() %>% \n  add_model(model1) %>% \n  add_recipe(rec1)\n```\n:::\n\n\n\n\n\n\n###  Modell fitten (und tunen)\n\nParallele Verarbeitung starten:\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-13_14031cda71f18d842e33d30cae67e8b6'}\n\n```{.r .cell-code}\ncl <- makePSOCKcluster(4)  # Create 4 clusters\nregisterDoParallel(cl)\n```\n:::\n\n::: {.cell hash='tmdb01_cache/html/tune-grid-wf1_7f9759b245ab48e9e4f2263a00101248'}\n\n```{.r .cell-code}\ntic()\nrf_fit1 <-\n  wf1 %>% \n  tune_grid(resamples = cv_scheme)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n27.47 sec elapsed\n```\n\n\n:::\n:::\n\n\n\nIrgendwelche Probleme oder Hinweise?\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-14_157c9abd1fbe4c372d14dd09ae811835'}\n\n```{.r .cell-code}\nrf_fit1[[\".notes\"]][1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 0 × 3\n# ℹ 3 variables: location <chr>, type <chr>, note <chr>\n```\n\n\n:::\n:::\n\n\nNein; bei mir nicht jedenfalls.\n\n### Bester Kandidat\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-15_ccade3db5e52d976cba2acf8f2b2835d'}\n\n```{.r .cell-code}\nselect_best(rf_fit1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n   mtry trees min_n .config              \n  <int> <int> <int> <chr>                \n1     1  1851    25 Preprocessor1_Model04\n```\n\n\n:::\n:::\n\n\n\n\n### Workflow finalisieren\n\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-16_a823cfea711f6f16907d196cc183f891'}\n\n```{.r .cell-code}\nwf_best <-\n  wf1 %>% \n  finalize_workflow(parameters = select_best(rf_fit1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n```\n\n\n:::\n:::\n\n\n\n\n### Final Fit\n\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-17_033cc8e5463bf2ab6383a7cc434c08a8'}\n\n```{.r .cell-code}\nfit1_final <-\n  wf_best %>% \n  fit(d_train)\n\nfit1_final\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_impute_bag()\n• step_naomit()\n\n── Model ───────────────────────────────────────────────────────────────────────\nRanger result\n\nCall:\n ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~1L,      x), num.trees = ~1851L, min.node.size = min_rows(~25L, x),      num.threads = 1, verbose = FALSE, seed = sample.int(10^5,          1)) \n\nType:                             Regression \nNumber of trees:                  1851 \nSample size:                      3000 \nNumber of independent variables:  3 \nMtry:                             1 \nTarget node size:                 25 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       6.709961e+15 \nR squared (OOB):                  0.6452598 \n```\n\n\n:::\n:::\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-18_df1d29586bbbdbaaa69c9a1f92f97b08'}\n\n```{.r .cell-code}\npreds <-\n  fit1_final %>% \n  predict(d_test)\n```\n:::\n\n\n\n\n### Submission df\n\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-19_8392d28bea8bae630aaf13fde5f65128'}\n\n```{.r .cell-code}\nsubmission_df <-\n  d_test %>% \n  select(id) %>% \n  bind_cols(preds) %>% \n  rename(revenue = .pred)\n\nhead(submission_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n     id   revenue\n  <dbl>     <dbl>\n1  3001  4975575.\n2  3002  6349295.\n3  3003 15825986.\n4  3004 38573272.\n5  3005  4449452.\n6  3006 26780034.\n```\n\n\n:::\n:::\n\n\n\n\nAbspeichern und einreichen:\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-20_2fb42b5ce28b73ab492df57928657cfa'}\n\n```{.r .cell-code}\n#write_csv(submission_df, file = \"submission.csv\")\n```\n:::\n\n\n\n### Kaggle Score\n\nDiese Submission erzielte einen Score von **Score:  2.76961** (RMSLE).\n\n\n::: {.cell hash='tmdb01_cache/html/unnamed-chunk-21_cb23873c49255423bcc57ca26bb20285'}\n\n```{.r .cell-code}\nsol <-  2.76961\n```\n:::\n\n\n\n\n\n\n---\n\nCategories: \n\n- ds1\n- tidymodels\n- statlearning\n- tmdb\n- random-forest\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}