{
  "hash": "88f57adc9738b43ca44af855761fad33",
  "result": {
    "markdown": "---\nexname: tidymodels-ames-05\nextype: num\nexsolution: r exams::fmt(sol)\nexshuffle: no\nextol: 1\nexpoints: 1\ncategories:\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\ndate: '2023-10-11'\nslug: tidymodels-ames-05\ntitle: tidymodels-ames-05\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nBerechnen Sie ein knn-Modell mit tidymodels und zwar anhand des `ames` Datensatzes.\n\nModellgleichung: `log(Sale_Price) ~ ., data = ames_train`.\n\n\n\nGesucht ist R-Quadrat als Maß für die Modellgüte im *TEST-Sample*.\n\n\n\n*Hinweise*:\n\n- Fixieren Sie die Zufallszahlen auf den Startwert 42.\n- Denken Sie daran, die nominal skalierten Variablen in Dummy-Variablen umzurechnen.\n- Denken Sie daran, dass kNN gleich skalierte Prädiktoren benötigt.\n- Nutzen Sie eine v=10,r=1 CV.\n- Verzichten Sie auf weitere Schritte der Vorverarbeitung.\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\nSetup:\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-1_e970ddc13cc3d31a21bdcd054870bfda'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(tictoc)  # Rechenzeit messen, optional\ndata(ames)\n```\n:::\n\n\n\n\n\nAV loggen:\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-2_3f9c8beb002ff8f9ff46087eb5b33086'}\n\n```{.r .cell-code}\names <-\n  ames %>% \n  mutate(Sale_Price = log(Sale_Price, base = 10))\n```\n:::\n\n\n\n\n\nDatensatz aufteilen:\n\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-3_36fada4449a24c32f253b08cb421f573'}\n\n```{.r .cell-code}\nset.seed(42)\ndata_split <- initial_split(ames, strata = \"Sale_Price\")\names_train <- training(data_split)\names_test <- testing(data_split)\n```\n:::\n\n\n\nWorkflow:\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-4_d8e3747c81a19e15131f03f7736da3d3'}\n\n```{.r .cell-code}\names_rec <-\n  recipe(Sale_Price ~ ., data = ames_train) %>%\n  # step_log(Sale_Price, base = 10) %>%   No!\n  step_other(Neighborhood, threshold = .1)  %>%\n  step_dummy(all_nominal()) %>%\n  step_zv(all_predictors()) \n\nknn_model2 <-\n  nearest_neighbor(\n    mode = \"regression\",\n    neighbors = tune()  # Wir tunen \"neighbors\"\n  ) \n\names_wflow2 <-\n  workflow() %>%\n  add_recipe(ames_rec) %>%\n  add_model(knn_model2)\n\names_wflow2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: nearest_neighbor()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n3 Recipe Steps\n\n• step_other()\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nK-Nearest Neighbor Model Specification (regression)\n\nMain Arguments:\n  neighbors = tune()\n\nComputational engine: kknn \n```\n:::\n:::\n\n\n\nCV:\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-5_11b6ded05694e957e167fe2a042b3103'}\n\n```{.r .cell-code}\nset.seed(42)\names_folds <- vfold_cv(ames_train, strata = \"Sale_Price\", v = 2)\names_folds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  2-fold cross-validation using stratification \n# A tibble: 2 × 2\n  splits              id   \n  <list>              <chr>\n1 <split [1098/1099]> Fold1\n2 <split [1099/1098]> Fold2\n```\n:::\n:::\n\n\n\n\nTunen:\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-6_9653e19f31ba816cb3fa96e76c074582'}\n\n```{.r .cell-code}\ntic()\names_grid_search <-\n  tune_grid(\n    knn_model2,\n    ames_rec,\n    resamples = ames_folds,\n    control = control_grid(save_workflow = TRUE),\n    grid = 2,  # 2 Tuningparameterwerte, hier nur zum Zeit sparen\n  )\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.418 sec elapsed\n```\n:::\n\n```{.r .cell-code}\names_grid_search\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Tuning results\n# 2-fold cross-validation using stratification \n# A tibble: 2 × 4\n  splits              id    .metrics         .notes          \n  <list>              <chr> <list>           <list>          \n1 <split [1098/1099]> Fold1 <tibble [4 × 5]> <tibble [0 × 3]>\n2 <split [1099/1098]> Fold2 <tibble [4 × 5]> <tibble [0 × 3]>\n```\n:::\n:::\n\n\n\nModellgüte im Train-Samples über die Tuningparameter hinweg:\n\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-7_6b91f5e7b583e271bf757fcaa159a83c'}\n\n```{.r .cell-code}\nautoplot(ames_grid_search)\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-7-1.png){fig-pos='H' width=384}\n:::\n:::\n\n\n\nFitte besten Modellkandidaten (Paket `tune` >= V1.1.0 benötigt):\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-8_a4a38925b07cb49da8ee13155fbc4b29'}\n\n```{.r .cell-code}\nfit1_final <- fit_best(ames_grid_search)\n```\n:::\n\n\n\nVorhersagen:\n\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-9_11527962e564b424ab922be113fdf166'}\n\n```{.r .cell-code}\npreds <-\n  predict(fit1_final, ames_test)\n```\n:::\n\n\nModellgüte im Test-Sample:\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-10_b99616840fc814837dc2f0426edf63f0'}\n\n```{.r .cell-code}\nfit1_metrics <-\n  preds %>% \n  bind_cols(ames_test %>% select(Sale_Price)) %>% \n  rsq(truth = Sale_Price, estimate = .pred)\n\nfit1_metrics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.739\n```\n:::\n:::\n\n\n\nR-Quadrat:\n\n\n\n::: {.cell hash='tidymodels-ames-05_cache/html/unnamed-chunk-11_884f4bd611332183ce49ca33b1acb73c'}\n\n```{.r .cell-code}\nsol <- fit1_metrics %>% pull(.estimate)\nsol\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.739015\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\nCategories: \n\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}