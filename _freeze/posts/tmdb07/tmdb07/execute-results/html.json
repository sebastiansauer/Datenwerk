{
  "hash": "362fff8eb327fdd6bb39fae703e8cda4",
  "result": {
    "markdown": "---\nexname: tmdb07\nextype: num\nexsolution: r sol\nextol: 0.5\nexpoints: 1\ncategories:\n- ds1\n- tidymodels\n- statlearning\n- tmdb\n- num\ndate: '2023-05-17'\nslug: tmdb07\ntitle: tmdb07\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nMelden Sie sich an für die Kaggle Competition [TMDB Box Office Prediction -\nCan you predict a movie's worldwide box office revenue?](https://www.kaggle.com/competitions/tmdb-box-office-prediction/overview).\n\nSie benötigen dazu ein Konto; es ist auch möglich, sich mit seinem Google-Konto anzumelden.\n\nBei diesem Prognosewettbewerb geht es darum, vorherzusagen,\nwieviel Umsatz wohl einige Filme machen werden. \nAls Prädiktoren stehen einige Infos wie Budget, Genre, Titel etc. zur Verfügung.\nEine klassische \"predictive Competition\" also :-)\nAllerdings können immer ein paar Schwierigkeiten auftreten ;-)\n\n\n*Aufgabe*\n\nErstellen Sie ein *Lineares-Modell* mit *Regularisierung* mit Tidymodels!\n\n\n*Hinweise*\n\n<!-- - Nehmen Sie folgende Prädiktoren auf: `budget` und `popularity` -->\n- Verzichten Sie auf Vorverarbeitung. \n- Tunen Sie die typischen Parameter. \n- Reichen Sie das Modell ein und berichten Sie Ihren Score.\n- Begrenzen Sie sich auf folgende Prädiktoren.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds_chosen <- \n  c(\"id\", \"budget\", \"popularity\", \"runtime\")\n```\n:::\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n# Pakete starten\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(finetune)\nlibrary(doParallel)\nlibrary(tictoc)\n```\n:::\n\n\n\n\n# Daten importieren\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_train_path <- \"https://raw.githubusercontent.com/sebastiansauer/Lehre/main/data/tmdb-box-office-prediction/train.csv\"\nd_test_path <- \"https://raw.githubusercontent.com/sebastiansauer/Lehre/main/data/tmdb-box-office-prediction/test.csv\"\n\nd_train <- read_csv(d_train_path)\nd_test <- read_csv(d_test_path)\n```\n:::\n\n\nWerfen wir einen Blick in die Daten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(d_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,000\nColumns: 23\n$ id                    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ belongs_to_collection <chr> \"[{'id': 313576, 'name': 'Hot Tub Time Machine C…\n$ budget                <dbl> 1.40e+07, 4.00e+07, 3.30e+06, 1.20e+06, 0.00e+00…\n$ genres                <chr> \"[{'id': 35, 'name': 'Comedy'}]\", \"[{'id': 35, '…\n$ homepage              <chr> NA, NA, \"http://sonyclassics.com/whiplash/\", \"ht…\n$ imdb_id               <chr> \"tt2637294\", \"tt0368933\", \"tt2582802\", \"tt182148…\n$ original_language     <chr> \"en\", \"en\", \"en\", \"hi\", \"ko\", \"en\", \"en\", \"en\", …\n$ original_title        <chr> \"Hot Tub Time Machine 2\", \"The Princess Diaries …\n$ overview              <chr> \"When Lou, who has become the \\\"father of the In…\n$ popularity            <dbl> 6.575393, 8.248895, 64.299990, 3.174936, 1.14807…\n$ poster_path           <chr> \"/tQtWuwvMf0hCc2QR2tkolwl7c3c.jpg\", \"/w9Z7A0GHEh…\n$ production_companies  <chr> \"[{'name': 'Paramount Pictures', 'id': 4}, {'nam…\n$ production_countries  <chr> \"[{'iso_3166_1': 'US', 'name': 'United States of…\n$ release_date          <chr> \"2/20/15\", \"8/6/04\", \"10/10/14\", \"3/9/12\", \"2/5/…\n$ runtime               <dbl> 93, 113, 105, 122, 118, 83, 92, 84, 100, 91, 119…\n$ spoken_languages      <chr> \"[{'iso_639_1': 'en', 'name': 'English'}]\", \"[{'…\n$ status                <chr> \"Released\", \"Released\", \"Released\", \"Released\", …\n$ tagline               <chr> \"The Laws of Space and Time are About to be Viol…\n$ title                 <chr> \"Hot Tub Time Machine 2\", \"The Princess Diaries …\n$ Keywords              <chr> \"[{'id': 4379, 'name': 'time travel'}, {'id': 96…\n$ cast                  <chr> \"[{'cast_id': 4, 'character': 'Lou', 'credit_id'…\n$ crew                  <chr> \"[{'credit_id': '59ac067c92514107af02c8c8', 'dep…\n$ revenue               <dbl> 12314651, 95149435, 13092000, 16000000, 3923970,…\n```\n:::\n\n```{.r .cell-code}\nglimpse(d_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,398\nColumns: 22\n$ id                    <dbl> 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, …\n$ belongs_to_collection <chr> \"[{'id': 34055, 'name': 'Pokémon Collection', 'p…\n$ budget                <dbl> 0.00e+00, 8.80e+04, 0.00e+00, 6.80e+06, 2.00e+06…\n$ genres                <chr> \"[{'id': 12, 'name': 'Adventure'}, {'id': 16, 'n…\n$ homepage              <chr> \"http://www.pokemon.com/us/movies/movie-pokemon-…\n$ imdb_id               <chr> \"tt1226251\", \"tt0051380\", \"tt0118556\", \"tt125595…\n$ original_language     <chr> \"ja\", \"en\", \"en\", \"fr\", \"en\", \"en\", \"de\", \"en\", …\n$ original_title        <chr> \"ディアルガVSパルキアVSダークライ\", \"Attack of t…\n$ overview              <chr> \"Ash and friends (this time accompanied by newco…\n$ popularity            <dbl> 3.851534, 3.559789, 8.085194, 8.596012, 3.217680…\n$ poster_path           <chr> \"/tnftmLMemPLduW6MRyZE0ZUD19z.jpg\", \"/9MgBNBqlH1…\n$ production_companies  <chr> NA, \"[{'name': 'Woolner Brothers Pictures Inc.',…\n$ production_countries  <chr> \"[{'iso_3166_1': 'JP', 'name': 'Japan'}, {'iso_3…\n$ release_date          <chr> \"7/14/07\", \"5/19/58\", \"5/23/97\", \"9/4/10\", \"2/11…\n$ runtime               <dbl> 90, 65, 100, 130, 92, 121, 119, 77, 120, 92, 88,…\n$ spoken_languages      <chr> \"[{'iso_639_1': 'en', 'name': 'English'}, {'iso_…\n$ status                <chr> \"Released\", \"Released\", \"Released\", \"Released\", …\n$ tagline               <chr> \"Somewhere Between Time & Space... A Legend Is B…\n$ title                 <chr> \"Pokémon: The Rise of Darkrai\", \"Attack of the 5…\n$ Keywords              <chr> \"[{'id': 11451, 'name': 'pok√©mon'}, {'id': 1155…\n$ cast                  <chr> \"[{'cast_id': 3, 'character': 'Tonio', 'credit_i…\n$ crew                  <chr> \"[{'credit_id': '52fe44e7c3a368484e03d683', 'dep…\n```\n:::\n:::\n\n\n\n\n# Resampling / Cross-Validation-Scheme\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncv_scheme <- vfold_cv(d_train)\n```\n:::\n\n\n\n\nKleine Werte für $v$ wie $v=3$ kann man wählen, um Rechenzeit zu sparen.\nDas ist gerade fürs Debuggen nützlich.\nFür die \"Wirklichkeit\" ist ein höherer Wert besser,\nz.B. $v=10$ (der Defaultwert)\n\n\n\n# Rezept\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec1 <- \n  recipe(revenue ~ budget + popularity + runtime, data = d_train) %>% \n  step_impute_bag(all_predictors()) %>% \n  step_naomit(all_predictors()) \nrec1\n```\n:::\n\n\n\n# Modell\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_lm <- linear_reg(penalty = tune(),\n                       engine = \"glmnet\")\n```\n:::\n\n\n\n# Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf1 <-\n  workflow() %>% \n  add_model(model_lm) %>% \n  add_recipe(rec1)\n```\n:::\n\n\n\n\n\n#  Modell fitten (und tunen)\n\n\n\nParallele Verarbeitung starten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncl <- makePSOCKcluster(4)  # Create 4 clusters\nregisterDoParallel(cl)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nlm_fit1 <-\n  wf1 %>% \n  tune_race_anova(resamples = cv_scheme)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n11.356 sec elapsed\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_fit1 %>% show_best()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n   penalty .metric .estimator      mean     n  std_err .config              \n     <dbl> <chr>   <chr>          <dbl> <int>    <dbl> <chr>                \n1 4.19e-10 rmse    standard   85692371.    10 3789670. Preprocessor1_Model01\n2 4.27e- 9 rmse    standard   85692371.    10 3789670. Preprocessor1_Model02\n3 7.92e- 8 rmse    standard   85692371.    10 3789670. Preprocessor1_Model03\n4 9.30e- 7 rmse    standard   85692371.    10 3789670. Preprocessor1_Model04\n5 1.61e- 6 rmse    standard   85692371.    10 3789670. Preprocessor1_Model05\n```\n:::\n:::\n\n\n# Finalisieren\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf1_final <-\n  wf1 %>% \n  finalize_workflow(select_best(lm_fit1, metric = \"rmse\"))\n```\n:::\n\n\n\n\n\n# Final Fit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1_final <-\n  wf1_final %>% \n  fit(d_train)\n\nfit1_final\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_impute_bag()\n• step_naomit()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  glmnet::glmnet(x = maybe_matrix(x), y = y, family = \"gaussian\") \n\n   Df  %Dev    Lambda\n1   0  0.00 103500000\n2   1  9.63  94340000\n3   1 17.62  85960000\n4   1 24.25  78320000\n5   1 29.76  71370000\n6   1 34.33  65030000\n7   1 38.13  59250000\n8   1 41.28  53990000\n9   1 43.90  49190000\n10  1 46.07  44820000\n11  2 48.25  40840000\n12  2 50.48  37210000\n13  2 52.34  33900000\n14  2 53.88  30890000\n15  2 55.15  28150000\n16  2 56.21  25650000\n17  2 57.09  23370000\n18  2 57.82  21290000\n19  2 58.43  19400000\n20  2 58.93  17680000\n21  2 59.35  16110000\n22  2 59.70  14680000\n23  2 59.99  13370000\n24  2 60.23  12180000\n25  2 60.42  11100000\n26  2 60.59  10120000\n27  2 60.73   9217000\n28  2 60.84   8398000\n29  2 60.93   7652000\n30  2 61.01   6973000\n31  2 61.08   6353000\n32  2 61.13   5789000\n33  2 61.18   5274000\n34  2 61.21   4806000\n35  3 61.25   4379000\n36  3 61.29   3990000\n37  3 61.32   3635000\n38  3 61.34   3313000\n39  3 61.36   3018000\n40  3 61.38   2750000\n41  3 61.39   2506000\n42  3 61.40   2283000\n43  3 61.41   2080000\n44  3 61.42   1896000\n45  3 61.43   1727000\n46  3 61.43   1574000\n\n...\nand 12 more lines.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npreds <-\n  fit1_final %>% \n  predict(d_test)\n```\n:::\n\n\n\n\n\n# Submission df\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission_df <-\n  d_test %>% \n  select(id) %>% \n  bind_cols(preds) %>% \n  rename(revenue = .pred)\n\nhead(submission_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n     id   revenue\n  <dbl>     <dbl>\n1  3001 -3508835.\n2  3002 -7712724.\n3  3003  8857061.\n4  3004 31399842.\n5  3005   101230.\n6  3006 13469780.\n```\n:::\n:::\n\n\n\n\nAbspeichern und einreichen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_csv(submission_df, file = \"submission.csv\")\n```\n:::\n\n\n\n# Kaggle Score\n\nDiese Submission erzielte einen Score von **Score: 6.14787** (RMSLE).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsol <- 6.14787\n```\n:::\n\n\n\n\n\n\n\n---\n\nCategories: \n\n- ds1\n- tidymodels\n- statlearning\n- tmdb\n- num\n\n",
    "supporting": [
      "tmdb07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}