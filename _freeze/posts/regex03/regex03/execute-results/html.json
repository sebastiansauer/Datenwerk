{
  "hash": "3beccba4eabbc145402686370865ba1a",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: regex03\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- regex\n- textmining\n- string\ndate: '2023-11-08'\nslug: regex03\ntitle: regex03\n\n---\n\n\n\n\n\n# Aufgabe\n\n\nGegeben sein ein String-Vektor, `x`. Dieser Vektor enthält Vornamen mehrerer Personen.\nExtrahieren Sie den ersten Vornamen jeder Person.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <-\n  c(\"Anna\",\n    \"Berta Brigitte\",\n    \"Carla-Klara\",\n    \"Dana Dora Diana\",\n    \"Emilia E\",\n    \"F-Franziska\",\n    \" Gabi\",\n    \"Jana die Erste\")\n```\n:::\n\n\n\nHinweise:\n\n- Orientieren Sie sich im Übrigen an den [allgemeinen Hinweisen des Datenwerks](https://datenwerk.netlify.app/hinweise).\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)  # Teil von tidyvserse\nlibrary(purrr)\n```\n:::\n\n\nLiest man alle Zeichen vom Typ `w` aus, so sind Bindestriche *nicht* enthalten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_match(x, \"\\\\w+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]    \n[1,] \"Anna\"  \n[2,] \"Berta\" \n[3,] \"Carla\" \n[4,] \"Dana\"  \n[5,] \"Emilia\"\n[6,] \"F\"     \n[7,] \"Gabi\"  \n[8,] \"Jana\"  \n```\n\n\n:::\n:::\n\n\nDaher macht es vermutlich mehr Sinn, umgekehrt zu sagen, was man nicht will, nämlich Leerzeichen, also `s`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_match(x, \"[^\\\\s]+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]         \n[1,] \"Anna\"       \n[2,] \"Berta\"      \n[3,] \"Carla-Klara\"\n[4,] \"Dana\"       \n[5,] \"Emilia\"     \n[6,] \"F-Franziska\"\n[7,] \"Gabi\"       \n[8,] \"Jana\"       \n```\n\n\n:::\n:::\n\n\nDie Ausgabe kann man noch vereinfachen, in dem wir aus der resultieren Matrix (Tabelle)\ndie ersten Spalte auswählen:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Anna\"        \"Berta\"       \"Carla-Klara\" \"Dana\"        \"Emilia\"     \n[6] \"F-Franziska\" \"Gabi\"        \"Jana\"       \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n---\n\nCategories: \n\n- regex\n- textmining\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}