{
  "hash": "e1f4b0712e58867929faad9fddb301de",
  "result": {
    "markdown": "---\nexname: count-lexicon\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- textmining\n- nlp\n- string\ndate: '2023-05-23'\nslug: count-lexicon\ntitle: count-lexicon\n\n---\n\n\n\n\n\n# Aufgabe\n\nGegeben eines (mehrelementigen) Strings, `my_string`, und eines Lexicons, `my_lexicon`, zählen Sie, wie häufig sich ein Wort aus dem Lexikon in einem Element des Strings wiederfindet.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_string <-\n  c(\"Heute ist ein schöner Tag\", \"Was geht in dieser Woche?\")\n\n\nmy_lexicon <- c(\"Tag\", \"Woche\", \"Jahr\")\n```\n:::\n\n\n\n\nHinweise:\n\n- Orientieren Sie sich im Übrigen an den [allgemeinen Hinweisen des Datenwerks](https://datenwerk.netlify.app/hinweise).\n- Nutzen Sie die Funktion `count_lexicon` aus `{{prada}}`. Das Paket können Sie [hier](https://github.com/sebastiansauer/prada) herunterladen/installieren.\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(prada)\nlibrary(purrr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_int(my_string,  \n        ~ count_lexicon(.x, my_lexicon))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1\n```\n:::\n:::\n\n\n\nSo können Sie sich den Quellcode einer Funktion, z.B. `count_lexicon()` anschauen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_lexicon\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction(txt, lexicon){\n  # convert strings to lower letters:\n  txt <- tolower(txt)\n  lexicon <- tolower(lexicon)\n\n  # build regex query:\n  lexicon_regex <- paste0(\"^\", lexicon, \"$\", collapse = \"|\")\n\n  # split string into words:\n  string_in_words <- unlist(stringr::str_split(txt, pattern = stringr::boundary(\"word\")))\n\n  # search:\n  pattern_detected_in_string_count <- sum(stringr::str_detect(string_in_words, pattern = lexicon_regex))\n\n  # return:\n  return(pattern_detected_in_string_count)\n}\n<bytecode: 0x7fc57e3e9cb0>\n<environment: namespace:prada>\n```\n:::\n:::\n\n\n\nIn dem Paket gibt es noch zwei Varianten für diese Funktion, die auf einem Join aufbauen.\n\n\n\n\n---\n\nCategories: \n\n- textmining\n- nlp\n- string\n\n",
    "supporting": [
      "count-lexicon_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}