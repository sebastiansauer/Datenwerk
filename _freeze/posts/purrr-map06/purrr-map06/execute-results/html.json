{
  "hash": "a289a3cc4604be8f1794afdbe5012d0f",
  "result": {
    "markdown": "---\nextype: string\nexsolution: NA\nexname: purrr-map06\nexpoints: 1\ndate: '2022-10-24'\nslug: purrr-map06\ntitle: purrr-map06\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n\n\n# Exercise\n\nErstellen Sie eine Tabelle mit mit folgenden Spalten:\n\n- ID-Spalte: $1,2,..., 10$\n- Eine Spalte mit Namem `ds` (`ds` wie Plural von Datensatz), die als *geschachtelt* (nested) pro Element jeweils einen der folgenden Datensätze enthält: `mtcars`, `iris`, `chickweight`, `ToothGrowth` (alle in R enthalten)\n\nBerechnen Sie eine Spalte, die die Anzahl der Spalten von `ds` zählt!\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Solution\n\n\nHier sind einige Datensätze, in einer Liste zusammengefasst:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds <- list(mtcars = mtcars, iris = iris, chickweight =  ChickWeight, toothgrowth = ToothGrowth)\n```\n:::\n\n\n\nDaraus erstellen wir eine Tabelle mit Listenspalte für die Daten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- \n  tibble(id = 1:length(ds),\n         ds = ds)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 <- \n  d %>% \n  mutate(n_col = map(ds, ncol)) \n\nhead(d2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n     id ds                   n_col       \n  <int> <named list>         <named list>\n1     1 <df [32 × 11]>       <int [1]>   \n2     2 <df [150 × 5]>       <int [1]>   \n3     3 <nfnGrpdD [578 × 4]> <int [1]>   \n4     4 <df [60 × 3]>        <int [1]>   \n```\n:::\n:::\n\n\nEntnesten wir noch `n_col`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 %>% \n  unnest(n_col)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n     id ds                   n_col\n  <int> <named list>         <int>\n1     1 <df [32 × 11]>          11\n2     2 <df [150 × 5]>           5\n3     3 <nfnGrpdD [578 × 4]>     4\n4     4 <df [60 × 3]>            3\n```\n:::\n:::\n\n\n\n\n\n---\n\nCategories: \n\n~\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}