{
  "hash": "8ceaa44b9a854f2c32645303aa045706",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: wfsets1\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nexpoints: 1\ncategories:\n- R\n- statlearning\n- tidymodels\n- wfsets\n- template\ndate: '2023-11-30'\ntitle: wfsets1\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nBerechnen Sie die Vorhersagegüte (RMSE) für folgende Lernalgorithmen mittesl `tidymodels`:\n\n- lineares Modell\n\nModellgleichung: `body_mass_g ~ bill_length_mm, data = d_train`.\n\nNutzen Sie minimale Vorverarbeitung im Rahmen zweier Rezepte.\n\nNutzen Sie ein *Workflowset.*\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(tictoc)  # Zeitmessung\ndata(penguins, package = \"palmerpenguins\")\n```\n:::\n\n\n## Daten\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <-\n  penguins %>% \n  drop_na()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd_split <- initial_split(d)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\n## Modelle\n\n\nLineares Modell:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_lin <- linear_reg()\n\nmod_knn <- nearest_neighbor(mode = \"regression\",\n                                  neighbors = tune())\n```\n:::\n\n\n\n## Rezepte\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_basic <- recipe(body_mass_g ~ bill_length_mm, data = d_train) %>% \n         step_normalize(all_predictors())\n\nrec_basic\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_plain <- recipe(body_mass_g ~ bill_length_mm, data = d_train)\n```\n:::\n\n\n\n## Resampling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsmpls <- vfold_cv(d_train, v = 5)\n```\n:::\n\n\n\n## Workflow Set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_set <-\n  workflow_set(\n    preproc = list(rec_simple = rec_basic,\n                   rec_plain = rec_plain),\n    models = list(mod_lm = mod_lin)\n  )\n\nwf_set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id          info             option    result    \n  <chr>             <list>           <list>    <list>    \n1 rec_simple_mod_lm <tibble [1 × 4]> <opts[0]> <list [0]>\n2 rec_plain_mod_lm  <tibble [1 × 4]> <opts[0]> <list [0]>\n```\n\n\n:::\n:::\n\n\n\n## Fitten\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nwf_fit <-\n  wf_set %>% \n  workflow_map(resamples = rsmpls)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1.261 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\nwf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id          info             option    result   \n  <chr>             <list>           <list>    <list>   \n1 rec_simple_mod_lm <tibble [1 × 4]> <opts[1]> <rsmp[+]>\n2 rec_plain_mod_lm  <tibble [1 × 4]> <opts[1]> <rsmp[+]>\n```\n\n\n:::\n:::\n\n\n\nCheck:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_fit %>% pluck(\"result\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# Resampling results\n# 5-fold cross-validation \n# A tibble: 5 × 4\n  splits           id    .metrics         .notes          \n  <list>           <chr> <list>           <list>          \n1 <split [199/50]> Fold1 <tibble [2 × 4]> <tibble [0 × 3]>\n2 <split [199/50]> Fold2 <tibble [2 × 4]> <tibble [0 × 3]>\n3 <split [199/50]> Fold3 <tibble [2 × 4]> <tibble [0 × 3]>\n4 <split [199/50]> Fold4 <tibble [2 × 4]> <tibble [0 × 3]>\n5 <split [200/49]> Fold5 <tibble [2 × 4]> <tibble [0 × 3]>\n\n[[2]]\n# Resampling results\n# 5-fold cross-validation \n# A tibble: 5 × 4\n  splits           id    .metrics         .notes          \n  <list>           <chr> <list>           <list>          \n1 <split [199/50]> Fold1 <tibble [2 × 4]> <tibble [0 × 3]>\n2 <split [199/50]> Fold2 <tibble [2 × 4]> <tibble [0 × 3]>\n3 <split [199/50]> Fold3 <tibble [2 × 4]> <tibble [0 × 3]>\n4 <split [199/50]> Fold4 <tibble [2 × 4]> <tibble [0 × 3]>\n5 <split [200/49]> Fold5 <tibble [2 × 4]> <tibble [0 × 3]>\n```\n\n\n:::\n:::\n\n\n\n## Bester Kandidat\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(wf_fit)\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-11-1.png){fig-pos='H' width=384}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(wf_fit, select_best = TRUE)\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-12-1.png){fig-pos='H' width=384}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(wf_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 9\n  wflow_id        .config preproc model .metric .estimator    mean     n std_err\n  <chr>           <chr>   <chr>   <chr> <chr>   <chr>        <dbl> <int>   <dbl>\n1 rec_simple_mod… Prepro… recipe  line… rmse    standard   655.        5 23.0   \n2 rec_simple_mod… Prepro… recipe  line… rsq     standard     0.357     5  0.0336\n3 rec_plain_mod_… Prepro… recipe  line… rmse    standard   655.        5 23.0   \n4 rec_plain_mod_… Prepro… recipe  line… rsq     standard     0.357     5  0.0336\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_results(wf_fit, rank_metric = \"rmse\") %>% \n  filter(.metric == \"rmse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 9\n  wflow_id          .config .metric  mean std_err     n preprocessor model  rank\n  <chr>             <chr>   <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int>\n1 rec_simple_mod_lm Prepro… rmse     655.    23.0     5 recipe       line…     1\n2 rec_plain_mod_lm  Prepro… rmse     655.    23.0     5 recipe       line…     2\n```\n\n\n:::\n:::\n\n\n\n\n\n## Last Fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_wf <-\n  wf_fit %>% \n  extract_workflow(\"rec_simple_mod_lm\")\n```\n:::\n\n\n\nFinalisieren müssen wir diesen Workflow nicht, da er keine Tuningparameter hatte.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_final <-\n  best_wf %>% \n  last_fit(d_split)\n```\n:::\n\n\n\n## Modellgüte im Test-Set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(fit_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard     653.    Preprocessor1_Model1\n2 rsq     standard       0.341 Preprocessor1_Model1\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}