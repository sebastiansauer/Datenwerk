{
  "hash": "e3e96b87b4e389bd93114da123f623ec",
  "result": {
    "markdown": "---\nexname: tidymodels-poly01\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nexpoints: 1\ncategories:\n- R\n- statlearning\n- tidymodels\n- num\ndate: '2023-05-17'\nslug: tidymodels-poly01\ntitle: tidymodels-poly01\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nFitten Sie ein Polynomial-Modell für folgende Modellgleichung:\n\n`body_mass_g ~ bill_length_mm`.\n\nGesucht ist der optimale Polynomgrad im Train-Sample (optimal hinsichtlich minimalem Prognosefehler).\n\nHinweise:\n\n- Datensatz `penguins` (palmerpenguins)\n- Verwenden Sie Tidymodels\n- Fitten Sie Polynome des Grades 1 bis 10.\n- Definieren Sie die Polynomegrade als Tuningparameter.\n- Beziehen Sie sich auf RMSE als Kennzahl der Modellgüte.\n- Entfernen Sie fehlende Werte in den Prädiktoren\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\nSetup:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-1_58b214cd51153f41b6bb4ea1064573de'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(penguins, package = \"palmerpenguins\")\n```\n:::\n\n\n\nRezept:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-2_ff92acea72e224d7c7b355397d387cab'}\n\n```{.r .cell-code}\nrec1 <- \n  recipe(body_mass_g ~ bill_length_mm, data = penguins) %>% \n  step_naomit(all_predictors()) %>% \n  step_poly(all_predictors(), degree = tune()) %>% \n  update_role(contains(\"_poly_\"), new_role = \"predictor\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: No columns were selected in `update_role()`.\n```\n:::\n:::\n\n\n\n\nCheck:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-3_372298e45187b6b8ed019e19553ee076'}\n\n```{.r .cell-code}\nd_baked <- bake(prep(rec1), new_data = NULL)\n```\n:::\n\n\n\n\nWorkflow:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-4_bd03b8e66bf7dfec290b9f4d225823d7'}\n\n```{.r .cell-code}\nwf1 <-\n  workflow() %>% \n  add_model(linear_reg()) %>% \n  add_recipe(rec1)\n```\n:::\n\n\n\nRezepte mit Tuningparametern kann man nicht preppen/backen.\n\n\n\nTuning:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-5_868fe08a07868c56c7e4283cd048ac0b'}\n\n```{.r .cell-code}\ntune1 <-\n  tune_grid(\n    wf1,\n    resamples = vfold_cv(data = penguins),\n    metrics = metric_set(rmse),\n    grid = grid_regular(degree(range = c(1, 10)),\n                               levels = 10)\n  )\n```\n:::\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-6_082590959688212f3c4095273af28316'}\n\n```{.r .cell-code}\nautoplot(tune1)\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-6-1.png){fig-pos='H' width=384}\n:::\n:::\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-7_7b19c52c94a90048969bcd1962467195'}\n\n```{.r .cell-code}\nshow_best(tune1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n  degree .metric .estimator  mean     n std_err .config              \n   <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1      2 rmse    standard    645.    10    18.6 Preprocessor02_Model1\n2      5 rmse    standard    647.    10    15.8 Preprocessor05_Model1\n3      1 rmse    standard    648.    10    22.7 Preprocessor01_Model1\n4      4 rmse    standard    649.    10    19.4 Preprocessor04_Model1\n5      3 rmse    standard    652.    10    20.9 Preprocessor03_Model1\n```\n:::\n:::\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-8_b9f56313d509167839c82ba2163bbca9'}\n\n```{.r .cell-code}\nsol <- show_best(tune1)$degree[1]\nsol\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n\nDie Antwort lautet: 2.\n\n\n\n---\n\nCategories: \n\n- R\n- statlearning\n- tidymodels\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}