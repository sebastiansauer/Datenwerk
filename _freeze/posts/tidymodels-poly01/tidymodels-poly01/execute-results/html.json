{
  "hash": "e3e96b87b4e389bd93114da123f623ec",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: tidymodels-poly01\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nexpoints: 1\ncategories:\n- R\n- statlearning\n- tidymodels\n- num\ndate: '2023-05-17'\nslug: tidymodels-poly01\ntitle: tidymodels-poly01\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nFitten Sie ein Polynomial-Modell für folgende Modellgleichung:\n\n`body_mass_g ~ bill_length_mm`.\n\nGesucht ist der optimale Polynomgrad im Train-Sample (optimal hinsichtlich minimalem Prognosefehler).\n\nHinweise:\n\n- Datensatz `penguins` (palmerpenguins)\n- Verwenden Sie Tidymodels\n- Fitten Sie Polynome des Grades 1 bis 10.\n- Definieren Sie die Polynomegrade als Tuningparameter.\n- Beziehen Sie sich auf RMSE als Kennzahl der Modellgüte.\n- Entfernen Sie fehlende Werte in den Prädiktoren\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\nSetup:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-1_0caa10a8b36897b3708ad732b04ee6ca'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(penguins, package = \"palmerpenguins\")\n```\n:::\n\n\n\nRezept:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-2_5912005015eefc1a3f833a0251512d6e'}\n\n```{.r .cell-code}\nrec1 <- \n  recipe(body_mass_g ~ bill_length_mm, data = penguins) %>% \n  step_naomit(all_predictors()) %>% \n  step_poly(all_predictors(), degree = tune()) %>% \n  update_role(contains(\"_poly_\"), new_role = \"predictor\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: No columns were selected in `update_role()`.\n```\n\n\n:::\n:::\n\n\n\n\nCheck:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-3_23d607b298676f8f84ee3db9213b9322'}\n\n```{.r .cell-code}\nd_baked <- bake(prep(rec1), new_data = NULL)\n```\n:::\n\n\n\n\nWorkflow:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-4_7f82edbdcd1ff3414992535033274219'}\n\n```{.r .cell-code}\nwf1 <-\n  workflow() %>% \n  add_model(linear_reg()) %>% \n  add_recipe(rec1)\n```\n:::\n\n\n\nRezepte mit Tuningparametern kann man nicht preppen/backen.\n\n\n\nTuning:\n\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-5_72fc303b27c57d8a6ddaf0940eade134'}\n\n```{.r .cell-code}\ntune1 <-\n  tune_grid(\n    wf1,\n    resamples = vfold_cv(data = penguins),\n    metrics = metric_set(rmse),\n    grid = grid_regular(degree(range = c(1, 10)),\n                               levels = 10)\n  )\n```\n:::\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-6_7e6f8dea4609c94704b12573d52c511e'}\n\n```{.r .cell-code}\nautoplot(tune1)\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-6-1.png){fig-pos='H' width=384}\n:::\n:::\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-7_2c8b377849c80662c8eeddb7a6d6100e'}\n\n```{.r .cell-code}\nshow_best(tune1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  degree .metric .estimator  mean     n std_err .config              \n   <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1      2 rmse    standard    642.    10    23.5 Preprocessor02_Model1\n2      1 rmse    standard    644.    10    27.4 Preprocessor01_Model1\n3      5 rmse    standard    646.    10    23.9 Preprocessor05_Model1\n4      4 rmse    standard    648.    10    25.4 Preprocessor04_Model1\n5      3 rmse    standard    654.    10    27.8 Preprocessor03_Model1\n```\n\n\n:::\n:::\n\n::: {.cell hash='tidymodels-poly01_cache/html/unnamed-chunk-8_7f76ac10ecc12461fb9311281ba7bc8d'}\n\n```{.r .cell-code}\nsol <- show_best(tune1)$degree[1]\nsol\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\nDie Antwort lautet: 2.\n\n\n\n---\n\nCategories: \n\n- R\n- statlearning\n- tidymodels\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}