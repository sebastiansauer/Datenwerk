{
  "hash": "2893296539477e58366f9d0b8feddca2",
  "result": {
    "engine": "knitr",
    "markdown": "---\n# gleich diese Datei in einem Ordner mit Namen der Aufgabe abspeichern!\ndate: 2024-09-10  # HEUTIGES DATUM EINTRAGEN, nicht \"today\"\ndraft: FALSE   # ACHTUNG DRAFT STEHT AUF TRUE!\ntitle: samples-nyc \nexecute: \n  cache: true\n  eval: true \nhighlight-style: arrow \ncache: true\ntoc: true\nnumber-sections: true\nextype: string\nexsolution: \"\"\nexshuffle: no\ncategories:\n- inference  # ENTER CATEGORIES HERE\n- story\n- yacsda\n\nbibliography: \"../../library-ses.bib\"\n\n\n---\n\n\n\n\n# Aufgabe\n\n\nDrei Studierende arbeiten für die New Yorker Flughafenbehörde als Werkstudenten.\nFragt ihre Chefin eines Tages: \n\"Welcher der drei New Yorker Flughäfen hat im Schnitt die höchste Verspätung?\"\n\n\n\nStudi A überlegt: \"Ich schaue mir mal die Verspätung vom 1. Januar an, das geht am schnellsten, den Wert nehme ich dann als Schätzwert für die Verspätung des ganzen Jahres.\"\n\nStudi B argumentiert so: \"Hm, ich schaue mir mal die ersten 1000 Flüge des Jahres und diesen Mittelwert nehme ich als Schätzwert für die Verspätung des ganzen Jahres.\"\n\n\nStudi C hingegen ist folgender Meinung: \"Ich ziehe mal eine Zufallsstichprobe, habe ich in der Statistik-Vorlesung gelernt. N=100 sollte genügen.\"\n\n\nDie Chefin bezieht sich übrigens auf das Jahr 2023.\n\n\n**Aufgabe:** Welcher der drei Studis macht die beste Vorhersage? Rechnen Sie nach und begründen Sie Ihre Meinung!\n\n\n\n# Lösung\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights23)\ndata(\"flights\")\nlibrary(tidyverse)\n```\n:::\n\n\nWie viele Flüge gab es?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 435352\n```\n\n\n:::\n:::\n\n\nViele!\n\n\nWelche Variablens gibt es im Datensatz?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 435,352\nColumns: 19\n$ year           <int> 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 1, 18, 31, 33, 36, 503, 520, 524, 537, 547, 549, 551, 5…\n$ sched_dep_time <int> 2038, 2300, 2344, 2140, 2048, 500, 510, 530, 520, 545, …\n$ dep_delay      <dbl> 203, 78, 47, 173, 228, 3, 10, -6, 17, 2, -10, -9, -7, -…\n$ arr_time       <int> 328, 228, 500, 238, 223, 808, 948, 645, 926, 845, 905, …\n$ sched_arr_time <int> 3, 135, 426, 2352, 2252, 815, 949, 710, 818, 852, 901, …\n$ arr_delay      <dbl> 205, 53, 34, 166, 211, -7, -1, -25, 68, -7, 4, -13, -14…\n$ carrier        <chr> \"UA\", \"DL\", \"B6\", \"B6\", \"UA\", \"AA\", \"B6\", \"AA\", \"UA\", \"…\n$ flight         <int> 628, 393, 371, 1053, 219, 499, 996, 981, 206, 225, 800,…\n$ tailnum        <chr> \"N25201\", \"N830DN\", \"N807JB\", \"N265JB\", \"N17730\", \"N925…\n$ origin         <chr> \"EWR\", \"JFK\", \"JFK\", \"JFK\", \"EWR\", \"EWR\", \"JFK\", \"EWR\",…\n$ dest           <chr> \"SMF\", \"ATL\", \"BQN\", \"CHS\", \"DTW\", \"MIA\", \"BQN\", \"ORD\",…\n$ air_time       <dbl> 367, 108, 190, 108, 80, 154, 192, 119, 258, 157, 164, 1…\n$ distance       <dbl> 2500, 760, 1576, 636, 488, 1085, 1576, 719, 1400, 1065,…\n$ hour           <dbl> 20, 23, 23, 21, 20, 5, 5, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6,…\n$ minute         <dbl> 38, 0, 44, 40, 48, 0, 10, 30, 20, 45, 59, 0, 59, 0, 0, …\n$ time_hour      <dttm> 2023-01-01 20:00:00, 2023-01-01 23:00:00, 2023-01-01 2…\n```\n\n\n:::\n:::\n\n\nNehmen wir `dep_delay` als Zielvariable.\nDie Chefin hat nicht genau gesagt, welche Variable sie meint. Da sieht man es mal wieder: Man muss Annahmen treffen. Ist aber auch schön, denn man kann selber entscheiden, was einem besser gefällt.\n\n\n## Los geht's\n\n## Studentin A\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(month == 1, day == 1) |> \n  select(dep_delay, origin) |> \n  drop_na() |> \n  group_by(origin) |> \n  summarise(dep_delay = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  origin dep_delay\n  <chr>      <dbl>\n1 EWR        23.7 \n2 JFK        18.8 \n3 LGA         9.07\n```\n\n\n:::\n:::\n\n\n\n\"Klares (?) Ergebnis! EWR, also Newark, hat die größte Verspätung!\"\n\n\n### Student B\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(dep_delay, origin) |> \n  drop_na() |> \n  slice(1:1000) |> \n  group_by(origin) |> \n  summarise(dep_delay = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  origin dep_delay\n  <chr>      <dbl>\n1 EWR        26.1 \n2 JFK        19.9 \n3 LGA         9.41\n```\n\n\n:::\n:::\n\n\n\"Glasklares (?) Ergebnis! EWR, also Newark, hat die größte Verspätung!\"\n\n\n### Studentin C\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(73)\nflights |> \n  select(dep_delay, origin) |> \n  drop_na() |> \n  sample_n(size = 100)  |> \n  group_by(origin) |> \n  summarise(dep_delay = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  origin dep_delay\n  <chr>      <dbl>\n1 EWR         2.04\n2 JFK        14.3 \n3 LGA         8.85\n```\n\n\n:::\n:::\n\n\n\n\"Glasklares (?) Ergebnis! JFK, also John-F-Kennedy, hat die größte Verspätung! Newark ist hingegen superpünktlich!\"\n\n\n\n## Moment\n\nLeider entbrennt hier ein Streit.\nVermutlich einige Eifersuchtsmomente hinter den Kulissen, aber wir wissen nichts Genaues.\n\n\n\n\nStudentin A: \"So ein Quatsch, C, du hast die Zufallszahl auf 73 festgelegt, warum gerade diese Zahl?! Bei einer anderen Zahl könnte ein ganz andere Stichprobe und damit ein ganz anderes Ergebnis herauskommen!\"\n\n\nStudentin C: \"Ich habe kürzlich gelernt, dass [nicht 42, sondern 73 die beste Zahl ist](https://www.youtube.com/watch?v=hvn8-LzqKQo&t=7s). Also musste ich 73 nehmen!\n\nStudent B: \"Aber was *käme* heraus, wenn du 42 als Zufallszahl nehmen würdest, nur mal theoretisch?\"\n\n\nStudentin C: \"Äh...\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nflights |> \n  select(dep_delay, origin) |> \n  drop_na() |> \n  sample_n(size = 100)  |> \n  group_by(origin) |> \n  summarise(dep_delay = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  origin dep_delay\n  <chr>      <dbl>\n1 EWR        28.3 \n2 JFK         7.52\n3 LGA         9.94\n```\n\n\n:::\n:::\n\n\n\nStudentin C: \"Äh, also... Das spielt doch gar keine Rolle, was rauskommt, denn *bei jeder Zahl* kann ja was anderes rauskommen.\"\n\n\nA: \"Du müsstest also dein Vorgehen ändern... Jede Zahl ausprobieren oder so.\"\n\n\nC: \"Liebe A, du mit deinem 1. Januar, das ist doch totaler Quatsch, an deiner Stelle wäre ich lieber still.\"\n\n\nA: \"Aber es kommt was Gutes raus mit meiner Methode!\"\n\nB: \"Woher willst du überhaupt wissen, ob es was Gutes ist?\"\n\nA: \"Wirst schon sehen!\"\n\n\nC: \"Puh, also gut, ich rechne noch mal. Ich zieh einfach ne Menge Stichproben, mit zufälligen Seed-Nummern ...\"\n\nA: \"Whatever!\"\n\nC: \"Moment.., hier kommt Newark, EWR.\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_reps <- 100  # Anzahl von Stichproben\nsample_size <- 100  # Umfang jeder Stichprobe\n\newr_viele_schaetzwerte <-\n replicate(n_reps, flights |> \n                      select(dep_delay, origin) |> \n                      filter(origin == \"EWR\") |> \n                      drop_na() |> \n                      sample_n(size = sample_size) |> \n                      summarise(dep_delay = mean(dep_delay))) |> \n  as.numeric() |> \n  mean()\n\newr_viele_schaetzwerte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15.035\n```\n\n\n:::\n:::\n\n\n\nB: \"Wow, C, du bist halt schon die Statistik-Checkerin...\".\n\n\nA: \"Hey B, hör gefälligst mit diesen Schmeicheleien auf!\"\n\n\nB: \"Jedenfalls ist das Ergebnis ... anders als unsere!\"\n\n\nC: \"Hier noch mal für die anderen Flughäfen. JFK:\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\njfk_viele_schaetzwerte <-\n replicate(n_reps, flights |> \n                      select(dep_delay, origin) |> \n                      filter(origin == \"JFK\") |> \n                      drop_na() |> \n                      sample_n(size = sample_size) |> \n                      summarise(dep_delay = mean(dep_delay))) |> \n  as.numeric() |> \n  mean()\n\njfk_viele_schaetzwerte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.1487\n```\n\n\n:::\n:::\n\n\n\nC: \"Und LaGuardia:\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlga_viele_schaetzwerte <-\n replicate(n_reps, flights |> \n                      select(dep_delay, origin) |> \n                      filter(origin == \"LGA\") |> \n                      drop_na() |> \n                      sample_n(size = sample_size) |> \n                      summarise(dep_delay = mean(dep_delay))) |> \n  as.numeric() |> \n  mean()\n\nlga_viele_schaetzwerte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.7901\n```\n\n\n:::\n:::\n\n\nC: \"Also, unterm Strich, LGA rules! LGA hat die geringste Verspätung im Schnitt, nach meiner Rechnung.\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlga_viele_schaetzwerte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.7901\n```\n\n\n:::\n\n```{.r .cell-code}\newr_viele_schaetzwerte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15.035\n```\n\n\n:::\n\n```{.r .cell-code}\njfk_viele_schaetzwerte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.1487\n```\n\n\n:::\n:::\n\n\n\n\n## Fazit?\n\n\nA: \"Okay, meine Methode war ein bisschen zu einfach. Aber hat auch am wenigsten Arbeit gemacht. Das nennt man wirtschaftlich vorgehen, nur darum geht's im Business. Also hab ich trotzdem gewonnen!\"\n\n\n\nB: \"Nope, mein Vorgehen ist in Wirklichkeit das Beste. Zumindest wenn ich von *jedem* Monat 100 Flüge genommen hätte, dann hätte sich sicher alles super ausgeglichen, Jahreszeiten und so. Und es wäre nicht so viel Aufwand wie die zich Tausend Stichproben, die C gezogen hat.\"\n\n\n\nC: \"Kann ja alles sein, aber mein Vorgehen hat am meisten Spaß gemacht. Übrigens B, deine neue Idee müsste man mal untersuchen. Wollen wir zwei uns das mal zusammen anschauen, nur wir zwei?\"\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}