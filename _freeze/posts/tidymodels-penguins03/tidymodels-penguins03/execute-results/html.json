{
  "hash": "0f7b9de1d45eba6e332f9cc2d093d826",
  "result": {
    "markdown": "---\nexname: tidymodels-penguins03\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nextol: 1\nexpoints: 1\ncategories:\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\ndate: '2023-05-17'\nslug: tidymodels-penguins03\ntitle: tidymodels-penguins03\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nBerechnen Sie ein kNN-Modell mit tidymodels und zwar anhand des `penguins` Datensatzes.\n\nModellgleichung: `body_mass_g ~ bill_length_mm, data = d_train`.\n\n\n\nGesucht ist R-Quadrat als Maß für die Modellgüte im *TEST-Sample*.\n\n\n\n*Hinweise*:\n\n\n- Fixieren Sie die Zufallszahlen auf den Startwert 42.\n- Nutzen Sie eine v=5,r=1 CV.\n- Tunen Sie $K$ (Default-Tuning)\n- Entfernen Sie fehlende Werte in den Variablen.\n- Verzichten Sie auf weitere Schritte der Vorverarbeitung.\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\nSetup:\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-1_d4150da78600e2314b2c57fbbce62aba'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(tictoc)  # Rechenzeit messen, optional\n# data(penguins, package = \"palmerpenguins\")\nd_path <- \"https://vincentarelbundock.github.io/Rdatasets/csv/modeldata/penguins.csv\"\nd <- read_csv(d_path)\n```\n:::\n\n\n\nDatensatz auf NAs prüfen:\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-2_ec2bab143c3a1ea023eac8f825c62890'}\n\n```{.r .cell-code}\nd2 <-\n  d %>% \n  drop_na() \n```\n:::\n\n\n\n\nDatensatz aufteilen:\n\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-3_294d22911a100d41211584ed6cf3bb3b'}\n\n```{.r .cell-code}\nset.seed(42)\nd_split <- initial_split(d2)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\nWorkflow:\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-4_e662e1e58967ff399ac10b5d99696999'}\n\n```{.r .cell-code}\nrec1 <-\n  recipe(body_mass_g ~ bill_length_mm, data = d_train) %>% \n  step_naomit(all_numeric())\n\nknn_model <-\n  nearest_neighbor(\n    mode = \"regression\",\n    neighbors = tune()\n  ) \n\nwflow <-\n  workflow() %>%\n  add_recipe(rec1) %>%\n  add_model(knn_model)\n\nwflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: nearest_neighbor()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n1 Recipe Step\n\n• step_naomit()\n\n── Model ───────────────────────────────────────────────────────────────────────\nK-Nearest Neighbor Model Specification (regression)\n\nMain Arguments:\n  neighbors = tune()\n\nComputational engine: kknn \n```\n:::\n:::\n\n\n\nBacken:\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-5_ab33a471dd068c0f8aae46d870e4ccb7'}\n\n```{.r .cell-code}\nd_baked <- prep(rec1) %>% bake(new_data = NULL)\nd_baked %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  bill_length_mm body_mass_g\n           <dbl>       <dbl>\n1           34.5        2900\n2           52.2        3450\n3           45.4        4800\n4           42.1        4000\n5           50          5350\n6           41.5        4000\n```\n:::\n:::\n\n\n\nAuf NA prüfen:\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-6_fd95dfb410386253a7263a2c0dfb677a'}\n\n```{.r .cell-code}\nsum(is.na(d_baked))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n\n\nCV:\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-7_b92c345170ca71c42ac34cb44da743cd'}\n\n```{.r .cell-code}\nset.seed(43)\nfolds <- vfold_cv(d_train, v = 5)\nfolds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  5-fold cross-validation \n# A tibble: 5 × 2\n  splits           id   \n  <list>           <chr>\n1 <split [199/50]> Fold1\n2 <split [199/50]> Fold2\n3 <split [199/50]> Fold3\n4 <split [199/50]> Fold4\n5 <split [200/49]> Fold5\n```\n:::\n:::\n\n\n\n\nTunen:\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-8_831992b39a1faeb63c128c733d95819b'}\n\n```{.r .cell-code}\nd_resamples <-\n  tune_grid(\n    wflow,\n    resamples = folds,\n    control = control_grid(save_workflow = TRUE)\n  )\n\nd_resamples\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Tuning results\n# 5-fold cross-validation \n# A tibble: 5 × 4\n  splits           id    .metrics          .notes          \n  <list>           <chr> <list>            <list>          \n1 <split [199/50]> Fold1 <tibble [18 × 5]> <tibble [0 × 3]>\n2 <split [199/50]> Fold2 <tibble [18 × 5]> <tibble [0 × 3]>\n3 <split [199/50]> Fold3 <tibble [18 × 5]> <tibble [0 × 3]>\n4 <split [199/50]> Fold4 <tibble [18 × 5]> <tibble [0 × 3]>\n5 <split [200/49]> Fold5 <tibble [18 × 5]> <tibble [0 × 3]>\n```\n:::\n:::\n\n\n\nBester Kandidat:\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-9_9fb541b0812d59f6e5215a50ee6628cb'}\n\n```{.r .cell-code}\nshow_best(d_resamples)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n  neighbors .metric .estimator  mean     n std_err .config             \n      <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1        14 rmse    standard    664.     5    22.7 Preprocessor1_Model9\n2        12 rmse    standard    671.     5    23.2 Preprocessor1_Model8\n3        11 rmse    standard    675.     5    24.1 Preprocessor1_Model7\n4         9 rmse    standard    685.     5    22.3 Preprocessor1_Model6\n5         8 rmse    standard    688.     5    22.9 Preprocessor1_Model5\n```\n:::\n:::\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-10_d79f78782392e5c97021e40e3c4d89ca'}\n\n```{.r .cell-code}\nfitbest <- fit_best(d_resamples)\nfitbest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: nearest_neighbor()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n1 Recipe Step\n\n• step_naomit()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:\nkknn::train.kknn(formula = ..y ~ ., data = data, ks = min_rows(14L,     data, 5))\n\nType of response variable: continuous\nminimal mean absolute error: 526.4603\nMinimal mean squared error: 416216.1\nBest kernel: optimal\nBest k: 14\n```\n:::\n:::\n\n\n\nLast Fit:\n\n\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-11_a93d22a1f7fc597bb164c7c9089cba3e'}\n\n```{.r .cell-code}\nfit_last <- last_fit(fitbest, d_split)\nfit_last\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Resampling results\n# Manual resampling \n# A tibble: 1 × 6\n  splits           id               .metrics .notes   .predictions .workflow \n  <list>           <chr>            <list>   <list>   <list>       <list>    \n1 <split [249/84]> train/test split <tibble> <tibble> <tibble>     <workflow>\n```\n:::\n:::\n\n\n\nModellgüte im Test-Sample:\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-12_b5421cecb2e0b3d1b6577de29b9db7b0'}\n\n```{.r .cell-code}\nfit_last %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard     606.    Preprocessor1_Model1\n2 rsq     standard       0.382 Preprocessor1_Model1\n```\n:::\n:::\n\n\n\n\nR-Quadrat:\n\n\n\n::: {.cell hash='tidymodels-penguins03_cache/html/unnamed-chunk-13_86ebe6170ca9879a573abacc0be137e0'}\n\n```{.r .cell-code}\nsol <- collect_metrics(fit_last)[[\".estimate\"]][2]\nsol\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.38246\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\nCategories: \n\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}