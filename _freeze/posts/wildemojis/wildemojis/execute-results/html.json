{
  "hash": "be77cd8a6f7a9216e4dcc0e8dfe97e87",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: today\ndraft: true   # ACHTUNG DRAFT STEHT AUF TRUE!\ntitle: wildemojis  # ACHTUNG: HIER NAMEN DER AUFGABE ANGEBEN\n\nexecute: \n  eval: false \n  \nhighlight-style: arrow \ncache: true\n\n\nextype: string\nexsolution: \"\"\nexshuffle: no\ncategories:\n- emojis  # ENTER CATEGORIES HERE\n- nlp\n- textmining\n- germeval\n---\n\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\n\nZ√§hlen Sie die \"wilden Emojis\" im Datensatz `germeval`.\n\nNutzen Sie das entsprechende Lexikon aus `pradadata`. \n\n\nVerwenden Sie die [GermEval-2018-Daten](https://heidata.uni-heidelberg.de/dataset.xhtml?persistentId=doi:10.11588/data/0B5VML).\n\nDie Daten sind unter CC-BY-4.0 lizensiert. Author: Wiegand, Michael (Spoken Language Systems, Saarland University (2010-2018), Leibniz Institute for the German Language (since 2019)),\n\nDie Daten sind auch √ºber das R-Paket [PradaData](https://github.com/sebastiansauer/pradadata/tree/master/data-raw/GermEval-2018-Data-master) zu beziehen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"germeval_train\", package = \"pradadata\")\ndata(\"germeval_test\", package = \"pradadata\")\n```\n:::\n\n\nHinweise:\n\n- Orientieren Sie sich im √úbrigen an den [allgemeinen Hinweisen des Datenwerks](https://datenwerk.netlify.app/hinweise).\n- Nutzen Sie Tidymodels.\n- Nutzen Sie das `sentiws` Lexikon.\n- ‚ùó Achten Sie darauf, die Variable `c2` zu entfernen bzw. nicht zu verwenden.\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# L√∂sung\n\n\n\n# Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tictoc)\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(syuzhet)\nlibrary(textfeatures)\nlibrary(textrecipes)\ndata(\"wild_emojis\", package = \"pradadata\")\n```\n:::\n\n\n\nCheck:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwild_emojis\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd_train <-\n  germeval_train |> \n  select(id, c1, text)\n```\n:::\n\n\nEin Emo-Lexicon braucht eine Spalte `value` und eine Spalte `word`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwild_emojis$word <- wild_emojis$emoji\nwild_emojis$value <- 1\n\nwild_emojis <- \nwild_emojis |> \n  mutate(unicode = str_detect(emoji, emoji))\nwild_emojis$unicode[7]\n```\n:::\n\n\n\n# Feature Engineering\n\nWir erstellen die Spalte `wildemojis_n`, die die Anzahl `n` \"wilder\" Emojis pro Tweet z√§hlt:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nd_train_emojis <- \n  d_train |> \n  mutate(wildemojis_n = get_sentiment(text,\n                                      method = \"custom\",\n                                      lexicon = wild_emojis))\ntoc()\n```\n:::\n\n\n\nCheck:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_train_emojis |> \n  count(wildemojis_n)\n```\n:::\n\n\nKeine.\n\n# Check\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt <- c(\"üßë‚Äçüéì üòÑ ü•≥ Test\", \"üî´\", \"Test üî´\", \"üî´ üî´\", \"üî™ Test üî™üî™\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt |> count_lexicon(wild_emojis)\n```\n:::\n\n\n\nOh nein! Ein Bug. Hier ist noch Arbeit n√∂tig.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}