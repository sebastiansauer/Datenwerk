{
  "hash": "38c20ebdc1081ace3c9c0575ca08b925",
  "result": {
    "engine": "knitr",
    "markdown": "---\nextype: string\nexsolution: NA\nexname: penguins-stan-01\nexpoints: 1\ncategories:\n- bayes\n- regression\n- string\n- qm2\n- qm2-pruefung2023\ndate: '2023-07-12'\nslug: penguins-stan-01\ntitle: penguins-stan-01\n\n---\n\n\n\n\n\n\n\n# Aufgabe\n\n\nWir untersuchen Einflussfaktoren bzw. Prädiktoren auf das Körpergewicht von Pinguinen.\nIn dieser Aufgabe untersuchen wir in dem Zusammenhang den Zusammenhang von *Schnabellänge* (als UV) und Körpergewicht (als AV).\n\n\n*Wie groß ist der statistische Einfluss der UV auf die AV?*\n\na) Berechnen Sie den *Punktschätzer* des Effekts!\nb) *Wie viele Parameter* hat das Modell?\nc) Geben Sie die *Breite eines 90%-HDI* an (zum Effekt)!\nd) Wie groß ist die Wahrscheinlichkeit, dass der Effekt vorhanden ist (also größer als Null ist), die \"*Effektwahrscheinlichkeit*\"?\ne) Wie groß ist das 95%-HDI, wenn Sie *nur* die Spezies *Adelie* untersuchen?\nf) Geben Sie die *Prioris* an für `m1` für die Regressionskoeffizienten!\n\n\nHinweise:\n\n- Nutzen Sie den Datensatz zu den *Palmer Penguins*.\n- Verwenden Sie Methoden der Bayes-Statistik und die Software Stan.\n- Fixieren Sie die Zufallszahlen auf den Startwert 42!\n- Sie können den Datensatz z.B. [hier](https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv) beziehen oder über das R-Paket `palmerpenguins`.\n- Geben Sie keine Prozentzahlen, sondern stets Anteile an.\n- Beachten Sie die [übrigen Hinweise](https://datenwerk.netlify.app/hinweise).\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\nZentrieren ist eigentlich immer nützlich,\naber hier streng genommen nicht unbedingt nötig.\nDer Hauptgrund ist, dass Stan für uns den Prior für den Intercept festlegt,\nund zwar auf Basis der Daten,\nwir uns also nicht um die komische Frage zu kümmern brauchen,\nwelchen Prior wir für den unzentrierten Achsenabschnitt vergeben wollten:\nWie schwer sind Pinguins der Schnabellänge Null?\nMit zentrierten Prädiktoren ist die Frage nach dem Prior viel einfacher zu beantworten:\nWie schwer ist ein Pinguin mit mittelgroßem Schnabel?\n\nSetup:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(easystats)\nlibrary(rstanarm)\n\ndata(\"penguins\", package = \"palmerpenguins\")\n```\n:::\n\n\n\n\nEs wird in dieser Aufgabe vorausgesetzt,\ndass Sie den Datensatz selbständig importieren können.\nTipp: Kurzes Googeln hilft ggf., den Datensatz zu finden.\n\n\n\nAlternativ könnten Sie den Datensatz als CSV-Datei importieren:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_path <- \"https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv\"\npenguins <- data_read(d_path)  # oder z.B. mit read_csv \n```\n:::\n\n\n\n\nEin Blick in die Daten zur Kontrolle,\nob das Importieren richtig funktioniert hat:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n:::\n\n\n\n\nVertrauen ist gut, aber - was Golems betrifft - ist Kontrolle eindeutig besser ;-)\n\n\n\n\na) Punktschätzer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- stan_glm(body_mass_g ~  bill_length_mm,  # Regressionsgleichung\n               data = penguins, #  Daten\n               seed = 42,  # Reproduzierbarkeit\n               refresh = 0)  # nicht so viel Output\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparameters(m1, ci_method = \"hdi\", ci = .9)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Parameter      |   Median|  CI|     CI_low|  CI_high|      pd|     Rhat|      ESS|Prior_Distribution | Prior_Location| Prior_Scale|\n|:--------------|--------:|---:|----------:|--------:|-------:|--------:|--------:|:------------------|--------------:|-----------:|\n|(Intercept)    | 359.9393| 0.9| -112.36003| 834.8034| 0.89575| 1.000485| 4117.553|normal             |       4201.754|   2004.8863|\n|bill_length_mm |  87.4472| 0.9|   76.99955|  98.3694| 1.00000| 1.000491| 4123.761|normal             |          0.000|    367.2233|\n\n</div>\n:::\n:::\n\n\n\n\nb) Anzahl Parameter\n\nDas Modell hat 3 Paramter:\n\n- $\\beta_0$ (oder $\\alpha$)\n- $\\beta_01$\n- $\\sigma$\n\n\nc) Breite des Intervalls\n\nDazu liest man die Intervallgrenzen (`90% CI`) in der richtigen Zeile ab (Tabelle `parameters`):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n 97.70  - 76.24\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21.46\n```\n\n\n:::\n:::\n\n\n\nEinheit: mm\n\n\nd) Effektwahrscheinlichkeit\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1_post <-\n  m1 %>% \n  as_tibble()\n\nm1_post %>% \n  count(bill_length_mm > 0)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|bill_length_mm > 0 |    n|\n|:------------------|----:|\n|TRUE               | 4000|\n\n</div>\n:::\n:::\n\n\n\nAlso: 100% oder 1 (4000 von 4000 Stichproben finden dieses Ergebnis in unserem Modell). \n\nMan kann diesen Wert aus der Tabelle oben (Ausgabe von `parameters()`) einfach in der Spalte `pd` ablesen.\n`pd` steht für *probability of direction*, s. [Details hier](https://easystats.github.io/blog/posts/bayestestr_pd/).\n\n\nOder so, ist auch einfach:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npd_m1 <- p_direction(m1) # aus Paket easystats\npd_m1\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Parameter      |      pd|Effects |Component   |\n|:--------------|-------:|:-------|:-----------|\n|(Intercept)    | 0.89575|fixed   |conditional |\n|bill_length_mm | 1.00000|fixed   |conditional |\n\n</div>\n:::\n:::\n\n\n\nUnd plotten ist meist hilfreich: `plot(pd_m1)`.\n\nMan kann sich auch ein \"Dashboard\" mit allen Ergebnissen des Modells ausgeben lassen:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_dashboard(m1)\n```\n:::\n\n\n\n\n\ne) Nur Adelie:\n\nWelche Spezies gibt es im Datensatz?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  count(species)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|species   |   n|\n|:---------|---:|\n|Adelie    | 152|\n|Chinstrap |  68|\n|Gentoo    | 124|\n\n</div>\n:::\n:::\n\n\n\n\nFiltern:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_adelie <-\n  penguins %>% \n  filter(species == \"Adelie\")\n```\n:::\n\n\n\n\nModell berechnen:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2 <- stan_glm(body_mass_g ~  bill_length_mm,  # Regressionsgleichung\n               data = penguins_adelie, #  Daten\n               seed = 42,  # Repro.\n               refresh = 0)  # nicht so viel Output\n```\n:::\n\n\n\nDas Modell ist - bis auf die Daten - identisch zu `m1`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparameters(m2)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Parameter      |   Median|   CI|     CI_low|  CI_high|     pd|     Rhat|      ESS|Prior_Distribution | Prior_Location| Prior_Scale|\n|:--------------|--------:|----:|----------:|--------:|------:|--------:|--------:|:------------------|--------------:|-----------:|\n|(Intercept)    | 22.53919| 0.95| -879.18205| 913.4400| 0.5185| 1.000466| 3934.802|normal             |       3700.662|   1146.4153|\n|bill_length_mm | 94.71685| 0.95|   71.89291| 118.0511| 1.0000| 1.000492| 3910.510|normal             |          0.000|    430.4322|\n\n</div>\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhdi(m2, parameters = \"bill_length_mm\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Parameter      |   CI|   CI_low|  CI_high|Effects |Component   |\n|:--------------|----:|--------:|--------:|:-------|:-----------|\n|bill_length_mm | 0.95| 71.57412| 117.4872|fixed   |conditional |\n\n</div>\n:::\n:::\n\n\n\nS. auch Tabelle oben.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n118.09 - 71.86\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 46.23\n```\n\n\n:::\n:::\n\n\n\nf) Prioris\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndescribe_prior(m1, component = \"auxiliary\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Parameter      |Prior_Distribution | Prior_Location| Prior_Scale|\n|:--------------|:------------------|--------------:|-----------:|\n|(Intercept)    |normal             |       4201.754|   2004.8863|\n|bill_length_mm |normal             |          0.000|    367.2233|\n\n</div>\n:::\n:::\n\n\n\nSteht auch in der Tabelle,\ndie von `parameters` ausgegeben wird.\n\n\n\n---\n\nCategories: \n\n- bayes\n- regression\n- string\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}