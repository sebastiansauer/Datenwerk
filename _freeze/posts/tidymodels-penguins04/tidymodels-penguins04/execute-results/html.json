{
  "hash": "60ad4e6944dc1a87610c8b8b1a37898d",
  "result": {
    "markdown": "---\nexname: tidymodels-penguins04\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nextol: 1\nexpoints: 1\ncategories:\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\ndate: '2023-05-17'\nslug: tidymodels-penguins04\ntitle: tidymodels-penguins04\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nBerechnen Sie ein kNN-Modell mit tidymodels und zwar anhand des `penguins` Datensatzes.\n\nModellgleichung: `body_mass_g ~ bill_length_mm, data = d_train`.\n\n\n\nGesucht ist R-Quadrat als Maß für die Modellgüte im *TEST-Sample*.\n\n\n\n*Hinweise*:\n\n\n- Fixieren Sie die Zufallszahlen auf den Startwert 42.\n- Nutzen Sie eine v=5,r=2 CV.\n- Tunen Sie $K$ (Default-Tuning)\n- Entfernen Sie fehlende Werte in den Variablen.\n- Verzichten Sie auf weitere Schritte der Vorverarbeitung.\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\nSetup:\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-1_bc8f0eaf3394ce7eab7c217493308f9d'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(tictoc)  # Rechenzeit messen, optional\n# data(penguins, package = \"palmerpenguins\")\nd_path <- \"https://vincentarelbundock.github.io/Rdatasets/csv/modeldata/penguins.csv\"\nd <- read_csv(d_path)\n```\n:::\n\n\n\nDatensatz auf NAs prüfen:\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-2_95070652815a888fa6d5c37e586fcc24'}\n\n```{.r .cell-code}\nd2 <-\n  d %>% \n  drop_na() \n```\n:::\n\n\n\n\nDatensatz aufteilen:\n\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-3_057beb10c9c28c433ccece72f6ba86bf'}\n\n```{.r .cell-code}\nset.seed(42)\nd_split <- initial_split(d2)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\nWorkflow:\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-4_9424d6020adc9dbc9dbc81fd39044c52'}\n\n```{.r .cell-code}\nrec1 <-\n  recipe(body_mass_g ~ bill_length_mm, data = d_train) %>% \n  step_naomit(all_numeric())\n\nknn_model <-\n  nearest_neighbor(\n    mode = \"regression\",\n    neighbors = tune()\n  ) \n\nwflow <-\n  workflow() %>%\n  add_recipe(rec1) %>%\n  add_model(knn_model)\n\nwflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: nearest_neighbor()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n1 Recipe Step\n\n• step_naomit()\n\n── Model ───────────────────────────────────────────────────────────────────────\nK-Nearest Neighbor Model Specification (regression)\n\nMain Arguments:\n  neighbors = tune()\n\nComputational engine: kknn \n```\n:::\n:::\n\n\n\nBacken:\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-5_d01fc22117e5dacac1cddbbf70442b4d'}\n\n```{.r .cell-code}\nd_baked <- prep(rec1) %>% bake(new_data = NULL)\nd_baked %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  bill_length_mm body_mass_g\n           <dbl>       <dbl>\n1           34.5        2900\n2           52.2        3450\n3           45.4        4800\n4           42.1        4000\n5           50          5350\n6           41.5        4000\n```\n:::\n:::\n\n\n\nAuf NA prüfen:\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-6_3d0ebb5675b96f58f71fc030a235b4e1'}\n\n```{.r .cell-code}\nsum(is.na(d_baked))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n\n\nCV:\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-7_b0e6ba35d64d32ffc8752caea3c4d747'}\n\n```{.r .cell-code}\nset.seed(42)\nfolds <- vfold_cv(d_train, v = 5, repeats = 2)\nfolds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  5-fold cross-validation repeated 2 times \n# A tibble: 10 × 3\n   splits           id      id2  \n   <list>           <chr>   <chr>\n 1 <split [199/50]> Repeat1 Fold1\n 2 <split [199/50]> Repeat1 Fold2\n 3 <split [199/50]> Repeat1 Fold3\n 4 <split [199/50]> Repeat1 Fold4\n 5 <split [200/49]> Repeat1 Fold5\n 6 <split [199/50]> Repeat2 Fold1\n 7 <split [199/50]> Repeat2 Fold2\n 8 <split [199/50]> Repeat2 Fold3\n 9 <split [199/50]> Repeat2 Fold4\n10 <split [200/49]> Repeat2 Fold5\n```\n:::\n:::\n\n\n\n\nTunen:\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-8_a3b9f0453bfde7930ea1c50fa175c699'}\n\n```{.r .cell-code}\nd_resamples <-\n  tune_grid(\n    wflow,\n    resamples = folds,\n    control = control_grid(save_workflow = TRUE)\n  )\n\nd_resamples\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Tuning results\n# 5-fold cross-validation repeated 2 times \n# A tibble: 10 × 5\n   splits           id      id2   .metrics          .notes          \n   <list>           <chr>   <chr> <list>            <list>          \n 1 <split [199/50]> Repeat1 Fold1 <tibble [20 × 5]> <tibble [0 × 3]>\n 2 <split [199/50]> Repeat1 Fold2 <tibble [20 × 5]> <tibble [0 × 3]>\n 3 <split [199/50]> Repeat1 Fold3 <tibble [20 × 5]> <tibble [0 × 3]>\n 4 <split [199/50]> Repeat1 Fold4 <tibble [20 × 5]> <tibble [0 × 3]>\n 5 <split [200/49]> Repeat1 Fold5 <tibble [20 × 5]> <tibble [0 × 3]>\n 6 <split [199/50]> Repeat2 Fold1 <tibble [20 × 5]> <tibble [0 × 3]>\n 7 <split [199/50]> Repeat2 Fold2 <tibble [20 × 5]> <tibble [0 × 3]>\n 8 <split [199/50]> Repeat2 Fold3 <tibble [20 × 5]> <tibble [0 × 3]>\n 9 <split [199/50]> Repeat2 Fold4 <tibble [20 × 5]> <tibble [0 × 3]>\n10 <split [200/49]> Repeat2 Fold5 <tibble [20 × 5]> <tibble [0 × 3]>\n```\n:::\n:::\n\n\n\nBester Kandidat:\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-9_4103f8119662b8e54efca8d3b3124994'}\n\n```{.r .cell-code}\nshow_best(d_resamples)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n  neighbors .metric .estimator  mean     n std_err .config              \n      <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1        15 rmse    standard    676.    10    15.6 Preprocessor1_Model10\n2        13 rmse    standard    684.    10    15.7 Preprocessor1_Model09\n3        11 rmse    standard    692.    10    16.4 Preprocessor1_Model08\n4        10 rmse    standard    694.    10    16.5 Preprocessor1_Model07\n5         9 rmse    standard    702.    10    15.8 Preprocessor1_Model06\n```\n:::\n:::\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-10_e9658b2165f346b61b76a27011ef71c9'}\n\n```{.r .cell-code}\nfitbest <- fit_best(d_resamples)\nfitbest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: nearest_neighbor()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n1 Recipe Step\n\n• step_naomit()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:\nkknn::train.kknn(formula = ..y ~ ., data = data, ks = min_rows(15L,     data, 5))\n\nType of response variable: continuous\nminimal mean absolute error: 526.1741\nMinimal mean squared error: 416047.6\nBest kernel: optimal\nBest k: 15\n```\n:::\n:::\n\n\n\nLast Fit:\n\n\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-11_9afc49d5e3b644b92a8c0fd3fffd4ff8'}\n\n```{.r .cell-code}\nfit_last <- last_fit(fitbest, d_split)\nfit_last\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Resampling results\n# Manual resampling \n# A tibble: 1 × 6\n  splits           id               .metrics .notes   .predictions .workflow \n  <list>           <chr>            <list>   <list>   <list>       <list>    \n1 <split [249/84]> train/test split <tibble> <tibble> <tibble>     <workflow>\n```\n:::\n:::\n\n\n\nModellgüte im Test-Sample:\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-12_7f3e2584717b44c27c12778ad7b216f6'}\n\n```{.r .cell-code}\nfit_last %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard     605.    Preprocessor1_Model1\n2 rsq     standard       0.385 Preprocessor1_Model1\n```\n:::\n:::\n\n\n\n\nR-Quadrat:\n\n\n\n::: {.cell hash='tidymodels-penguins04_cache/html/unnamed-chunk-13_c20c9a1cbec95286706b9b65f7f90290'}\n\n```{.r .cell-code}\nsol <- collect_metrics(fit_last)[[\".estimate\"]][2]\nsol\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3849557\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\nCategories: \n\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}