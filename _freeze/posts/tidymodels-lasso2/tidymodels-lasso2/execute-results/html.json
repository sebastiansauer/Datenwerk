{
  "hash": "aabc19d5eb20e1a6336d60619f42ef3d",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: tidymodels-lasso2\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- tidymodels\n- statlearning\n- lasso\n- lm\n- string\ndate: '2023-05-17'\nslug: tidymodels-lasso2\ntitle: tidymodels-lasso2\nexecute:\n  cache: true\n  eval: false\n---\n\n\n\n\n# Aufgabe\n\n<!-- Schreiben Sie eine Vorlage für eine prädiktive Analyse mit Tidymodels! -->\n\nSchreiben Sie eine minimale Analyse für ein Vorhersagemodell mit dem *Lasso*.\n\nHinweise:\n\n- Verzichten Sie auf Tuning der Penalisierung; setzen Sie den Wert auf 0.1\n- Verzichten Sie auf die Unterteilung von Train- und Test-Set.\n- Verzichten Sie auf Kreuzvalidierung.\n- Verwenden Sie Standardwerte, wo nicht anders angegeben.\n- Fixieren Sie Zufallszahlen auf den Startwert 42.\n- Verwenden Sie den Datensatz `penguins`.\n- Modellformel: `body_mass_g ~ .`\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2023-05-14\n\n# Setup:\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(tictoc)  # Zeitmessung\n\n\n# Data:\nd_path <- \"https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv\"\nd <- read_csv(d_path)\n\n# drop rows with NA in outcome variable:\nd <-\n  d %>% \n  drop_na(body_mass_g)\n\nset.seed(42)\nd_split <- initial_split(d)\n# d_train <- training(d_split)\n# d_test <- testing(d_split)\n\n\n# model:\nmod_lasso <-\n  linear_reg(mode = \"regression\",\n             penalty = 0.1,\n             mixture = 1,\n             engine = \"glmnet\")\n\n# cv:\n# set.seed(42)\n# rsmpl <- vfold_cv(d_train)\n\n\n# recipe:\nrec1_plain <- \n  recipe(body_mass_g ~  ., data = d) %>% \n  update_role(\"rownames\", new_role = \"id\") %>% \n  step_normalize(all_numeric_predictors()) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_impute_bag(all_predictors())\n\n\n# check:\nd_train_baked <- \n  prep(rec1_plain) %>% bake(new_data = NULL)\n\nna_n <- sum(is.na(d_train_baked))\n\n\n# workflow:\nwf1 <-\n  workflow() %>% \n  add_model(mod_lasso) %>% \n  add_recipe(rec1_plain)\n\n\n# tuning:\ntic()\nwf1_fit <-\n  wf1 %>% \n  fit(data = d)\ntoc()\n\n# best candidate:\nwf1_fit\n\n\n\n# Modellgüte:\n\npredict(wf1_fit, new_data = d) %>% \n  bind_cols(d %>% select(body_mass_g)) %>% \n  rmse(truth = body_mass_g,\n       estimate = .pred)\n```\n:::\n\n\nMan beachte: Für regulierte Modelle sind Zentrierung und Skalierung nötig.\n\n\n\n---\n\nCategories: \n\n- tidymodels\n- statlearning\n- lasso\n- lm\n- simple\n- string\n- template\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}