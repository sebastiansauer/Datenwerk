{
  "hash": "7bcdedf82c38b481a584903b3fcc991f",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: tidymodels-lasso2\nexpoints: 1\nextype: string\nexsolution: NA\ncategories:\n- tidymodels\n- statlearning\n- lasso\n- lm\n- string\ndate: '2023-05-17'\nslug: tidymodels-lasso2\ntitle: tidymodels-lasso2\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n# Aufgabe\n\n<!-- Schreiben Sie eine Vorlage für eine prädiktive Analyse mit Tidymodels! -->\n\nSchreiben Sie eine minimale Analyse für ein Vorhersagemodell mit dem *Lasso*.\n\nHinweise:\n\n- Verzichten Sie auf Tuning der Penalisierung; setzen Sie den Wert auf 0.1\n- Verzichten Sie auf die Unterteilung von Train- und Test-Set.\n- Verzichten Sie auf Kreuzvalidierung.\n- Verwenden Sie Standardwerte, wo nicht anders angegeben.\n- Fixieren Sie Zufallszahlen auf den Startwert 42.\n- Verwenden Sie den Datensatz `penguins`.\n- Modellformel: `body_mass_g ~ .`\n\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2023-05-14\n\n# Setup:\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(tictoc)  # Zeitmessung\n\n\n# Data:\nd_path <- \"https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv\"\nd <- read_csv(d_path)\n\n# drop rows with NA in outcome variable:\nd <-\n  d %>% \n  drop_na(body_mass_g)\n\nset.seed(42)\nd_split <- initial_split(d)\n# d_train <- training(d_split)\n# d_test <- testing(d_split)\n\n\n# model:\nmod_lasso <-\n  linear_reg(mode = \"regression\",\n             penalty = 0.1,\n             mixture = 1,\n             engine = \"glmnet\")\n\n# cv:\n# set.seed(42)\n# rsmpl <- vfold_cv(d_train)\n\n\n# recipe:\nrec1_plain <- \n  recipe(body_mass_g ~  ., data = d) %>% \n  update_role(\"rownames\", new_role = \"id\") %>% \n  step_normalize(all_numeric_predictors()) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_impute_bag(all_predictors())\n\n\n# check:\nd_train_baked <- \n  prep(rec1_plain) %>% bake(new_data = NULL)\n\nna_n <- sum(is.na(d_train_baked))\n\n\n# workflow:\nwf1 <-\n  workflow() %>% \n  add_model(mod_lasso) %>% \n  add_recipe(rec1_plain)\n\n\n# tuning:\ntic()\nwf1_fit <-\n  wf1 %>% \n  fit(data = d)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1.223 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# best candidate:\nwf1_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n3 Recipe Steps\n\n• step_normalize()\n• step_dummy()\n• step_impute_bag()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  glmnet::glmnet(x = maybe_matrix(x), y = y, family = \"gaussian\",      alpha = ~1) \n\n   Df  %Dev Lambda\n1   0  0.00 697.60\n2   1 12.89 635.70\n3   1 23.58 579.20\n4   1 32.47 527.70\n5   1 39.84 480.90\n6   1 45.96 438.10\n7   1 51.05 399.20\n8   2 55.36 363.80\n9   2 59.11 331.40\n10  2 62.22 302.00\n11  2 64.81 275.20\n12  2 66.95 250.70\n13  3 69.54 228.40\n14  3 72.37 208.20\n15  3 74.73 189.70\n16  3 76.68 172.80\n17  3 78.30 157.50\n18  3 79.65 143.50\n19  3 80.77 130.70\n20  3 81.70 119.10\n21  3 82.47 108.50\n22  3 83.11  98.89\n23  3 83.64  90.10\n24  3 84.08  82.10\n25  3 84.45  74.81\n26  3 84.75  68.16\n27  3 85.00  62.11\n28  3 85.21  56.59\n29  3 85.39  51.56\n30  4 85.54  46.98\n31  5 85.69  42.81\n32  5 85.80  39.00\n33  5 85.90  35.54\n34  6 86.01  32.38\n35  7 86.17  29.50\n36  7 86.31  26.88\n37  7 86.43  24.50\n38  7 86.53  22.32\n39  7 86.62  20.34\n40  7 86.68  18.53\n41  7 86.74  16.88\n42  7 86.79  15.38\n43  8 86.83  14.02\n44  8 86.92  12.77\n45  8 86.99  11.64\n46  8 87.05  10.60\n\n...\nand 24 more lines.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Modellgüte:\n\npredict(wf1_fit, new_data = d) %>% \n  bind_cols(d %>% select(body_mass_g)) %>% \n  rmse(truth = body_mass_g,\n       estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        285.\n```\n\n\n:::\n:::\n\n\nMan beachte: Für regulierte Modelle sind Zentrierung und Skalierung nötig.\n\n\n\n---\n\nCategories: \n\n- tidymodels\n- statlearning\n- lasso\n- lm\n- simple\n- string\n- template\n\n",
    "supporting": [
      "tidymodels-lasso2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}