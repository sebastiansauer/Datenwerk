{
  "hash": "cdd9633977dcbc843736a8a2cc72d472",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: knn-ames01\nextype: num\nexsolution: r exams::fmt(sol)\nexshuffle: no\nextol: 1\nexpoints: 1\ncategories:\n- statlearning\n- tidymodels\n- num\ndate: '2023-05-17'\nslug: knn-ames01\ntitle: knn-ames01\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\n\nBerechnen Sie ein knn-Modell für den Datensatz `ames`!\n\nNutzen Sie diese Modellformel: `Sale_Price ~ Lot_Area + Fireplaces + Longitude + Latitude`.\n\nBerichten Sie die Modellgüte.\n\n\nHinweise:\n\n- Tunen Sie $k$ mit den Werten 1 bis 10.\n- Teilen Sie in Train- und Test-Sample auf.\n- Verwenden Sie Defaults der Funktionen, wo nicht anders angegeben.\n- z-Transformieren Sie die Prädiktoren.\n- Verwenden Sie den RSME als Kennzahl der Modellgüte.\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-1_9275ed4095e252c748a7c6ecb9c352f7'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(ames)\n```\n:::\n\n\n\n\n\nDaten aufteilen:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-2_7d5743810546bea5795461a49565e357'}\n\n```{.r .cell-code}\nd_split <- initial_split(ames)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\nModell definieren:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-3_33f0bdb2133984631105469907583944'}\n\n```{.r .cell-code}\nmod1 <-\n  nearest_neighbor(\n    mode = \"regression\",\n    neighbors = tune())  # k-Wert zum Tunen taggen\n```\n:::\n\n\n\nRezept definieren:\n\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-4_b41273f636d1b5f6ca6f8e1cbc6ac77e'}\n\n```{.r .cell-code}\nrec1 <-\n  recipe(Sale_Price ~ Lot_Area + Fireplaces + Longitude + Latitude, data = d_split) %>% \n  step_normalize(all_predictors())\n```\n:::\n\n\n\nWorkflow definieren:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-5_28c6ba74de6ec957202d5568db8442c9'}\n\n```{.r .cell-code}\nwf1 <-\n  workflow() %>% \n  add_model(mod1) %>% \n  add_recipe(rec1)\n```\n:::\n\n\n\nResampling definieren:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-6_79e7c2062b7086d9e3dad9c77829245f'}\n\n```{.r .cell-code}\ncv1 <- vfold_cv(d_train)\n```\n:::\n\n\nTuning definieren:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-7_0de0dee028f1b68cf9dd23c4ee6be287'}\n\n```{.r .cell-code}\nk_grid <-\n  tibble(neighbors = 1:10)\n```\n:::\n\n\n\nFitting:\n\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-8_40508887c8abd49edbded75dbb0d3185'}\n\n```{.r .cell-code}\nfit1 <-\n  tune_grid(wf1,\n            resamples = vfold_cv(d_train),\n            metrics = metric_set(rmse),  # nur RMSE als Modellgüte, Default ist RMSE und R2\n            grid = k_grid,\n            control = control_grid(save_workflow = TRUE)  # nur nötig für \"fit_best\", s.u.\n            )\n```\n:::\n\n\n\nMetriken im Train-Sample (genauer: im Assessment-Sample):\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-9_6dd2a14bc436352a980cf4b90d2bc981'}\n\n```{.r .cell-code}\nshow_best(fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  neighbors .metric .estimator   mean     n std_err .config              \n      <int> <chr>   <chr>       <dbl> <int>   <dbl> <chr>                \n1        10 rmse    standard   43067.    10   1798. Preprocessor1_Model10\n2         9 rmse    standard   43089.    10   1774. Preprocessor1_Model09\n3         8 rmse    standard   43115.    10   1738. Preprocessor1_Model08\n4         7 rmse    standard   43181.    10   1708. Preprocessor1_Model07\n5         6 rmse    standard   43317.    10   1682. Preprocessor1_Model06\n```\n\n\n:::\n:::\n\n(Komplettes) Train-Sample mit bestem Tuning-Kandidat fitten:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-10_2df42cbee4497fcf81ab640180b5e21d'}\n\n```{.r .cell-code}\ntune1_best <- fit_best(fit1)\n```\n:::\n\n\n\nIm Test-Sample predicten:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-11_9e6a7a4cad9e04f5c0994f69ae919ba0'}\n\n```{.r .cell-code}\nfit_test <- last_fit(tune1_best, d_split)\n```\n:::\n\n\nMetriken einsammeln:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-12_6bfcd7790f67ff6f65483dcdaa8c2df3'}\n\n```{.r .cell-code}\ncollect_metrics(fit_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard   42554.    Preprocessor1_Model1\n2 rsq     standard       0.717 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-13_9dae38c1d3227891cf2cc1cd2a563f82'}\n\n:::\n\n\nDie Lösung lautet 4.2554397\\times 10^{4}.\n\n\n\n\n---\n\nCategories: \n\n- statlearning\n- tidymodels\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}