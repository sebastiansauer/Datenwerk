{
  "hash": "7f02728f3fb228fb161217bb21739ea9",
  "result": {
    "markdown": "---\nexname: knn-ames01\nextype: num\nexsolution: r exams::fmt(sol)\nexshuffle: no\nextol: 1\nexpoints: 1\ncategories:\n- stat-learning\n- tidymodels\n- num\ndate: '2023-04-26'\nslug: knn-ames01\ntitle: knn-ames01\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\n\nBerechnen Sie ein knn-Modell für den Datensatz `ames`!\n\nNutzen Sie diese Modellformel: `Sale_Price ~ Lot_Area + Fireplaces + Longitude + Latitude`.\n\nBerichten Sie die Modellgüte.\n\n\nHinweise:\n\n- Tunen Sie $k$ mit den Werten 1 bis 10.\n- Teilen Sie in Train- und Test-Sample auf.\n- Verwenden Sie Defaults der Funktionen, wo nicht anders angegeben.\n- z-Transformieren Sie die Prädiktoren.\n- Verwenden Sie den RSME als Kennzahl der Modellgüte.\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-1_cdac86317e8e8680e56e8e10077eada2'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(ames)\n```\n:::\n\n\n\n\n\nDaten aufteilen:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-2_46494172f5b3184ab727b13febd62349'}\n\n```{.r .cell-code}\nd_split <- initial_split(ames)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\nModell definieren:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-3_d90c6a735d7b159021ba5f8bead5a5f4'}\n\n```{.r .cell-code}\nmod1 <-\n  nearest_neighbor(\n    mode = \"regression\",\n    neighbors = tune())  # k-Wert zum Tunen taggen\n```\n:::\n\n\n\nRezept definieren:\n\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-4_125b61fb021fd50450c76a58e375cc30'}\n\n```{.r .cell-code}\nrec1 <-\n  recipe(Sale_Price ~ Lot_Area + Fireplaces + Longitude + Latitude, data = d_split) %>% \n  step_normalize(all_predictors())\n```\n:::\n\n\n\nWorkflow definieren:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-5_dc0108d5e97293f812afe9c8c523f88f'}\n\n```{.r .cell-code}\nwf1 <-\n  workflow() %>% \n  add_model(mod1) %>% \n  add_recipe(rec1)\n```\n:::\n\n\n\nResampling definieren:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-6_d5c74d8417d8b30439a0b7ad0fb33301'}\n\n```{.r .cell-code}\ncv1 <- vfold_cv(d_train)\n```\n:::\n\n\nTuning definieren:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-7_cd55ac9d59737ccb0eb7d99a01761f53'}\n\n```{.r .cell-code}\nk_grid <-\n  tibble(neighbors = 1:10)\n```\n:::\n\n\n\nFitting:\n\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-8_f2f75d1d08f47464f23dce66958a0290'}\n\n```{.r .cell-code}\nfit1 <-\n  tune_grid(wf1,\n            resamples = vfold_cv(d_train),\n            metrics = metric_set(rmse),  # nur RMSE als Modellgüte, Default ist RMSE und R2\n            grid = k_grid,\n            control = control_grid(save_workflow = TRUE)  # nur nötig für \"fit_best\", s.u.\n            )\n```\n:::\n\n\n\nMetriken im Train-Sample (genauer: im Assessment-Sample):\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-9_b35a8e34e30a5f0459db176dae1f4ffe'}\n\n```{.r .cell-code}\nshow_best(fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n  neighbors .metric .estimator   mean     n std_err .config              \n      <int> <chr>   <chr>       <dbl> <int>   <dbl> <chr>                \n1        10 rmse    standard   44209.    10   1612. Preprocessor1_Model10\n2         9 rmse    standard   44356.    10   1605. Preprocessor1_Model09\n3         8 rmse    standard   44547.    10   1600. Preprocessor1_Model08\n4         7 rmse    standard   44774.    10   1595. Preprocessor1_Model07\n5         6 rmse    standard   45105.    10   1610. Preprocessor1_Model06\n```\n:::\n:::\n\n(Komplettes) Train-Sample mit bestem Tuning-Kandidat fitten:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-10_3bad14341bfeb5031205ff76c3f9c533'}\n\n```{.r .cell-code}\ntune1_best <- fit_best(fit1)\n```\n:::\n\n\n\nIm Test-Sample predicten:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-11_b80f043458b8df4d9f7eb3dcb9783681'}\n\n```{.r .cell-code}\nfit_test <- last_fit(tune1_best, d_split)\n```\n:::\n\n\nMetriken einsammeln:\n\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-12_5a2cde9ccad3268f2e32906ee54c07d0'}\n\n```{.r .cell-code}\ncollect_metrics(fit_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard   40819.    Preprocessor1_Model1\n2 rsq     standard       0.730 Preprocessor1_Model1\n```\n:::\n:::\n\n::: {.cell hash='knn-ames01_cache/html/unnamed-chunk-13_6cc3e02427c64f337e3e3ff87c459e2a'}\n\n:::\n\n\nDie Lösung lautet 4.081919\\times 10^{4}.\n\n\n\n\n---\n\nCategories: \n\n- stat-learning\n- tidymodels\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}