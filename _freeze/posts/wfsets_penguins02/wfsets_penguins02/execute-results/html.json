{
  "hash": "58b052a789a39bbd7b8907e319a55222",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: wfsets_penguins02\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nexpoints: 1\ncategories:\n- R\n- statlearning\n- tidymodels\n- num\n- wfsets\ndate: '2023-05-17'\nslug: wfsets_penguins02\ntitle: wfsets_penguins02\n\n---\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nBerechnen Sie die Vorhersagegüte (RMSE) für folgende Lernalgorithmen:\n\n- lineares Modell\n- knn (neighbors: tune)\n\nModellgleichung: `body_mass_g ~ bill_length_mm, data = d_train`.\n\nTunen Sie bei `neighbors` folgende Werte: 5, 10, 15, 20, 35, 30 und betrachten Sie deren Modellgüte.\n\nNutzen Sie minimale Vorverarbeitung.\n\nBerichten Sie die den RSME.\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n## Setup\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-1_aea6bb5c0a840536495aabff551f2398'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(tidyverse)\ndata(penguins, package = \"palmerpenguins\")\n```\n:::\n\n\n## Daten\n\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-2_05a287542b5b17e9d776a2f1d2697044'}\n\n```{.r .cell-code}\nd <-\n  penguins %>% \n  drop_na()\n```\n:::\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-3_219196c1b476f876426912c520430178'}\n\n```{.r .cell-code}\nd_split <- initial_split(d)\nd_train <- training(d_split)\nd_test <- testing(d_split)\n```\n:::\n\n\n\n## Modelle\n\n\nLineares Modell:\n\n\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-4_f9a13f8eafc07d31c171b83556598c3b'}\n\n```{.r .cell-code}\nmod_lin <- linear_reg()\n\nmod_knn <- nearest_neighbor(mode = \"regression\",\n                                  neighbors = tune())\n```\n:::\n\n\n\n## Rezepte\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-5_a6323d27cc7b7bab63309aa407c3c9fa'}\n\n```{.r .cell-code}\nrec_basic <- recipe(body_mass_g ~ bill_length_mm, data = d_train) %>% \n         step_normalize(all_predictors())\n\nrec_basic\n```\n:::\n\n\n\n## Resampling\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-6_1231e43d47217322b014ddee85f6bf5a'}\n\n```{.r .cell-code}\nrsmpls <- vfold_cv(d_train)\n```\n:::\n\n\n\n## Workflow Set\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-7_671934050ad24dd4a9442c260a3bbac3'}\n\n```{.r .cell-code}\nwf_set <-\n  workflow_set(\n    preproc = list(rec_simple = rec_basic),\n    models = list(mod_lm = mod_lin,\n                  mod_nn = mod_knn)\n  )\n\nwf_set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id          info             option    result    \n  <chr>             <list>           <list>    <list>    \n1 rec_simple_mod_lm <tibble [1 × 4]> <opts[0]> <list [0]>\n2 rec_simple_mod_nn <tibble [1 × 4]> <opts[0]> <list [0]>\n```\n\n\n:::\n:::\n\n\n## Tuningparameter-Werte bestimmen\n\nWelche Tuningparameter hatten wir noch mal ausgewiesen?\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-8_4bef51d45bb14aa54d5bb0dc6d53831b'}\n\n```{.r .cell-code}\nmod_knn %>% \n  extract_parameter_set_dials()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCollection of 1 parameters for tuning\n\n identifier      type    object\n  neighbors neighbors nparam[+]\n```\n\n\n:::\n:::\n\n\nUpdaten wir die Parameter mit unseren Werten, also min. 5 Nachbarn und max. 20 Nachbarn.\n\n\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-9_9a957a71284abac4880479cb5361620f'}\n\n```{.r .cell-code}\nparams_knn <- \nmod_knn %>% \n  extract_parameter_set_dials() %>% \n  update(neighbors = neighbors(c(5, 20)))\n\nparams_knn\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCollection of 1 parameters for tuning\n\n identifier      type    object\n  neighbors neighbors nparam[+]\n```\n\n\n:::\n:::\n\n\nDiese Infos ergänzen wir jetzt in das Workflow-Set-Objekt für den Workflow mit der ID \"rec_simple_mod_nn\" unter der Spalte \"Options\":\n\n\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-10_4dfc408519d4bcb35eea59697a052fde'}\n\n```{.r .cell-code}\nwf_set <- \nwf_set %>% \n  option_add(param_info = params_knn, id = \"rec_simple_mod_nn\")  \n\nwf_set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id          info             option    result    \n  <chr>             <list>           <list>    <list>    \n1 rec_simple_mod_lm <tibble [1 × 4]> <opts[0]> <list [0]>\n2 rec_simple_mod_nn <tibble [1 × 4]> <opts[1]> <list [0]>\n```\n\n\n:::\n:::\n\n\n\n\n## Fitten\n\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-11_b87240d8da12bc9dddccdbfa1b04ea72'}\n\n```{.r .cell-code}\nwf_set_fit <-\n  wf_set %>% \n  workflow_map(resamples = rsmpls)\n\nwf_set_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id          info             option    result   \n  <chr>             <list>           <list>    <list>   \n1 rec_simple_mod_lm <tibble [1 × 4]> <opts[1]> <rsmp[+]>\n2 rec_simple_mod_nn <tibble [1 × 4]> <opts[2]> <tune[+]>\n```\n\n\n:::\n:::\n\n\n\nCheck:\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-12_a47b942de672cae3536af66d73906d8f'}\n\n```{.r .cell-code}\nwf_set_fit %>% pluck(\"result\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# Resampling results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits           id     .metrics         .notes          \n   <list>           <chr>  <list>           <list>          \n 1 <split [224/25]> Fold01 <tibble [2 × 4]> <tibble [0 × 3]>\n 2 <split [224/25]> Fold02 <tibble [2 × 4]> <tibble [0 × 3]>\n 3 <split [224/25]> Fold03 <tibble [2 × 4]> <tibble [0 × 3]>\n 4 <split [224/25]> Fold04 <tibble [2 × 4]> <tibble [0 × 3]>\n 5 <split [224/25]> Fold05 <tibble [2 × 4]> <tibble [0 × 3]>\n 6 <split [224/25]> Fold06 <tibble [2 × 4]> <tibble [0 × 3]>\n 7 <split [224/25]> Fold07 <tibble [2 × 4]> <tibble [0 × 3]>\n 8 <split [224/25]> Fold08 <tibble [2 × 4]> <tibble [0 × 3]>\n 9 <split [224/25]> Fold09 <tibble [2 × 4]> <tibble [0 × 3]>\n10 <split [225/24]> Fold10 <tibble [2 × 4]> <tibble [0 × 3]>\n\n[[2]]\n# Tuning results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits           id     .metrics          .notes          \n   <list>           <chr>  <list>            <list>          \n 1 <split [224/25]> Fold01 <tibble [16 × 5]> <tibble [0 × 3]>\n 2 <split [224/25]> Fold02 <tibble [16 × 5]> <tibble [0 × 3]>\n 3 <split [224/25]> Fold03 <tibble [16 × 5]> <tibble [0 × 3]>\n 4 <split [224/25]> Fold04 <tibble [16 × 5]> <tibble [0 × 3]>\n 5 <split [224/25]> Fold05 <tibble [16 × 5]> <tibble [0 × 3]>\n 6 <split [224/25]> Fold06 <tibble [16 × 5]> <tibble [0 × 3]>\n 7 <split [224/25]> Fold07 <tibble [16 × 5]> <tibble [0 × 3]>\n 8 <split [224/25]> Fold08 <tibble [16 × 5]> <tibble [0 × 3]>\n 9 <split [224/25]> Fold09 <tibble [16 × 5]> <tibble [0 × 3]>\n10 <split [225/24]> Fold10 <tibble [16 × 5]> <tibble [0 × 3]>\n```\n\n\n:::\n:::\n\n\n\n## Bester Kandidat\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-13_a06c5fcbffde95699e8177da266e51e5'}\n\n```{.r .cell-code}\nautoplot(wf_set_fit)\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-13-1.png){fig-pos='H' width=384}\n:::\n:::\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-14_417e698b7ae9161110d3764d64d21637'}\n\n```{.r .cell-code}\nrank_results(wf_set_fit, rank_metric = \"rmse\") %>% \n  filter(.metric == \"rmse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 9\n  wflow_id          .config .metric  mean std_err     n preprocessor model  rank\n  <chr>             <chr>   <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int>\n1 rec_simple_mod_nn Prepro… rmse     645.    23.7    10 recipe       near…     1\n2 rec_simple_mod_lm Prepro… rmse     646.    26.0    10 recipe       line…     2\n3 rec_simple_mod_nn Prepro… rmse     651.    22.4    10 recipe       near…     3\n4 rec_simple_mod_nn Prepro… rmse     653.    22.7    10 recipe       near…     4\n5 rec_simple_mod_nn Prepro… rmse     656.    22.0    10 recipe       near…     5\n6 rec_simple_mod_nn Prepro… rmse     661.    22.4    10 recipe       near…     6\n7 rec_simple_mod_nn Prepro… rmse     670.    23.3    10 recipe       near…     7\n8 rec_simple_mod_nn Prepro… rmse     680.    24.8    10 recipe       near…     8\n9 rec_simple_mod_nn Prepro… rmse     699.    30.9    10 recipe       near…     9\n```\n\n\n:::\n:::\n\n\n\nAm besten war das lineare Modell, aber schauen wir uns auch mal das knn-Modell an, v.a. um zu wissen, wie man den besten Tuningparameter-Wert sieht:\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-15_0d737fed01438c9bae7fb18e6739a6e1'}\n\n```{.r .cell-code}\nwf_knn <- \n  extract_workflow_set_result(wf_set_fit, \"rec_simple_mod_nn\")\n```\n:::\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-16_87accaa9f27324681a2ae4ab6f741f46'}\n\n```{.r .cell-code}\nwf_knn %>% autoplot()\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-16-1.png){fig-pos='H' width=384}\n:::\n:::\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-17_47608cc240d9cf6a63247d7c738b2086'}\n\n```{.r .cell-code}\nwf_knn %>% select_best()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  neighbors .config             \n      <int> <chr>               \n1        19 Preprocessor1_Model8\n```\n\n\n:::\n:::\n\n\n\n## Last Fit\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-18_3eaf0ec03c8a3024f9eac398b1a0be53'}\n\n```{.r .cell-code}\nbest_wf <-\n  wf_set_fit %>% \n  extract_workflow(\"rec_simple_mod_lm\")\n```\n:::\n\n\n\nFinalisieren müssen wir diesen Workflow nicht, da er keine Tuningparameter hatte.\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-19_ff72cd5a18964b17f5658dafb569d3f9'}\n\n```{.r .cell-code}\nfit_final <-\n  best_wf %>% \n  last_fit(d_split)\n```\n:::\n\n\n\n## Modellgüte im Test-Set\n\n\n::: {.cell hash='wfsets_penguins02_cache/html/unnamed-chunk-20_12b24662533c45e8fe402d2658281b0c'}\n\n```{.r .cell-code}\ncollect_metrics(fit_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard     670.    Preprocessor1_Model1\n2 rsq     standard       0.369 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n---\n\nCategories: \n\n- R\n- statlearning\n- tidymodels\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}