{
  "hash": "18ff0386ba516b2db0720b1ae227e830",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: tidymodels-ames-03\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nextol: 1\nexpoints: 1\ncategories:\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\ndate: '2023-05-17'\nslug: tidymodels-ames-03\ntitle: tidymodels-ames-03\nexecute:\n  cache: true\n  eval: false\n---\n\n\n\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nBerechnen Sie ein lineares Modell mit tidymodels und zwar anhand des `ames` Datensatzes.\n\nModellgleichung: `Sale_Price ~ Gr_Liv_Area, data = ames`.\n\nBerechnen Sie ein multiplikatives (exponenzielles) Modell.\n\nRücktransformieren Sie die Log-Werte in \"Roh-Dollar\".\n\nGeben Sie den mittleren Vorhersagewert an als Lösung.\n\n*Hinweise*:\n\n- Fixieren Sie die Zufallszahlen auf den Startwert 42.\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(ames)\n```\n:::\n\n\n\nMultiplikatives Modell:\n\n\n::: {.cell}\n\n```{.r .cell-code}\names <- \n  ames %>% \n  mutate(Sale_Price = log10(Sale_Price)) %>% \n  select(Sale_Price, Gr_Liv_Area)\n```\n:::\n\n\nNicht vergessen: AV-Transformation in beiden Samples!\n\n\nDatensatz aufteilen:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\names_split <- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train <- training(ames_split)\names_test  <-  testing(ames_split)\n```\n:::\n\n\n\n\nModell definieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <-\n  linear_reg() # engine ist \"lm\" im Default\n```\n:::\n\n\n\n\nModell fitten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 <-\n  m1 %>% \n  fit(Sale_Price ~ Gr_Liv_Area, data = ames)\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 %>% pluck(\"fit\") \n```\n:::\n\n\n\n\nModellgüte im Train-Sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1_performance <-\n  fit1 %>% \n  extract_fit_engine()  # identisch zu pluck(\"fit\")\n```\n:::\n\n\n\n\nModellgüte im Train-Sample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1_performance %>% summary()\n```\n:::\n\n\n\nR-Quadrat via easystats:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(easystats)\nfit1_performance %>% r2()  # rmse()\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(fit1_performance)  # ähnlich zu parameters()\n```\n:::\n\n\n\n\nVorhersagen im Test-Sample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds <- predict(fit1, new_data = ames_test)  # liefert TABELLE (tibble) zurück\nhead(preds)\n```\n:::\n\n\n`preds` ist ein Tibble, also müssen wir noch die Spalte `.pred.` herausziehen, z.B. mit `pluck(preds, \".pred\")`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds_vec <- preds$.pred\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_test2 <-\n  ames_test %>% \n  mutate(preds = pluck(preds, \".pred\"),  # pluck aus der Tabelle rausziehen\n         .pred = preds_vec)  # oder  mit dem Dollar-Operator\n\nhead(ames_test2)\n```\n:::\n\n\nOder mit `unnest`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_test2 <-\n  ames_test %>% \n  mutate(preds = preds) %>% \n  unnest(preds) # Listenspalte \"entschachteln\"\n\nhead(ames_test2)\n```\n:::\n\n\nOder wir binden einfach die Spalte an den Tibble:\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_test2 <-\n  ames_test %>% \n  bind_cols(preds = preds)  # nimmt Tabelle und bindet die Spalten dieser Tabelle an eine Tabelle\n\nhead(ames_test2)\n```\n:::\n\n\n\n\nModellgüte im Test-Sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsq(ames_test2,\n    truth = Sale_Price,\n    estimate = .pred)\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsol <- 0.51679\n```\n:::\n\n\n\n\nZur Interpretation von Log10-Werten\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5e5\n5*10^5 - 500000\n```\n:::\n\n\n\n\nRücktransformation (ohne Bias-Korrektur):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_test2 <-\n  ames_test2 %>% \n  mutate(pred_raw = 10^(.pred))\n```\n:::\n\n\n\n\nMittelwert der Vorhersagen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsol <- mean(ames_test2$pred_raw)\nsol\n```\n:::\n\n\n\n\n\n\n---\n\nCategories: \n\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}