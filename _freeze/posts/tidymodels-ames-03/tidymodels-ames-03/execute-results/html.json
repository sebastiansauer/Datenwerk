{
  "hash": "d95d344e44b960984f2d391378b67e45",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: tidymodels-ames-03\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nextol: 1\nexpoints: 1\ncategories:\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\ndate: '2023-05-17'\nslug: tidymodels-ames-03\ntitle: tidymodels-ames-03\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nBerechnen Sie ein lineares Modell mit tidymodels und zwar anhand des `ames` Datensatzes.\n\nModellgleichung: `Sale_Price ~ Gr_Liv_Area, data = ames`.\n\nBerechnen Sie ein multiplikatives (exponenzielles) Modell.\n\nRücktransformieren Sie die Log-Werte in \"Roh-Dollar\".\n\nGeben Sie den mittleren Vorhersagewert an als Lösung.\n\n*Hinweise*:\n\n- Fixieren Sie die Zufallszahlen auf den Startwert 42.\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(ames)\n```\n:::\n\n\n\nMultiplikatives Modell:\n\n\n::: {.cell}\n\n```{.r .cell-code}\names <- \n  ames %>% \n  mutate(Sale_Price = log10(Sale_Price)) %>% \n  select(Sale_Price, Gr_Liv_Area)\n```\n:::\n\n\nNicht vergessen: AV-Transformation in beiden Samples!\n\n\nDatensatz aufteilen:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\names_split <- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train <- training(ames_split)\names_test  <-  testing(ames_split)\n```\n:::\n\n\n\n\nModell definieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <-\n  linear_reg() # engine ist \"lm\" im Default\n```\n:::\n\n\n\n\nModell fitten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 <-\n  m1 %>% \n  fit(Sale_Price ~ Gr_Liv_Area, data = ames)\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 %>% pluck(\"fit\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nstats::lm(formula = Sale_Price ~ Gr_Liv_Area, data = data)\n\nCoefficients:\n(Intercept)  Gr_Liv_Area  \n  4.8552133    0.0002437  \n```\n\n\n:::\n:::\n\n\n\n\nModellgüte im Train-Sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1_performance <-\n  fit1 %>% \n  extract_fit_engine()  # identisch zu pluck(\"fit\")\n```\n:::\n\n\n\n\nModellgüte im Train-Sample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1_performance %>% summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nstats::lm(formula = Sale_Price ~ Gr_Liv_Area, data = data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.02587 -0.06577  0.01342  0.07202  0.39231 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 4.855e+00  7.355e-03  660.12   <2e-16 ***\nGr_Liv_Area 2.437e-04  4.648e-06   52.43   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1271 on 2928 degrees of freedom\nMultiple R-squared:  0.4842,\tAdjusted R-squared:  0.484 \nF-statistic:  2749 on 1 and 2928 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nR-Quadrat via easystats:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(easystats)\nfit1_performance %>% r2()  # rmse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# R2 for Linear Regression\n       R2: 0.484\n  adj. R2: 0.484\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(fit1_performance)  # ähnlich zu parameters()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|term        |  estimate| std.error| statistic| p.value|\n|:-----------|---------:|---------:|---------:|-------:|\n|(Intercept) | 4.8552133| 0.0073550| 660.12345|       0|\n|Gr_Liv_Area | 0.0002437| 0.0000046|  52.42983|       0|\n\n</div>\n:::\n:::\n\n\n\n\nVorhersagen im Test-Sample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds <- predict(fit1, new_data = ames_test)  # liefert TABELLE (tibble) zurück\nhead(preds)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|    .pred|\n|--------:|\n| 5.073540|\n| 5.179049|\n| 5.307462|\n| 5.112527|\n| 5.180998|\n| 5.095714|\n\n</div>\n:::\n:::\n\n\n`preds` ist ein Tibble, also müssen wir noch die Spalte `.pred.` herausziehen, z.B. mit `pluck(preds, \".pred\")`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds_vec <- preds$.pred\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_test2 <-\n  ames_test %>% \n  mutate(preds = pluck(preds, \".pred\"),  # pluck aus der Tabelle rausziehen\n         .pred = preds_vec)  # oder  mit dem Dollar-Operator\n\nhead(ames_test2)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Sale_Price| Gr_Liv_Area|    preds|    .pred|\n|----------:|-----------:|--------:|--------:|\n|   5.021189|         896| 5.073540| 5.073540|\n|   5.235528|        1329| 5.179049| 5.179049|\n|   5.595972|        1856| 5.307462| 5.307462|\n|   5.152288|        1056| 5.112527| 5.112527|\n|   5.264818|        1337| 5.180998| 5.180998|\n|   4.982271|         987| 5.095714| 5.095714|\n\n</div>\n:::\n:::\n\n\nOder mit `unnest`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_test2 <-\n  ames_test %>% \n  mutate(preds = preds) %>% \n  unnest(preds) # Listenspalte \"entschachteln\"\n\nhead(ames_test2)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Sale_Price| Gr_Liv_Area|    .pred|\n|----------:|-----------:|--------:|\n|   5.021189|         896| 5.073540|\n|   5.235528|        1329| 5.179049|\n|   5.595972|        1856| 5.307462|\n|   5.152288|        1056| 5.112527|\n|   5.264818|        1337| 5.180998|\n|   4.982271|         987| 5.095714|\n\n</div>\n:::\n:::\n\n\nOder wir binden einfach die Spalte an den Tibble:\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_test2 <-\n  ames_test %>% \n  bind_cols(preds = preds)  # nimmt Tabelle und bindet die Spalten dieser Tabelle an eine Tabelle\n\nhead(ames_test2)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Sale_Price| Gr_Liv_Area|    .pred|\n|----------:|-----------:|--------:|\n|   5.021189|         896| 5.073540|\n|   5.235528|        1329| 5.179049|\n|   5.595972|        1856| 5.307462|\n|   5.152288|        1056| 5.112527|\n|   5.264818|        1337| 5.180998|\n|   4.982271|         987| 5.095714|\n\n</div>\n:::\n:::\n\n\n\n\nModellgüte im Test-Sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsq(ames_test2,\n    truth = Sale_Price,\n    estimate = .pred)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|.metric |.estimator | .estimate|\n|:-------|:----------|---------:|\n|rsq     |standard   | 0.5167906|\n\n</div>\n:::\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsol <- 0.51679\n```\n:::\n\n\n\n\nZur Interpretation von Log10-Werten\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5e5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5e+05\n```\n\n\n:::\n\n```{.r .cell-code}\n5*10^5 - 500000\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\nRücktransformation (ohne Bias-Korrektur):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_test2 <-\n  ames_test2 %>% \n  mutate(pred_raw = 10^(.pred))\n```\n:::\n\n\n\n\nMittelwert der Vorhersagen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsol <- mean(ames_test2$pred_raw)\nsol\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 175973.8\n```\n\n\n:::\n:::\n\n\n\n\n\n\n---\n\nCategories: \n\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}