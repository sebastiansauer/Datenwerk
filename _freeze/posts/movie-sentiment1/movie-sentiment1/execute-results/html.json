{
  "hash": "a6cd2a4f9771aff2579d08535dbb02f1",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: movie-sentiments1\nextype: schoice\nexsolution: r mchoice2string(syntax_chosen_df$correct, single = TRUE)\nexshuffle: no\ncategories:\n- textmining\n- imdb\n- schoice\ndate: '2023-11-11'\nslug: movie-sentiment1\ntitle: movie-sentiment1\n\n---\n\n\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nEine typische Aufgabe des Textminings ist die Sentimentanalyse.\nBetrachten wir dazu einen Datensatz des Filmbewertungsportal [IMDB](https://www.imdb.com/). Das Portal veröffentlicht Bewertungen (quantitativ und qualitativ, d.h. als Score oder Bewertung/Review) zu Filmen der Nutzerinnen und Nutzer.\nDer Datensatz kann über [Kaggle](https://www.kaggle.com/lakshmi25npathi/imdb-dataset-of-50k-movie-reviews) bezogen werden.\n\nIm Rahmen einer Fallstudie soll eine Sentimentanalyse wie folgt abgearbeitet werden:\n\n1. Daten in R importieren\n2. Relevante Spalten auswählen (die die Reviews der Nutzer enthalten)\n3. Daten in das \"Tidytext-Format\" überführen\n4. Nicht-Wörter (z.B. Zahlen) entfernen\n5. Stopwörter entfernen\n6. Sentimentanalyse durchführen zur Identifikation der Grundemotionen\n7. Visualisierung der Intensität der Emotionen der 10 häufigsten Wörter (sortierte Balken)\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nHinweise:\n\n- Hier ist nur ein Teil des Datensatzes dargestellt (aus Gründen der Einfachheit).\n- Gehen Sie davon aus, dass die Daten unter dem Pfad verfügbar sind, der in dieser Variable gespeichert ist: `path_to_data`. Die relevanten Spalten sind dort schon ausgewählt.\n\n\nWelcher der folgenden R-Syntaxen führt diese Analyse korrekt aus? Wählen Sie die am besten passende Antwort!\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in inner_join(., emo): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 18 of `x` matches multiple rows in `y`.\nℹ Row 11267 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n**Option A** \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nlibrary(tidytext)\nlibrary(tidyverse)\n\nd <- read_csv(path_to_data)\n\nstopwords <- get_stopwords()\nemo <- get_sentiments()\n\nd %>% \n  select(review) %>% \n  unnest_tokens(word, review) %>% \n  filter(str_detect(word, '[a-z]+')) %>% \n  anti_join(stopwords) %>% \n  inner_join(emo) %>% \n  count(word) %>% \n  slice_head(n = 10) %>% \n  mutate(word = fct_reorder(word, n)) %>% \n  ggplot(aes(n, word)) +\n  geom_bar()\n```\n\n\n:::\n:::\n\n\n\n**Option B** \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nlibrary(tidytext)\nlibrary(tidyverse)\n\nd <- read_csv(path_to_data)\n\nstopwords <- get_stopwords()\nemo <- get_sentiments('bing')\n\nwordcount_plot1 <- \nd %>% \n  select(review) %>% \n  unnest_tokens(word, review) %>% \n  filter(str_detect(word, '[a-z]+')) %>% \n  anti_join(stopwords) %>% \n  left_join(emo) %>% \n  count(word, sort = TRUE) %>% \n  slice_head(n = 10) %>% \n  mutate(word = fct_reorder(word, n)) %>% \n  ggplot(aes(n, word)) +\n  geom_col()\n```\n\n\n:::\n:::\n\n\n\n**Option C** \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nlibrary(tidytext)\nlibrary(tidyverse)\n\nd <- read_csv(path_to_data)\n\nstopwords <- get_stopwords()\nemo <- get_sentiments('loughran')\n\nwordcount_plot1 <- \nd %>% \n  select(review) %>% \n  unnest_tokens(word, review) %>% \n  filter(str_detect(word, '\\w.')) %>% \n  anti_join(stopwords) %>% \n  inner_join(emo) %>% \n  count(word, sort = TRUE) %>% \n  slice_head(n = 10) %>% \n  mutate(word = fct_reorder(word, n)) %>% \n  ggplot(aes(n, word)) +\n  geom_col()\n```\n\n\n:::\n:::\n\n\n**Option D** \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nkeine der genannten\n```\n\n\n:::\n:::\n\n\n\n**Option E** \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nlibrary(tidytext) \nlibrary(tidyverse)\n\nd <- read_csv(path_to_data)\n\nstopwords <- get_stopwords()\nemo <- get_sentiments('nrc')\n\nwordcount_plot1 <- \nd %>% \n  select(review) %>% \n  unnest_tokens(word, review) %>% \n  filter(str_detect(word, '[a-z]+')) %>% \n  anti_join(stopwords) %>% \n  inner_join(emo) %>% \n  count(word, sort = TRUE) %>% \n  slice_head(n = 10) %>% \n  mutate(word = fct_reorder(word, n)) %>% \n  ggplot(aes(n, word)) +\n  geom_col()\n```\n\n\n:::\n:::\n\nAnswerlist\n----------\n* Syntax A\n* Syntax B\n* Syntax C\n* Syntax D\n* Syntax E\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\nDie richtige Syntax lautet Syntax E.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nlibrary(tidytext) \nlibrary(tidyverse)\n\nd <- read_csv(path_to_data)\n\nstopwords <- get_stopwords()\nemo <- get_sentiments('nrc')\n\nwordcount_plot1 <- \nd %>% \n  select(review) %>% \n  unnest_tokens(word, review) %>% \n  filter(str_detect(word, '[a-z]+')) %>% \n  anti_join(stopwords) %>% \n  inner_join(emo) %>% \n  count(word, sort = TRUE) %>% \n  slice_head(n = 10) %>% \n  mutate(word = fct_reorder(word, n)) %>% \n  ggplot(aes(n, word)) +\n  geom_col()\n```\n\n\n:::\n:::\n\n\nDas Diagramm sieht dann so aus:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](unnamed-chunk-7-1.png){fig-pos='H' width=384}\n:::\n:::\n\nAnswerlist\n----------\n* Falsch\n* Falsch\n* Falsch\n* Falsch\n* Richtig\n\n\n\n\n\n\n\n---\n\nCategories: \n\n- textmining\n- imdb\n- schoice\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}