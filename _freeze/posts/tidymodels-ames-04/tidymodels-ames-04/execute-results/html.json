{
  "hash": "adbedcbdab4d5cca522d276974ba7d0c",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexname: tidymodels-ames-04\nextype: num\nexsolution: r fmt(sol)\nexshuffle: no\nextol: 1\nexpoints: 1\ncategories:\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\ndate: '2023-05-17'\nslug: tidymodels-ames-04\ntitle: tidymodels-ames-04\nexecute:\n  cache: true\n  eval: false\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Aufgabe\n\nBerechnen Sie ein lineares Modell mit tidymodels und zwar anhand des `ames` Datensatzes.\n\nModellgleichung: `Sale_Price ~ Gr_Liv_Area, data = ames`.\n\nBerechnen Sie ein multiplikatives (exponenzielles) Modell.\n\nGesucht ist R-Quadrat als Maß für die Modellgüte im *TEST-Sample*.\n\n\n\n*Hinweise*:\n\n- Fixieren Sie die Zufallszahlen auf den Startwert 42.\n- Verwenden Sie die Funktion `last_fit`.\n\n\n\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n# Lösung\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(ames)\n```\n:::\n\n\n\nMultiplikatives Modell:\n\n\n::: {.cell}\n\n```{.r .cell-code}\names <- \n  ames %>% \n  mutate(Sale_Price = log10(Sale_Price)) %>% \n  select(Sale_Price, Gr_Liv_Area)\n```\n:::\n\n\nNicht vergessen: AV-Transformation in beiden Samples!\n\n\nDatensatz aufteilen:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\names_split <- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train <- training(ames_split)\names_test  <-  testing(ames_split)\n```\n:::\n\n\n\n\nModell definieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <-\n  linear_reg() # engine ist \"lm\" im Default\n```\n:::\n\n\n\nRezept definieren:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec1 <- \n  recipe(Sale_Price ~ Gr_Liv_Area, data = ames) \n```\n:::\n\n\n\n\n\nVorhersagen mit `last_fit`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1_last <- last_fit(object = m1, preprocessor = rec1, split = ames_split)  \nfit1_last\n```\n:::\n\n\nWir bekommen ein Objekt, in dem Fit, Modellgüte, Vorhersagen und Hinweise enthalten sind.\n\nOhne Rezept lässt sich `last_fit` nicht anwenden.\n\nVorhersagen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1_last %>% collect_predictions() %>% \n  head()\n```\n:::\n\n\n\nModellgüte im Test-Sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1_last %>% collect_metrics()\n```\n:::\n\n\n\n\nR-Quadrat:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsol <- 0.517\nsol\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\nCategories: \n\n- ds1\n- tidymodels\n- prediction\n- yacsda\n- statlearning\n- num\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}