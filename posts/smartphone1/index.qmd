---
date: 2024-05-07  # HEUTIGES DATUM EINTRAGEN
draft: FALSE   # ACHTUNG DRAFT STEHT AUF TRUE!
title: smartphone1

execute: 
  eval: true 
  
highlight-style: arrow 
cache: true

toc: true
number-sections: true

extype: string
exsolution: ""
exshuffle: no
categories:
- R  # ENTER CATEGORIES HERE
- eda
- datawrangling
- vis 
- yacsda


  # - bib/bib.bib
bibliography: "../../ses.bib"



---



# Aufgabe


*In dieser Fallstudie analysieren Sie die Ergebnisse einer Umfrage zum Thema Smartphone-Nutzung. *

Kernst√ºck der Umfrage ist die Smartphone-Sucht-Skala [@kwon_smartphone_2013]. Eine Studie fand, dass ca. ein Siebtel der Studierenden s√ºchtig nach ihrem Smartphone sind [@haug_smartphone_2015]; demnach k√∂nnte dem Thema eine hohe Bedeutsamkeit zukommen.

1. Importieren Sie den [Datensatz zur Handynutzung](https://docs.google.com/spreadsheets/d/1SWMj4rIIIJdAsfsSKQHSg8jHr_OuKLpJx_0XV4LGnH0/edit?usp=sharing) von Google-Docs.
2. Benennen Sie die Spalten um und zwar nach folgendem Muster: `itemXY`, wobei `XY` die Nummer der Spalte ist. Sichern Sie die urspr√ºnglichen Spaltennamen in einem Vektor. Tipp: Der Funktion `names(meine_tabelle)` k√∂nnen Sie einen Vektor mit neuen Spaltennamen √ºbergeben.
3. Berechnen Sie f√ºr die Items der Smartphone-Addiction-Scale den Mittelwert pro Person. Tipp: Erstellen Sie einen Dataframe mit den entsprechenden Items und nutzen Sie dann die Funktion `rowMeans(mein_dataframe)`, um den Mittelwert √ºber mehrere Spalten f√ºr jede Zeile zu berechnen ("Score").
4. Visualisieren Sie die Verteilung des Scores getrennt f√ºr die Geschlechter.
5. Nach einer Quelle [@kwon_smartphone_2013] liegt der Cutoff-Wert f√ºr Sucht bei 3.1 (M√§nner) bzw. 3.3 (Frauen). Bestimmen Sie den Anteil abh√§ngiger Personen (pro Geschlecht).
6. Das Item `i13` ist ein Versuch, mit einem *einzelnen* Item zu messen, ob jemand s√ºchtig nach seinem Smartphone ist (Item-Label: "Ich.w√ºrde.sagen..dass.ich.smartphone.s√ºchtig.bin."). Visualisieren Sie den Zusammenhang dieses Items mit dem Score.
6. Visualsieren Sie den Anteil abh√§ngiger Personen.
7. Berechnen Sie, wie viel Geld f√ºr das zuletzt gekaufte Handy im Schnitt ausgegeben wurde. Gruppieren Sie dabei nach dem Betriebsystem.
8. Wer gibt mehr Geld f√ºr das Handy aus: Frauen oder M√§nner? Beantworten Sie die Frage anhand des Medians. 
9. Visualisieren Sie den Median des Geldausgebens f√ºr das Handy, getrennt nach Geschlechtern


:::{.callout-tip}
Nutzen Sie ChatGPT oder einen anderen Bot, um sich Hilfe mit dem R-Code zu holen. $\square$
:::

:::{.callout-tip}
Es wird (fast) nie von Ihnen verlangt, dass Sie eine Aufgabe mit einem bestimmten R-Befehl l√∂sen. Wenn Ihnen ein bestimmter R-Befehl nicht zusagt (oder Sie ihn nicht kennen oder verstehen) -- dann nehmen Sie einfach einen anderen R-Befehl, der Ihnen mehr zusagt. $\square$
:::


:::{.callout-note}
Beachten Sie die [Hinweise des Datenwerks](https://datenwerk.netlify.app/hinweise). $\square$
:::



# L√∂sung

```{r}
#| include: false
library(tidyverse)
library(DataExplorer)
library(ggpubr)
```


## Daten importieren


```{r}
data_path <- "https://raw.githubusercontent.com/sebastiansauer/statistik1/main/daten/Smartphone-Nutzung%20(Responses)%20-%20Form%20responses%201.csv"
smartphone_raw <- read.csv(data_path)
```

Die Anzahl der Spalten einer Tabelle kann man sich √ºbrigens z.B. mit `ncol` ausgeben lassen:

```{r}
anz_spalten <- ncol(smartphone_raw)
anz_spalten
```

Unsere Datentabelle hat also `r anz_spalten` Spalten.

## Spalten umbenennen

Zun√§chst sichern wir die alten Spaltennamen in einen Vektor:

```{r}
item_labels_old <- names(smartphone_raw)
item_labels_old
```

Variablen aus psychologischen Frageb√∂gen nennt man √ºbrigens oft *items*.

Und dann nennen wir die Spaltennamen um. Das geht mit der Funktion `names(smartphone_raw) <- `, der wir einen Vektor mit neuen Spaltennamen √ºbergeben, z.B. so:

```{r}
#| error: true
item_labels_new <- c( "item1",  "item2", "item3", "item4",
                      "item5", "item6",  "item7", "item8",
                      "item9",  "item10", "item11", "item12",
                      "item13", "item14", "item15", "item16",
                      "item17", "item18")
```

Wichtig ist, dass ihr Vektor `item_labels_new` genau so viele Elemente hat, wie die Datentabelle Spalten hat. 

Jetzt k√∂nnen Sie der Funktion `names()` den neuen Vektor `item_labels_new` zuweisen und haben damit die Spaltenanmen ge√§ndert:


```{r}
names(smartphone_raw) <- item_labels_new
```


Den Vektor `item_labels_new` zu erstellen, war Ihnen zu viel Tipperei? Ja, mir auch.
Schneller geht's mit der Funktion `paste0`.
Das erkl√§rt sich am einfachsten mit einem Beispiel:

```{r}
paste0("item", 1:3)
```

Sehen Sie, was `paste0` macht? Es f√ºgt zwei Vektoreneinen Rei√üverschluss zusammen. Da `item` nur aus einem Element besteht, wird es `item` einfach auf die richtige L√§nge erh√∂ht.

Der Doppelpunkt in `1:3` bedeutet "von 1 bis 3".

Also:

```{r}
names(smartphone_raw) <- paste0("item",1:anz_spalten)
```


Sie m√∂chten lieber zweistellige Nummern f√ºr die Spalten, also 01, 02, ..., 09, 10, ...? Gute Idee. Aber wie macht man das?
Eine einfache L√∂sung: Fragen Sie ChatGPT!

>    üë©‚Äçüéì: I want a string of the type "itemXY", where XY is a number between 0 and 18. Make sure to use two digits. Use the R function `paste0`.


>     ü§ñ: üò∏


## Vertiefung: Fingerabdruck der Datentabelle

Mit dem R-Paket `visdat` bekommt man einen "Fingerabdruck" der Datentabelle.

Am einfachsten erkl√§rt sich das an einem Beispiel. Schauen Sie sich das folgende Diagramm mal an. Es zeigt Ihnen den Datentyp pro Spalte und au√üerdem fehlende Werte.


```{r}
library(visdat)

vis_dat(smartphone_raw)
```

Das ist deutlich √ºbersichtlicher als eine Excel-Tabelle, wenn es darum geht, die Datenstruktur grob zu verstehen.



## Mittelwert der Smartphone-Addiction-Scale

```{r}
smartphone_addiction_mittelwert <- 
smartphone_raw |> 
  select(item3:item12) |> 
  rowMeans()
```

Wir erhalten einen Vektor mit den Mittwerten (Score) pro Person f√ºr die Skala *Smartphone-Abh√§ngigkeit*:

```{r}
head(smartphone_addiction_mittelwert)
```


Diesen Vektor f√ºgen wir dann unseren Daten hinzu. Au√üerdem benennen wir die Spalte `item15` in `sex` um, damit wir uns merken k√∂nnen, in welcher Spalte das Geschlecht codiert ist.

```{r}
smartphone <-
  smartphone_raw |> 
  mutate(smartphone_addiction_mean = smartphone_addiction_mittelwert) |> 
  rename(sex = item15) |>   
  filter(sex == "Frau" | sex == "Mann") 
```


Mit `rename(neuer_name = alter_name)` k√∂nnen Sie die Namen von Spalten Ihrer Datentabelle √§ndern.

>    üßë‚Äçüéì  Also das mit `rename` h√§tte ich jetzt nicht gewusst.

>    üë©‚Äçüè´ Dann frag mal ChatGPT.

>    ü§ñ Ja, bitte!!


Alternativ k√∂nnen Sie die folgende, etwas fortgeschrittenere Syntax nutzen:


```{r}
smartphone2 <- 
smartphone_raw |> 
  rowwise() |> 
  mutate(smartphone_addiction_mean = mean(c_across(item3:item12))) 
```



## Score visualisieren

Leider kann `DataExplorer` nicht mehrere Gruppen in einem Dichtediagramm anzeigen. Wir m√ºssten also mit `DataExplorer` zwei Diagramme erstellen, eines f√ºr Frauen und eines f√ºr M√§nner.
Eleganter geht es mit dem Paket `ggpubr`

```{r}
smartphone |> 
  ggdensity(x = "smartphone_addiction_mean", 
            color = "sex")
```


## Anteil Smartphone-Abh√§ngigkeit

Mit `case_when` erstellen wir folgende Regel:

- "addicted": *wenn* der Score > 3.1 *und* das Geschlecht "Mann" ist bzw.
- "addicted": *wenn* der Score > 3.3 *und* das Geschlecht "Frau" ist bzw.
- "nicht addicted": ansonsten

```{r}
smartphone <-
  smartphone |> 
  mutate(is_addicted =
           case_when(smartphone_addiction_mean > 3.1 & sex == "Mann" ~ "addicted",
                     smartphone_addiction_mean > 3.3 & sex == "Frau" ~ "addicted",
                     TRUE ~ "not-addicted"))
```

Jetzt haben wir die Spalte `is_addicted`, die f√ºr jede Person (Zeile) angibt, 
ob die Person addicted ist.
Nun z√§hlen wir die Anzahl (`n`) aus, und zwar pro Geschlechtsgruppe.
Weil es praktisch ist, rechen wir die Anzahl noch in einen Anteil (`proportion`) um.

```{r}
smartphone_count <- 
smartphone |> 
  group_by(sex) |> 
  count(is_addicted) |> 
  mutate(is_addicted_proportion = n / sum(n))

smartphone_count
```


## Smartphone-Sucht, mit einzelnen Item gemessen


```{r}
smartphone |> 
  select(smartphone_addiction_mean, item13) |> 
  drop_na() |> 
  plot_scatterplot(by = "smartphone_addiction_mean")
```


Es scheint einen Zusammenhang zwischen `item13` und `smartphone_addiction_mean` zu geben.


## Anteil der Abh√§ngigen visualisieren

Der Anteil der abh√§ngigen Personen ist in beiden Geschlechtern gleich hoch:

```{r}
smartphone_count |> 
  plot_bar(by = "sex")
```


Hier noch eine alternative Visualisierung mit dem Paket `ggpubr`:


```{r}
smartphone_count |> 
  ggbarplot(x = "sex", y = "n", fill = "is_addicted")
```



## Kosten nach Betriebssystem


```{r}
smartphone |> 
  group_by(item17) |> 
  summarise(price_mean = mean(item18, na.rm = TRUE))
```


## Kosten nach Geschlecht


```{r}
smartphone |> 
  group_by(sex) |> 
  summarise(price_median = median(item18, na.rm = TRUE))
```

M√§nner geben im Median 300 Euro mehr aus.


:::{.callout-tip}
Wenn Sie nicht mehr wissen, was z.B. `na.rm = TRUE` bedeutet, dann einfach googeln oder einen ChatBot fragen. In der Regel ist die Frage dann in zwei Minuten beantwortet. $\square$
:::



## Kosten nach Geschlecht visualisieren


```{r}
smartphone |> 
  select(sex, item18) |> 
  plot_boxplot(by = "sex")
```

Wie man sieht ist der Median bei den M√§nnern h√∂her als bei den Frauen. Allerdings f√§llt der Median der M√§nner aus das dritte Quartil, was vermuten l√§sst, dass da irgendwas nicht stimmt. 
Schauen wir uns die Daten n√§her an:


```{r}
smartphone |> 
  filter(sex == "Mann")
```

Ah, es sind einfach sehr wenig M√§nner in diesem Datensatz enthalten.

