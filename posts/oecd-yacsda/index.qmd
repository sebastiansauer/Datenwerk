---
date: 2024-05-08  # HEUTIGES DATUM EINTRAGEN
draft: FALSE   # ACHTUNG DRAFT STEHT AUF TRUE!
title: oecd-yacsda
execute: 
  
  eval: true 
highlight-style: arrow 
cache: true
toc: true
number-sections: true
extype: string
exsolution: ""
exshuffle: no
categories:
- eda  # ENTER CATEGORIES HERE
- datawrangling
- vis
- yacsda
- R 


bibliography: "/Users/sebastiansaueruser/Google Drive/Literatur/refmgt/library-ses.bib"
csl: "/Users/sebastiansaueruser/Google Drive/Literatur/refmgt/apa7.csl"

---







```{r knitr-setup, echo = FALSE}
knitr::opts_chunk$set(
  comment = "#>",
  collapse = TRUE,
  message = FALSE,
  warning = FALSE,
  cache = TRUE,
  out.width = "100%",
  fig.align = 'center',
  fig.width = 6,
  fig.asp = 0.618,  # 1 / phi
  fig.show = "hold",
  size = "tiny"
)
```


**Fallstudie: Explorative Datenanalyse zum Datensatz "OECD Wellbeing"**

(YACSDA: Yet another Case Study on Data Analysis)



# Grundlagen

:::{.callout-tip}
Wenn Sie nicht mehr weiter wissen, googeln Sie nach dem Problem. Oder fragen Sie einen ChatBot, z.b. ChatGPT. $\square$
:::


:::{.callout-important}
Im Folgenden werden mitunter mehrere Lösungswege präsentiert. Sie können sich den Weg aussuchen, der Ihnen am besten gefällt. Sie müssen *nicht* alle Wege verstehen oder gar beherrschen. Einer reicht. $\square$
:::

## Hintergrund



In diesem Post untersuchen wir einige Aspekte der explorativen Datenanalyse für den Datensatz `oecd wellbeing` aus dem Jahr 2016.

*Hinweis*: Als *Vertiefung*  gekennzeichnete Abschnitt sind *nicht* prüfungsrelevant.





## Benötigte Pakete

Ein Standard-Paket zur grundlegenden Datenanalyse bzw. des Datenjudos ist `tidyverse`. Darüber hinaus verwenden wir noch zwei Pakete zur Visualisierung und eines für den Komfort.

```{r libs}
library(tidyverse)  # Datenjudo
library(easystats)  # Komfort 
library(DataExplorer)  # Data vis
library(ggpubr)  # Data vis
```



## Datensatz laden

Der Datensatz kann [hier](https://stats.oecd.org/Index.aspx?DataSetCode=RWB) bezogen werden.

Doi: https://doi.org/10.1787/data-00707-en.


Falls der Datensatz lokal (auf Ihrem Rechner) vorliegt, können Sie ihn in gewohnter Manier importieren. Geben Sie dazu den Pfad zum Datensatz ein; bei mir sieht das so aus:





```{r load-data}
#| eval: false
oecd <- read.csv("/Users/sebastiansaueruser/datasets/oecd_wellbeing.csv")
```


Liegt die Datendatei im *gleichen Verzeichnis*  wie Ihre R-/Quarto-/Rmd-Datei, dann brauchen Sie *nur* den Dateinamen, *nicht* den Pfad, anzugeben.


*Alternativ* können Sie die Daten direkt von einem Server beziehen:

```{r}
oecd <- read.csv("https://raw.githubusercontent.com/sebastiansauer/2021-sose/master/data/OECD/oecd-wellbeing.csv")
```



## Erster Blick


```{r}
glimpse(oecd)
```


Wie `glimpse()` aufzeigt, liegen also einige qualitative (kategoriale, `chr`, vom Typ "Text") und einige quantitative (metrische, `dbl`) Variablen vor. 
Die qualitativen Variablen sind für eine direkte Analyse weniger interessant; vielmehr ist es interessant, die Statistiken auf die *Gruppen* (Stufen, Level) der qualitativen Variablen aufzusplitten.

Betrachten wir aber zu Beginn die metrischen Variablen einzeln (univariat).


## Deskriptive Statistiken zu den metrischen Variablen, einzeln (univariat)

Zentrale Statistiken zu den metrischen Variablen lassen sich auf mehreren Wegen mit R berechnen. Hier ist ein Weg:

```{r}
#| eval: false
describe_distribution(oecd)
```



```{r}
#| echo: false
describe_distribution(oecd) |> knitr::kable(digits=2)
```


Jetzt gehen wir weiter zur Visualisierung der Verteilung der metrischen Variablen.
Auch hier gibt es wieder viele Lösungen.

Es reicht, wenn Sie mit *einer* Lösung vertraut sind.

### Mit ggpubr

```{r}
oecd |> 
gghistogram(x = "Life_satisfaction")
```

### Mit DataExplorer

```{r}
oecd |> 
  select(Life_satisfaction) |> 
  plot_histogram()
```

### Mit ggplot

Das R-Paket `ggplot` wird durch das "Meta-Paket" `tidyverse` gestartet. Sie müssen es also nicht extra starten.

```{r}
oecd %>% 
  ggplot(aes(x = Life_satisfaction)) +
  geom_histogram()
```

Eine ähnliche Aussage liefert das Dichte-Diagramm:


```{r}
oecd %>% 
  ggplot(aes(x = Life_satisfaction)) +
  geom_density()
```

Die *Dichte*  gibt an, welcher Anteil der Beobachtungen an der jeweiligen Stelle der X-Achse lägen, wenn man eine Einheit betrachtet (z.B. die Lebenszufriedenheit von 5-6).


## Histogramm nach Gruppen: Lebenszufriedenheit in De und Fr

Angenommen, man möchte Deutschland mit Frankreich vergleichen im Hinblick auf die Lebenszufriedenheit.

Zunächst filtern wir den OECD-Datensatz, so dass nur die beiden genannten Länder enthalten bleiben:


```{r}
oecd_de_fr <- 
oecd %>% 
  filter(Country == "Germany" | Country == "France") 
```


Dann visualisieren wir wieder.

### Mit ggpubr

```{r}
oecd_de_fr |> 
  gghistogram(x = "Life_satisfaction", facet.by = "Country")
```

### Mit DataExplorer

Leider unterstützt DataExplorer nicht direkt den Vergleich von Grupen mit einem Histogramm. Man könnte aber einen Boxplot verwenden stattdessen.

```{r}
oecd_de_fr |> 
  select(Life_satisfaction, Country) |> 
  plot_boxplot(by = "Country")
```

### Mit ggplot

```{r}
oecd_de_fr %>% 
  ggplot(aes(x = Life_satisfaction)) +
  geom_histogram(bins = 15) +
  facet_wrap(~ Country)
```


## Histogramm für alle metrischen Variablen auf einmal

Um einen Überblick über die Verteilungen zu bekommen, bietet es sich an, sich alle Verteilungen anzuschauen. 
Malen wir einmal alle Histogramme auf einmal. Das geht wiederum mit `DataExplorer` sehr einfach:

```{r}
oecd |> 
  plot_histogram()
```



## VERTIEFUNG: Histogramm für alle Variablen auf kompliziert



:::{.callout-note}
Dieser Abschnitt ist eine Vertiefung; Sie können in überspringen, ohne den Anschluss zu den folgenden Abschnitten zu verlieren. $\square$
:::




Als erstes erzeugen wir einen langen Dataframe (der nur aus metrischen Variablen besteht):

```{r}
oecd_de_fr %>% 
  select(where(is.numeric)) %>%  # wähle alle Spalten aus, wo sich Nummern finden
  pivot_longer(everything()) %>%  # baue alle Variablen in ein langes Format um
  slice(1:10) # zeige die Zeilen 1 bis 10
```



Dann plotten wir Histogramme, wobei wir nach den Ländern (`key`) gruppieren. Aber zuerst speichern wir uns den "langen" Datensatz ab:

```{r}
oecd_de_fr_long <- 
oecd_de_fr %>% 
  select(where(is.numeric)) %>%  # wähle alle Spalten aus, wo sich Nummern finden
  pivot_longer(everything()) 
```

Betrachten Sie diesen Daten einmal zur Übung.


Dann plotten wir in gewohnter Manier:

```{r}
oecd_de_fr_long %>% 
  ggplot(aes(x = value)) +
  geom_histogram() +
  facet_wrap(~ name)
```





# Forschungsfrage: Lebenszufriedenheit in De im internationalen Vergleich

## Hintergrund

Hat Deutschland in Vergleich zu anderen Ländern eine hohe Lebenszufriedenheit?

Die Frage ist noch recht unpräzise formuliert, aber dafür gibt sie Raum für eine Menge von Untersuchungsansätzen.


### Datensatz filtern - nur Länder, keine Landesteile

Der Datensatz in seiner aktuellen Form verstößt gegen die Regel der "Normalform", dass in jeder Zeile (genau) eine Beobachtungseinheit steht und in jeder Zeile (genau) eine Variable. In einigen Zeilen stehen *Länder*, in den meisten anderen aber *Landesteile* (wie Bayern, Baden-Württemberg etc.). Filtern wir uns nur die Länder, und exkdluieren die Landesteile:


```{r}
oecd_short <-
  filter(oecd, region_type == "country_whole") 
```

Die Anzahl der Zeilen dieses Datensatz `oecd_short` gibt uns Aufschluss über die Anzahl der untersuchten Länder.


### Visualisierung der Lebenszufriedenheit der Länder


#### Mit DataExplorer

```{r}
oecd_short |> 
  select(Country, Life_satisfaction) |> 
  plot_scatterplot(by = "Life_satisfaction")
```


#### Mit ggplot

```{r}
oecd_short %>% 
  ggplot(aes(x = Country, y = Life_satisfaction)) +
  geom_point()
```


#### Sieht nicht so schön aus

Hm, unser Punktediagramm sieht nicht übersichtlich aus. Besser wäre es, die Punkte absteigend zu sortieren.

Betrachten wir dazu die Variable `country` näher: Es handelt sich um eine Character-Variable:

```{r}
str(oecd)
```

Eine Variable des Typs `character` steht für Text, z.B. `"Germany"`.

Offensichtlich sind diese alphabetisch geordnet -- nach dieser Ordnung richtet sich die Ordnung im Diagramm.


### Umwandling in eine Faktor-Variable

In solchen Fällen bietet es sich an, die Character-Variable in eine *Factor-Variable* umzuwandeln; dann geht das Weitere einfacher.


```{r}
oecd_short <- 
oecd_short %>% 
  mutate(Country = factor(Country))
```

Übrigens:
Möchte man wissen, wie viele *unterschiedliche* Werte eine Variable enthält, dann kann die Funktion `distinct()` verwenden:

```{r}
oecd_short %>% 
  distinct(Country)
```



## Ranking und Top-10-Prozent der Zufriedenheit

### Top-10

Schauen wir uns die "Happy-Top-10" an, die 10 Länder mit der höchsten Lebenszufriedenheit:


```{r}
oecd_short %>% 
  arrange(-Life_satisfaction) %>%  # absteigend sortieren
  select(Country, Life_satisfaction) %>% 
  slice(1:10)
```

### Die oberen 10% der Zufriedenheit

Mit welcher Lebenszufriedenheit gehört ein Land zu den Top-10-Prozent der zufriedenen Länder?

```{r}
oecd_short %>% 
  summarise(quantile(Life_satisfaction, probs = .90))
```


Ah, Länder mit einer Lebenszufriedenheit von mind. `r mosaic::quantile(~Life_satisfaction, data = oecd_short, probs = .90)` gehören zu den oberen Top-10-Prozent. 
Filtern wir mal entsprechend:


```{r}
oecd_short %>% 
  filter(Life_satisfaction >= 9.7) %>% 
  select(Country, Life_satisfaction)
```



## Vertiefung

Ändern wir die Sortierung! Mit `reorder()` kann man die Sortierung ändern (re-ordnen, daher der Name):

```{r}
oecd_short_reordered <- 
oecd_short %>% 
  mutate(Country_sorted = reorder(Country, Life_satisfaction)) 
```


Ist das jetzt geordnet? `str()` (wie `str`ucture) verrät es uns:

```{r}
str(oecd_short_reordered)
```


Wie man sieht, ist `Country_sorted` jetzt anders sortiert.

Visualisieren wir das Ergebnis:


### Mit DataExplorer

```{r}
oecd_short_reordered |> 
  select(Country_sorted, Life_satisfaction) |> 
  plot_scatterplot(by = "Life_satisfaction")
```

Oh, `DataExplorer` macht die Reihenfolge wieder kaputt.

### Mit ggpubr

```{r}
oecd_short_reordered |> 
  ggscatter(x = "Country_sorted",
            y = "Life_satisfaction")
```



### Mit ggplot

```{r}
plot_sorted <- oecd_short_reordered %>% 
  ggplot(aes(x = Country_sorted, y = Life_satisfaction)) +
  geom_point()

plot_sorted
```

Schon besser. Man kann z.B. die Achsen nicht lesen `r emo::ji("sad")`. Was könnte man da bloß tun?


### Achsenu um 90 Grad drehen

Mit `+ coord_flip()` lassen sich die Achsen um 90 Grad drehen:

```{r}
plot_sorted + coord_flip()
```


Schön `r emo::ji("smile")`.

Man hätte das Sortieren und Achsen drehen auch in einem Haps machen können:


```{r}
oecd_short_reordered %>% 
  ggplot(aes(x = Country_sorted, y = Life_satisfaction)) +
  geom_point() + coord_flip()
```


Aber übersichtlicher ist es, die Dinge nacheinander zu tun.


### Mittelwert ins Diagramm

Schön wäre es noch, im Bild den Mittelwert o.Ä. im Diagramm zu sehen:

```{r}
oecd_short_reordered %>% 
  ggplot(aes(x = Country_sorted, y = Life_satisfaction)) +
  geom_point() +
  geom_hline(yintercept = 6.08, data = NA, color = "firebrick") + 
  coord_flip()
```

Tja, die Wünsche hören nie auf... Wäre es nicht noch nett, wenn "Deutschland" hervorgehoben wäre, optisch, so dass es im Diagramm hervorsticht. Nehmen wir an, wir sind an diesem Land besonders interessiert.

```{r}
oecd_short_reordered <- 
  oecd_short_reordered %>% 
  mutate(is_Germany = Country == "Germany")
```
 
Damit haben wir eine Spalte erstellt, die angibt, ob ein Land Deutschland ist (`TRUE`) oder nicht (`FALSE`). Diese neue Variable nehmen wir her, um die Farbe, Größe und Form der Punkte zu bestimmen:
 
```{r}
oecd_short_reordered %>% 
  ggplot(aes(x = Country_sorted, y = Life_satisfaction)) +
  geom_point(aes(color = is_Germany, shape = is_Germany, size = is_Germany)) +
  geom_hline(yintercept = 6.08, data = NA, color = "firebrick") + 
  geom_hline(yintercept = 6.08, data = NA, color = "grey60") %>% 
  geom_vline(xintercept = 16, data = NA, color = "grey80") +
  coord_flip()

```




## Zusammenhang zweier metrischer Variablen -- Punktediagramm

Hängt die Lebenszufriedenheit mit `Civic_engagment` zusammen?

Visualisieren wir diesen (möglichen) Zusammenhang.

### Mit ggpubr

```{r}
oecd_short_reordered |> 
  ggscatter(x = "Civic_engagement",
            y = "Life_satisfaction")
```


### Mit DataExplorer

```{r}
oecd_short_reordered |> 
  select(Civic_engagement, Life_satisfaction) |> 
  plot_scatterplot(by = "Life_satisfaction")
```

DataExplorer bietet den Vorteil, dass man einfach überprüfen kann, ob irgendeine Variable mit Lebenszufriedenheit zusammenhängt:

```{r}
oecd_short_reordered |> 
  #select(Civic_engagement, Life_satisfaction) |> 
  plot_scatterplot(by = "Life_satisfaction")
```


### Mit ggplot


```{r}
oecd_short_reordered %>% 
  ggplot(aes(x = Civic_engagement, y = Life_satisfaction)) +
  geom_point()
```

### Insgesamt wenig Zusammenhang

Hm, es ist kein starker Trend zu erkennen.

Was sagt die Korrelation dazu:

```{r}
oecd_short_reordered %>% 
  summarise(cor_ce_ls = cor(Civic_engagement, Life_satisfaction))
```

Immerhin, kein ganz unwesentlicher Wert.


### Und so weiter

Dieses Prinzip mit dem Punktediagramm könnte man jetzt weiterführen ad nauseam.


### Korrelationsdiagramm


```{r}
#| fig-asp: 1.5
oecd_short_reordered |> 
  plot_correlation()
```


## Zusammenhang zweier Variablen unter Berücksichtigung von Drittvariablen

Oben haben wir gesehen, dass Lebenszufriedenheit und Civiv Engagement zusammenhängen (zumindest ein bisschen).

Aber vielleicht hängt dieser Zusammenhang wiederum von der finanziellen Absicherung ab? Nur wenn man materiell abgesichert ist, so könnte man argumentieren, wird bürgerliches Engagement (bzw. die Möglichkeit zu) eine Einflussgröße auf die Lebenszufriedenheit.

Anders gesagt: Man könnte behaupten, der Zusammenahng von Lebenszufriedenheit und Civiv Engagement ist abhängig von einer dritten Variable, dem Einkommen.

Um diese Frage zu untersuchen, teilen wir `Income` in zwei Stufen, hoch und gering. Dann untersuchen wir jeweils den Zusammenhang von Lebenszufriedenheit und bürgerlichem Engagement.

*Achtung*! Eine metrische Variablen in zwei Hälften zu spalten birgt einen hohen Informationsverlust. Da wir aber nur eine grobe Untersuchung vorhaben (und uns noch nicht fortgeschrittener Technik bedienen wollen), bleiben wir erstmal bei dieser sog. *Dichotomisierung*.

Nehmen wir den Median des Einkommen als Teilungspunkt; man spricht von einem "Mediansplit":

```{r}
oecd_short %>% 
  summarise(Income_md = median(Income))
```



Zuerst erstellen wir eine Variable `Income_high` mit den Stufen 0 (nein) und 1 (ja):

```{r}
oecd_short_reordered <- 
  oecd_short_reordered %>% 
    mutate(Income_high = 
           case_when( Income >= median(Income) ~ 1,
                      Income < median(Income) ~ 0))
```


### Visualisierung

Jetzt plotten wir den Zusammenhang:



#### Mit ggpubr

```{r}
oecd_short_reordered |> 
  ggscatter(y = "Country_sorted",
            x = "Life_satisfaction",
            facet.by = "Income_high")
```



#### Mit ggplot

```{r}
income_labels <- c(`0` = "arm", 
                   `1` ="reich")

oecd_short_reordered %>% 
  ggplot(aes(x = Country_sorted, y = Life_satisfaction)) +
  geom_point() +
  facet_wrap(~ Income_high, 
             labeller = labeller(Income_high = income_labels))  +
  coord_flip() +
  labs(y = "Länder",
       x = "Lebenszufriedenheit",
       title = "Lebenszufriedenheit in armen und reichen Ländern ") +
  theme_minimal()
```


### Vertiefung: Korrelation pro Gruppe

Um die Korrelation pro Gruppe zu erhalten, könnten wir jeweils einen Dataframe pro Gruppe erzeugen (mit `filter()`) und dann jeweils die Korrelation von Zufriedenheit und Engagement berechnen.

Eine andere, etwas elegantere Möglichkeit kann so aussehen:

```{r}
oecd_short_reordered %>%
  group_by(Income_high) %>% 
  summarise(cor_zuf_eng = cor(Life_satisfaction, Civic_engagement))
```

Interessanterweise ist die Korrelation durchaus verschieden in den beiden Gruppen.

Natürlich sind die beiden Gruppen nur Stichproben - es stellt sich die Frage, ob die Unterschiede nur durch Zufälligkeiten des Stichprobenziehens entstanden sind oder auch in der Grundgesatmtheit der "reichen" und "armen" Ländern existieren? Dazu später mehr!


## Deskriptive Statistiken nach Ländern
 
 
### Lebenszufriedenheit

#### Mit `easystats`

Das ist relativ einfach:

```{r}
oecd_short_reordered %>% 
  select(Life_satisfaction) %>% 
  describe_distribution()
```


#### Mit `tidyverse` 

```{r}
oecd_short_reordered %>% 
  summarise(satis_mean = mean(Life_satisfaction),
            satis_median = median(Life_satisfaction),
            satis_sd = sd(Life_satisfaction),
            satis_iqr = IQR(Life_satisfaction))
```







# Reproducibility

```{r reproducibility, echo = FALSE}
## Reproducibility info
options(width = 120)
devtools::session_info()
```



