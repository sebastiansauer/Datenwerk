---
date: today
draft: TRUE   # ACHTUNG DRAFT STEHT AUF TRUE!
title: chatgpt-sentiment-simple
execute: 
  eval: false

extype: string
exsolution: ""
categories:
- textmining
- nlp
- transformer
- chatgpt
- sentiment
---








```{r global-knitr-options, include=FALSE}
knitr::opts_chunk$set(fig.pos = 'H',
                      fig.asp = 0.618,
                      fig.width = 4,
                      fig.cap = "", 
                      fig.path = "",
                      echo = TRUE, 
                      message = FALSE,
                      fig.show = "hold")
```







# Aufgabe


Fragen Sie ChatGPT via API zum Sentiment der ersten zwei Texte aus dem Germeval-2018-Datensatz (Train).


Hinweise:

- Beachten Sie die [Standardhinweise des Datenwerks](https://datenwerk.netlify.app/hinweise).
- Nutzen Sie Python, nicht R.
- Das Verwenden der OpenAI-API kostet Geld. üí∏ Informieren Sie sich vorab. Um auf die API zugreifen zu k√∂nnen, m√ºssen Sie sich ein Konto angelegt haben und √ºber ein Guthaben verf√ºgen.



</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>

# L√∂sung


::: {.callout-attention}
OpenAI hat eine neue API (Stand: 2023-11-23). Der Code der alten API bricht. üíî $\square$
:::




Module importieren:

```{python}
from openai import OpenAI
import pandas as pd
```



Daten importieren:

```{python import-data}
csv_file_path_train = 'https://github.com/sebastiansauer/pradadata/raw/master/data-raw/germeval_train.csv'

germeval_train = pd.read_csv(csv_file_path_train)
```


Die ersten paar Texte herausziehen:

```{python}
tweets_first2 = germeval_train["text"].head(2).tolist()
tweets_first2
```


Prompt definieren:

```{python}
prompt_stem  = "Als KI mit Exertise in nat√ºrlicher Sprache und Emotionserkennung ist es Ihre Aufgabe, das Sentiment des folgenden Textes zu erkennen. Bitte antworten Sie nur mit einem Wort, entweder 'positiv', 'neutral' oder 'negativ'. Dieses Wort soll die Insgesamt-Einsch√§tzung des Sentiments des Textes zusammenfassen."
```


Mit "List Comprehension" k√∂nnen wir die Tweets jeweils mit dem Prompt verkn√ºpfen:

```{python}
prompts = [prompt_stem + tweet for tweet in tweets_first2]
prompts
```



Anmelden bei OpenAI:

```{python}
client = OpenAI()
```


::: {.callout-note}
Dieses Anmeldeverfahren setzt voraus, dass in `.Renviron` die Variable `OPENAI_API_KEY` hinterlegt ist. $\square$
:::






Anfrage an die API, in eine Funktion gepackt:

```{python}
def get_completion(prompt, client_instance, model="gpt-3.5-turbo"):
  messages = [{"role": "user", "content": prompt}]
  response = client_instance.chat.completions.create(
  model=model,
  messages=messages,
  max_tokens=50,
  temperature=0,
  )
  return response.choices[0].message.content
```


Und jetzt als Schleife:

```{python ask-api}
for prompt in prompts:
  get_completion(pr, client) 
```

